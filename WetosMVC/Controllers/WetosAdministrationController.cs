using System;
using System.Collections.Generic;
using System.Data.OleDb;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using WetosDB;
using WetosMVCMainApp.Models;
using System.Data;
using WETOS.Util;

namespace WetosMVC.Controllers
{
    [SessionExpire]
    [Authorize]
    public class WetosAdministrationController : BaseController
    {
        //List<WetosDB.Employee> m_LstEmployee;
        //List<WetosDB.Employee> m_LstLoginEmp;
        //List<WetosDB.UploderFailed> m_LstUpdateFailed;



        public static readonly string ExcelConnection = System.Configuration.ConfigurationManager.AppSettings["ExcelConnStr"];
        //
        // GET: /Administration/

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult ExportPayRoll()
        {

            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyObj = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, Comapnayname = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion
            ViewBag.CompanyList = new SelectList(CompanyObj, "Companyid", "Comapnayname").ToList();

            #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            //var BranchObj = WetosDB.Branches.Where(a => a.MarkedAsDelete == 0).Select(a => new { Branchid = a.BranchId, BranchName = a.BranchName }).ToList();
            var BranchObj = WetosDB.SP_GetBranchList(EmployeeId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion
            ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();

            List<WetosDB.EmployeeType> EmployeeTypeList = WetosDB.EmployeeTypes.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).ToList();
            ViewBag.EmployeeTypeList = new SelectList(EmployeeTypeList, "EmployeeTypeId", "EmployeeTypeName").ToList();

            return View();
        }

        [HttpPost]
        public ActionResult ExportPayRoll(MonthlyReportsModel MonthlyReportsModelObj)
        {


            return View();
        }

        /// <summary>
        /// Json return for to get Branch dropdown list on basis of company selection
        /// Added by Rajas on 24 FEB 2016
        /// </summary>
        /// <returns></returns>
        /// 
        [HttpPost]
        public JsonResult GetBranch(string Companyid)
        {
            int SelCompanyId = 0;
            if (!string.IsNullOrEmpty(Companyid))
            {
                if (Companyid.ToUpper() != "NULL")
                {
                    SelCompanyId = Convert.ToInt32(Companyid);
                }
            }

            // Updated by Rajas on 30 MAY 2017
            #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            //var BranchList = WetosDB.Branches.Where(a => a.Company.CompanyId == SelCompanyId && (a.MarkedAsDelete == null || a.MarkedAsDelete == 0)).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();
            var BranchList = WetosDB.SP_GetBranchList(EmployeeId).Where(a => a.CompanyId == SelCompanyId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            return Json(BranchList);
        }


        [HttpPost]
        public JsonResult GetFinancialYear(string Companyid)
        {
            int SelCompanyId = 0;
            if (!string.IsNullOrEmpty(Companyid))
            {
                if (Companyid.ToUpper() != "NULL")
                {
                    SelCompanyId = Convert.ToInt32(Companyid);
                }
            }

            var FinancialYearList = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == SelCompanyId).Select(a => new { FinancialYearId = a.FinancialYearId, FinancialName = a.FinancialName }).ToList();

            return Json(FinancialYearList);
        }

        /// <summary>
        /// Json return for to get Department dropdown list on basis of branch selection
        /// Added by Rajas on 24 FEB 2016
        /// </summary>
        /// <returns></returns>
        /// 
        [HttpPost]
        public JsonResult GetDepartment(string Branchid)
        {
            int SelDepartmentId = 0;
            if (!string.IsNullOrEmpty(Branchid))
            {
                if (Branchid.ToUpper() != "NULL")
                {
                    SelDepartmentId = Convert.ToInt32(Branchid);
                }
            }

            // Updated by Rajas on 30 MAY 2017
            var DepartmentList = WetosDB.Departments.Where(a => a.Branch.BranchId == SelDepartmentId
                && (a.MarkedAsDelete == null || a.MarkedAsDelete == 0)).Select(a => new { DepartmentId = a.DepartmentId, DepartmentName = a.DepartmentCode + " - " + a.DepartmentName }).ToList();//ADDED DEPARTMENT CODE BY SHRADDHA ON 15 FEB 2018 

            return Json(DepartmentList);
        }

        /// <summary>
        /// Json return for to get Employee dropdown list on basis of department selection
        /// Added by Rajas 24 FEB 2017
        /// </summary>
        /// <returns></returns>

        [HttpPost]
        public JsonResult GetEmployee(int Companyid, int Branchid)
        {
            // Updated on Rajas on 8 FEB 2017 for reducing ajax return list and json return as per required parameter START

            //DateTime Leavingdate = Convert.ToDateTime("01/01/1900");  // Added by Rajas on 9 MARCH 2017



            #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var EmployeeObj = WetosDB.Employees.Where(a => a.ActiveFlag == true).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
            var EmployeeObj = WetosDB.SP_VwActiveEmployee(EmployeeId).Where(a => a.ActiveFlag == true).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
            #endregion

            //var EmployeeObj = WetosDB.Employees.Where(a => a.CompanyId == Companyid || a.BranchId == Branchid || a.DepartmentId == Departmentid).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.FirstName + " " + a.LastName }).ToList();

            if (Branchid == 0) // Modified by Rajas on 9 FEB 2017
            {

                #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
                //EmployeeObj = WetosDB.Employees.Where(a => a.CompanyId == Companyid && a.ActiveFlag == true)
                //.Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
                EmployeeObj = WetosDB.SP_VwActiveEmployee(EmployeeId).Where(a => a.CompanyId == Companyid && a.ActiveFlag == true)
                  .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
                #endregion
            }

            //else if (Departmentid == 0)
            //{
            //    EmployeeObj = WetosDB.Employees.Where(a => a.BranchId == Branchid && a.CompanyId == Companyid)
            //   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();

            //}

            // COMMENTED BY RAJAS ON 9 FEB 2017
            //else if (Companyid != 0 && Branchid == 0 && Departmentid != 0)
            //{
            //    EmployeeObj = WetosDB.Employees.Where(a => a.BranchId == Companyid && a.DepartmentId == Departmentid)
            //          .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.FirstName + " " + a.LastName }).ToList();
            //}
            //else if (Companyid == 0 && Branchid != 0 && Departmentid != 0)
            //{
            //    EmployeeObj = WetosDB.Employees.Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.FirstName + " " + a.LastName }).ToList();
            //}

            else
            {
                #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
                //EmployeeObj = WetosDB.Employees.Where(a => a.BranchId == Branchid && a.CompanyId == Companyid && a.ActiveFlag == true)
                //   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
                EmployeeObj = WetosDB.SP_VwActiveEmployee(EmployeeId).Where(a => a.BranchId == Branchid && a.CompanyId == Companyid && a.ActiveFlag == true)
                   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
                #endregion
            }

            return Json(EmployeeObj);
            // Updated on Rajas on 24 FEB 2017 for reducing ajax return list and json return as per required parameter END
        }

        /// <summary>
        /// Added by Rajas on 22 FEB 2017
        /// </summary>
        /// <returns></returns>
        public ActionResult FinancialYearIndex()
        {
            try
            {
                List<SP_GetFinancialYearDataList_Result> FinancialYearListObj = WetosDB.SP_GetFinancialYearDataList().ToList();

                return View(FinancialYearListObj);
            }

            catch (System.Exception ex)
            {
                AddAuditTrail("Can't redirect to financial year due to " + ex.Message);

                Error("Something seems to be wrong, please try again");

                return RedirectToAction("LeaveCreditIndex");

            }
        }

        /// <summary>
        /// Added by Rajas on 22 FEB 2017 for add new Financial year 
        /// GET
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult FinancialYearCreate()
        {
            try
            {
                PopulateDropdown();

                return View();
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Exception due to " + ex.Message);

                Error(WetosErrorMessageController.GetErrorMessage(11));

                return RedirectToAction("FinancialYearIndex");
            }
        }


        /// <summary>
        /// Added by Rajas on 22 FEB 2017 for add new Financial year 
        /// POST
        /// </summary>
        /// <param name="NewFinancialYear"></param>
        /// <param name="fc"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FinancialYearCreate(FinancialYearModel NewFinancialYear, FormCollection fc)
        {
            try
            {
                if (NewFinancialYear.StartDate > NewFinancialYear.EndDate)
                {
                    PopulateDropdown();

                    //ADDED BY RAJAS ON 27 DEC 2016
                    AddAuditTrail("FY-Create : Invalid End Date in FY");

                    Error(WetosErrorMessageController.GetErrorMessage(14));
                    return View(NewFinancialYear);
                }

                // Updated by Rajas on 27 MARCH 2017
                string UpdateStatus = string.Empty;

                // Added by Rajas on 15 MAY 2017
                bool IsEdit = false;

                if (UpdateFinancialYearData(NewFinancialYear, IsEdit, ref UpdateStatus) == true)
                {
                    //ADDED BY RAJAS ON 27 DEC 2016
                    AddAuditTrail("New financial year added successfully");

                    Success("New financial year " + NewFinancialYear.FinancialName + " added successfully");
                }
                else
                {
                    AddAuditTrail(UpdateStatus);

                    Error(UpdateStatus);
                }

                return RedirectToAction("FinancialYearIndex");
            }
            catch (System.Exception ex)
            {
                PopulateDropdown();

                //ADDED BY RAJAS ON 27 DEC 2016
                AddAuditTrail("New financial year not added due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error(WetosErrorMessageController.GetErrorMessage(11));

                return RedirectToAction("FinancialYearCreate");
            }

        }

        /// <summary>
        /// Added by Rajas on 22 FEB 2017 for edit Financial year 
        /// GET
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult FinancialYearEdit(int id)
        {
            try
            {
                // GET EXISTNG Financial year
                WetosDB.FinancialYear FinancialYearEditObj = WetosDB.FinancialYears.Single(b => b.FinancialYearId == id);

                FinancialYearModel NewFinancialYear = new FinancialYearModel();

                NewFinancialYear.FinancialId = FinancialYearEditObj.FinancialYearId;

                // Updated by Rajas on 10 MARCH 2017 to remove extra blank space
                NewFinancialYear.FinancialName = FinancialYearEditObj.FinancialName.Trim();

                NewFinancialYear.StartDate = FinancialYearEditObj.StartDate;

                NewFinancialYear.EndDate = FinancialYearEditObj.EndDate;

                NewFinancialYear.CompanyId = FinancialYearEditObj.Company.CompanyId;

                NewFinancialYear.BranchId = FinancialYearEditObj.Branch.BranchId;

                PopulateDropdownEdit();

                return View(NewFinancialYear);
            }

            catch (System.Exception ex)
            {
                PopulateDropdownEdit();

                AddAuditTrail("Exception due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error(WetosErrorMessageController.GetErrorMessage(10));

                return RedirectToAction("FinancialYearIndex");
            }

        }

        /// <summary>
        /// Added by Rajas on 22 FEB 2017 for edit Financial year 
        /// POST
        /// </summary>
        /// <param name="NewFinancialYear"></param>
        /// <param name="fc"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FinancialYearEdit(int id, FinancialYearModel NewFinancialYear)
        {
            try
            {

                if (NewFinancialYear.StartDate > NewFinancialYear.EndDate)
                {
                    PopulateDropdown();

                    //ADDED BY RAJAS ON 27 DEC 2016
                    AddAuditTrail("FY-Edit: Invalid End Date in FY");

                    Error(WetosErrorMessageController.GetErrorMessage(14));
                    return View(NewFinancialYear);
                }

                string UpdateStatus = string.Empty;

                // Added by Rajas on 15 MAY 2017
                bool IsEdit = true;

                // Updated by rajas on 15 MAY 2017
                if (UpdateFinancialYearData(NewFinancialYear, IsEdit, ref UpdateStatus) == true)
                {
                    //ADDED BY RAJAS ON 27 DEC 2016
                    AddAuditTrail("New financial year updated successfully");

                    Success("New financial year " + NewFinancialYear.FinancialName + " updated successfully");
                }
                else
                {
                    // Updated by Rajas on 27 MARCH 2017
                    AddAuditTrail(UpdateStatus);

                    Error(UpdateStatus);
                }

                return RedirectToAction("FinancialYearIndex");
            }
            catch (System.Exception ex)
            {
                #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
                //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
                int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
                //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
                var CompanyObj = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, Comapnayname = m.CompanyName }).ToList();
                //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
                #endregion

                ViewBag.CompanyList = new SelectList(CompanyObj, " CompanyId", "CompanyName").ToList();

                #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
                //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
                //var BranchObj = WetosDB.Branches.Where(a => a.Company.CompanyId == SelCompanyId && (a.MarkedAsDelete == null || a.MarkedAsDelete == 0)).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();
                var BranchObj = WetosDB.SP_GetBranchList(EmployeeId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
                //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
                #endregion

                ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();

                //ADDED BY RAJAS ON 27 DEC 2016
                AddAuditTrail("New financial year not updated due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error(WetosErrorMessageController.GetErrorMessage(10));

                return View();
            }

        }
        /// <summary>
        /// Added by Rajas on 22 FEB 2017 validate financial year data
        /// </summary>
        /// <param name="NewFinancialYear"></param>
        /// <returns></returns>
        private bool UpdateFinancialYearData(FinancialYearModel NewFinancialYear, bool IsEdit, ref string UpdateStatus)
        {
            bool ReturnStatus = false;

            try
            {
                // Company and Branch validation added by Rajas on 16 MARCH 2017
                WetosDB.FinancialYear FinancialYearTblObj = WetosDB.FinancialYears.Where(a => (a.FinancialYearId == NewFinancialYear.FinancialId || a.FinancialName.Trim() == NewFinancialYear.FinancialName.Trim())
                    && a.Company.CompanyId == NewFinancialYear.CompanyId && a.Branch.BranchId == NewFinancialYear.BranchId).FirstOrDefault();

                // ADDED BY RAJAS ON 05 JUNE 2017 START
                bool IsNew = false;

                // IS OBJECT PRESET
                if (FinancialYearTblObj != null)  // Added by Rajas on 2 JUNE 2017
                {
                    if (IsEdit == false)  // CREATE            
                    {
                        UpdateStatus = WetosErrorMessageController.GetErrorMessage(13);

                        //AddAuditTrail("Error in Department update : " + UpdateStatus);
                        return ReturnStatus;
                    }
                }
                else
                {
                    if (IsEdit == false) // CREATE    
                    {
                        FinancialYearTblObj = new WetosDB.FinancialYear();
                        IsNew = true;
                    }
                    else // EDIT    
                    {
                        UpdateStatus = WetosErrorMessageController.GetErrorMessage(10);
                        //AddAuditTrail("Error in Department update : " + UpdateStatus);
                        return ReturnStatus;
                    }
                }
                // ADDED BY RAJAS ON 05 JUNE 2017 END

                FinancialYearTblObj.Branch = WetosDB.Branches.Where(a => a.BranchId == NewFinancialYear.BranchId && a.Company.CompanyId == NewFinancialYear.CompanyId).FirstOrDefault();

                FinancialYearTblObj.Company = WetosDB.Companies.Where(a => a.CompanyId == NewFinancialYear.CompanyId).FirstOrDefault();
                // New Leave table object
                //FinancialYearTblObj.Branch.BranchId = NewFinancialYear.BranchId;

                //FinancialYearTblObj.Company.CompanyId = NewFinancialYear.CompanyId;

                FinancialYearTblObj.FinancialName = NewFinancialYear.FinancialName.Trim();

                FinancialYearTblObj.StartDate = NewFinancialYear.StartDate;

                FinancialYearTblObj.EndDate = NewFinancialYear.EndDate;

                int Year = FinancialYearTblObj.StartDate.Year;
                int YearEnd = FinancialYearTblObj.EndDate.Year;
                int CurrentYear = YearEnd - 2000;

                if (Year == YearEnd)
                {
                    FinancialYearTblObj.Series = Year.ToString();
                }
                else
                {
                    FinancialYearTblObj.Series = string.Format("{0}-{1}", Year, CurrentYear);
                }
                FinancialYearTblObj.MarkedAsDelete = 0;

                FinancialYear LastFY = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == FinancialYearTblObj.Company.CompanyId && a.Branch.BranchId == FinancialYearTblObj.Branch.BranchId).OrderByDescending(a => a.FinancialYearId).FirstOrDefault();

                FinancialYear FinancialYear1 = WetosDB.FinancialYears.FirstOrDefault();
                int MaxFYId = 0;
                if (FinancialYear1 != null)
                {
                    MaxFYId = WetosDB.FinancialYears.Max(a => a.FinancialYearId);
                }
                if (LastFY == null)
                {
                    FinancialYearTblObj.PrevFYId = 0;
                }
                else
                {
                    FinancialYearTblObj.PrevFYId = LastFY.FinancialYearId;
                }
                FinancialYearTblObj.NextFYId = MaxFYId + 1;
                // Add new table object 
                if (IsNew)
                {
                    WetosDB.FinancialYears.AddObject(FinancialYearTblObj);
                }

                WetosDB.SaveChanges();

                ReturnStatus = true;

                return ReturnStatus;
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                UpdateStatus = "Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);

                return ReturnStatus;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult LeaveCreditIndex()
        {
            // SP added by Rajas on 23 FEB 2017
            //ADDED TRY CATCH BLOCK BY SHRADDHA ON 16 MARCH 2017 
            try
            {
                // Added by Rajas on 17 MARCH 2017 START

                // Get current FY from global setting
                //GlobalSetting GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == "Current Financial Year").FirstOrDefault();

                //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
                GlobalSetting GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == GlobalSettingsConstant.CurrentFinancialYear).FirstOrDefault();

                List<SP_GetLeaveCreditDataList_Result> LeaveCreditList = new List<SP_GetLeaveCreditDataList_Result>();  // Verify ?

                // Error
                if (GlobalSettingObj == null)
                {
                    Error("Inconsistent Financial year data");

                    return View(LeaveCreditList);
                }
                // Added by Rajas on 17 MARCH 2017 END

                LeaveCreditList = WetosDB.SP_GetLeaveCreditDataList(GlobalSettingObj.SettingValue.Trim()).ToList();  // Verify ?

                return View(LeaveCreditList);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error in viewing leave credit data due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult LeaveCreditCreate()
        {
            try
            {
                PopulateDropdown();
                LeaveCreditModel LeaveCreditModelObj = new LeaveCreditModel();
                LeaveCreditModelObj.ApplicableFromDate = DateTime.Now;
                return View(LeaveCreditModelObj);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Exception due to " + ex.Message);

                Error("Can not add leave credit entry");

                return RedirectToAction("LeaveCreditIndex");
            }
        }

        public JsonResult GetLeaveType(int employeeid, int branchid, int companyid)
        {
            // Added by Rajas on 23 FEB 2017 generate list for available leaves as per employee group assigned
            EmployeeGroupDetail EmployeeGroupDetailObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == employeeid).FirstOrDefault();

            var LeaveTypeList = WetosDB.LeaveMasters.Where(a => a.Company.CompanyId == companyid && a.BranchId == branchid)
                      .Select(a => new { LeaveType = a.LeaveCode, LeaveId = a.LeaveCode }).ToList();

            if (EmployeeGroupDetailObj != null)
            {
                LeaveTypeList = WetosDB.LeaveMasters.Where(a => a.Company.CompanyId == companyid && a.BranchId == branchid && a.EmployeeGroup.EmployeeGroupId == EmployeeGroupDetailObj.EmployeeGroup.EmployeeGroupId)
                       .Select(a => new { LeaveType = a.LeaveCode, LeaveId = a.LeaveCode }).ToList();
            }

            return Json(LeaveTypeList);

        }

        /// <summary>
        /// updated by Rajas on 24 MARCH 2017
        /// </summary>
        /// <param name="NewLeaveCredit"></param>
        /// <param name="collection"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult LeaveCreditCreate(LeaveCreditModel NewLeaveCredit, FormCollection collection)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    string UpdateStatus = string.Empty;

                    // Added by Rajas on 15 MAY 2017
                    bool IsEdit = false;

                    if ((UpdateLeaveCreditData(NewLeaveCredit, IsEdit, ref UpdateStatus)) == true)
                    {
                        AddAuditTrail("Success : Leave credit entry for EmployeeID : " + NewLeaveCredit.EmployeeId + " and Leave type : " + NewLeaveCredit.LeaveType);

                        Success("Leave credit entry successful");
                    }
                    else
                    {
                        AddAuditTrail(UpdateStatus);

                        Error(UpdateStatus);
                    }

                    return RedirectToAction("LeaveCreditIndex");
                }
                else
                {
                    PopulateDropdown();

                    return View(NewLeaveCredit);
                }
            }
            catch (System.Exception ex)
            {
                PopulateDropdown();

                AddAuditTrail("Error : Leave credit entry failed due to " + ex.Message);

                Error("Leave credit entry failed");

                //return RedirectToAction("LeaveCreditCreate");

                return View(NewLeaveCredit);
            }
        }

        //public ActionResult LeaveCreditDetails(int id)
        //{
        //    LeaveCredit LeaveCreditDetail = WetosDB.LeaveCredits.Single(b => b.LeaveCreditId == id);

        //    //ADDED BY RAJAS ON 27 DEC 2016
        //    AddAuditTrail("Leave credit details checked");

        //    return View(LeaveCreditDetail);
        //}

        /// <summary>
        /// Updated by Rajas on 24 FEB 2017
        /// GET
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult LeaveCreditEdit(int id, string LeaveType)
        {
            try
            {
                string UpdateStatus = string.Empty; // Added by Rajas on 24 MARCH 2017

                //LeaveCredit LeaveCreditEdit = WetosDB.LeaveCredits.Single(b => b.LeaveCreditId == id);

                LeaveCredit LeaveCreditEdit = WetosDB.LeaveCredits.Where(b => b.LeaveCreditId == id && b.LeaveType == LeaveType).FirstOrDefault();

                LeaveCreditModel NewLeaveCredit = new LeaveCreditModel();

                NewLeaveCredit.LeaveCreditId = LeaveCreditEdit.LeaveCreditId;

                NewLeaveCredit.LeaveType = LeaveCreditEdit.LeaveType;

                NewLeaveCredit.CompanyId = LeaveCreditEdit.CompanyId;

                NewLeaveCredit.OpeningBalance = LeaveCreditEdit.OpeningBalance;

                NewLeaveCredit.FinancialYearId = LeaveCreditEdit.FinancialYearId;

                NewLeaveCredit.Encash = LeaveCreditEdit.Encash;

                NewLeaveCredit.CarryForward = LeaveCreditEdit.CarryForward;

                NewLeaveCredit.BranchId = LeaveCreditEdit.BranchId;

                NewLeaveCredit.EmployeeId = LeaveCreditEdit.EmployeeId;

                NewLeaveCredit.Availed = LeaveCreditEdit.Availed;

                NewLeaveCredit.ApplicableFromDate = LeaveCreditEdit.ApplicableEffectiveDate;

                // Added by Rajas on 24 MARCH 2017 to Populate leave data
                if (PopulateLeaveData(LeaveCreditEdit.EmployeeId, ref UpdateStatus) == false)
                {
                    ModelState.AddModelError("", UpdateStatus);
                }

                PopulateDropdownEdit();

                return View(NewLeaveCredit);
            }

            catch (System.Exception ex)
            {
                AddAuditTrail("Error : Leave credit update failed due to " + ex.Message);

                Error("Leave credit update failed");

                return RedirectToAction("LeaveCreditIndex");
            }
        }

        /// <summary>
        /// Updated by Rajas on 24 FEB 2017
        /// POST
        /// </summary>
        /// <param name="id"></param>
        /// <param name="NewLeaveCredit"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult LeaveCreditEdit(int id, LeaveCreditModel NewLeaveCredit)
        {
            string UpdateStatus = string.Empty; // Added by Rajas on 24 MARCH 2017
            try
            {

                if (ModelState.IsValid)
                {


                    // Added by Rajas on 15 MAY 2017
                    bool IsEdit = true;

                    if (UpdateLeaveCreditData(NewLeaveCredit, IsEdit, ref UpdateStatus) == true)
                    {

                        AddAuditTrail("Success : Leave credit updated");

                        Success("Leave credit updated successfully");
                    }
                    else
                    {

                        AddAuditTrail(UpdateStatus);

                        Error(UpdateStatus);
                    }

                    return RedirectToAction("LeaveCreditIndex");
                }
                else
                {
                    if (PopulateLeaveData(id, ref UpdateStatus) == false)
                    {
                        ModelState.AddModelError("", UpdateStatus);
                    }

                    PopulateDropdownEdit();
                    return View(NewLeaveCredit);
                }
            }
            catch (System.Exception ex)
            {
                if (PopulateLeaveData(id, ref UpdateStatus) == false)
                {
                    ModelState.AddModelError("", UpdateStatus);
                }

                PopulateDropdownEdit();

                AddAuditTrail("Error : Leave credit not updated due to " + ex.Message);

                Error("Leave credit not updated");

                return View(NewLeaveCredit);
            }
        }

        /// <summary>
        /// Common function to validate the data for edit or create
        /// Added by Rajas on 24 FEB 2017
        /// </summary>
        /// UPDATED by Rajas on 29 JULY 2017
        private bool UpdateLeaveCreditData(LeaveCreditModel NewLeaveCredit, bool IsEdit, ref string UpdateStatus)
        {
            bool ReturnStatus = false;

            try
            {
                WetosDB.LeaveCredit LeaveCreditTblObj = WetosDB.LeaveCredits.Where(a => a.LeaveCreditId == NewLeaveCredit.LeaveCreditId).FirstOrDefault();
                // && a.EmployeeId == NewLeaveCredit.EmployeeId && a.LeaveType == NewLeaveCredit.LeaveType).FirstOrDefault();

                // Added by Rajas on 31 JULY 2017 
                WetosDB.LeaveCredit IsLeaveTypeAvailable = WetosDB.LeaveCredits.Where(a => a.LeaveType == NewLeaveCredit.LeaveType && a.EmployeeId == NewLeaveCredit.EmployeeId).FirstOrDefault();

                // ADDED BY RAJAS ON 29 JULY 2017 START
                bool IsNew = false;

                // IS OBJECT PRESET
                if (LeaveCreditTblObj != null)  // Added by Rajas on 2 JUNE 2017
                {
                    if (IsEdit == false)  // CREATE            
                    {
                        UpdateStatus = "Leave credit entry already available."; //WetosEmployeeController.GetErrorMessage(1);

                        //AddAuditTrail("Error in Department update : " + UpdateStatus);
                        return ReturnStatus;
                    }
                }
                else
                {
                    // UPDATED by Rajas on 31 JULY 2017 START
                    if (IsLeaveTypeAvailable != null)
                    {
                        UpdateStatus = "Leave credit entry already available for selected leave type."; //WetosEmployeeController.GetErrorMessage(1);

                        return ReturnStatus;

                    }
                    else
                    {
                        if (IsEdit == false) // CREATE    
                        {
                            LeaveCreditTblObj = new WetosDB.LeaveCredit();
                            IsNew = true;
                        }
                        else // EDIT    
                        {
                            UpdateStatus = "Error in updating Leave credit entry."; // WetosEmployeeController.GetErrorMessage(1); 
                            //AddAuditTrail("Error in Department update : " + UpdateStatus);
                            return ReturnStatus;
                        }
                    }
                    // UPDATED by Rajas on 31 JULY 2017 END
                }
                // ADDED BY RAJAS ON 29 JULY 2017 END

                string LeaveType = string.Empty;

                // To get leave code as leave type
                LeaveType = WetosDB.LeaveMasters.Where(a => a.LeaveCode == NewLeaveCredit.LeaveType && a.Company.CompanyId == NewLeaveCredit.CompanyId).Select(a => a.LeaveCode).FirstOrDefault();

                if (LeaveType == null)
                {
                    UpdateStatus = "Inconsistent data detected!! Please verify";
                }
                else
                {
                    LeaveCreditTblObj.LeaveType = LeaveType;
                }
                // Added by Rajas on 24 MARCH 2017 End

                LeaveCreditTblObj.CompanyId = NewLeaveCredit.CompanyId;

                LeaveCreditTblObj.OpeningBalance = NewLeaveCredit.OpeningBalance;

                LeaveCreditTblObj.FinancialYearId = NewLeaveCredit.FinancialYearId;

                LeaveCreditTblObj.Encash = NewLeaveCredit.Encash;

                LeaveCreditTblObj.CarryForward = NewLeaveCredit.CarryForward;

                LeaveCreditTblObj.BranchId = NewLeaveCredit.BranchId;

                LeaveCreditTblObj.EmployeeId = NewLeaveCredit.EmployeeId;

                LeaveCreditTblObj.Availed = NewLeaveCredit.Availed;

                LeaveCreditTblObj.ApplicableEffectiveDate = NewLeaveCredit.ApplicableFromDate;

                // Add new table object 
                if (IsNew)
                {
                    WetosDB.LeaveCredits.AddObject(LeaveCreditTblObj);
                }

                WetosDB.SaveChanges();

                UpdateStatus = "Leave credit Process successful";

                return ReturnStatus = true;
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                UpdateStatus = "Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);

                return ReturnStatus;
            }
        }


        public ActionResult Delete(int id)
        {
            return View();
        }


        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                return RedirectToAction("LeaveCreditIndex");
            }
            catch
            {
                return View();
            }
        }

        /// <summary>
        /// Verify ?
        /// </summary>
        /// <returns></returns>
        public ActionResult UserRightsUserList()
        {
            try
            {
                List<SP_UserTableForView_Result> UserList = new List<SP_UserTableForView_Result>();

                UserList = WetosDB.SP_UserTableForView().ToList(); // Updated by Rajas on 7 FEB 2017

                return View(UserList);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View();
            }

        }

        /// <summary>
        /// Added by Rajas on 24 FEB 2017
        /// Updated by Rajas on 22 MARCH 2017
        /// </summary>
        /// <returns></returns>
        public ActionResult LeaveBalanceIndex()
        {
            List<SP_LeaveBalanceDataList_Result> LeaveBalanceList = new List<SP_LeaveBalanceDataList_Result>();  // Verify ?

            try
            {
                // Added by Rajas on 17 MARCH 2017 START

                // Get current FY from global setting
                //GlobalSetting GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == "Current Financial Year").FirstOrDefault();

                //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
                GlobalSetting GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == GlobalSettingsConstant.CurrentFinancialYear).FirstOrDefault();

                // Error
                if (GlobalSettingObj == null)
                {
                    Error("Inconsistent Financial year data");

                    return View(LeaveBalanceList);
                }
                // Added by Rajas on 17 MARCH 2017 END

                LeaveBalanceList = WetosDB.SP_LeaveBalanceDataList(GlobalSettingObj.SettingValue.Trim()).ToList();  // Verify ?

                return View(LeaveBalanceList);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error in viewing leave credit data due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View(LeaveBalanceList);
            }

        }

        /// <summary>
        /// Added by Rajas on 24 FEB 2017
        /// GET
        /// </summary>
        /// <returns></returns>
        public ActionResult LeaveBalanceCreate()
        {
            try
            {
                PopulateDropdown();

                return View();
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Exception due to " + ex.Message);

                Error("Can not add leave balance entry");

                return RedirectToAction("LeaveBalanceIndex");
            }
        }

        /// <summary>
        /// Added by Rajas on 24 FEB 2017
        /// POST
        /// </summary>
        /// <param name="NewLeaveBalance"></param>
        /// <param name="collection"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult LeaveBalanceCreate(LeaveBalanceModel NewLeaveBalance, FormCollection collection)
        {
            try
            {
                string UpdateStatus = string.Empty;

                // Added by Rajas on 15 MAY 2017
                bool IsEdit = false;

                if (UpdateLeaveBalanceData(NewLeaveBalance, IsEdit, ref UpdateStatus) == true)
                {
                    AddAuditTrail("Success : Leave balance entry for EmployeeID : " + NewLeaveBalance.EmployeeId + " and Leave type : " + NewLeaveBalance.LeaveType);

                    Success("Leave balance entry successful");
                }
                else
                {
                    AddAuditTrail(UpdateStatus);

                    Error(UpdateStatus);
                }

                return RedirectToAction("LeaveBalanceIndex");
            }
            catch (System.Exception ex)
            {
                PopulateDropdown();

                AddAuditTrail("Error : Leave balance entry failed due to " + ex.Message);

                Error("Leave balance entry failed");

                return RedirectToAction("LeaveBalanceIndex");
            }
        }

        /// <summary>
        /// details
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult LeaveBalanceDetails(int id)
        {
            LeaveBalance LeaveBalanceDetail = WetosDB.LeaveBalances.Single(b => b.LeaveBalanceId == id);

            //ADDED BY RAJAS ON 27 DEC 2016
            AddAuditTrail("Leave balance details checked");

            return View(LeaveBalanceDetail);
        }

        /// <summary>
        /// Updated by Rajas on 24 FEB 2017
        /// GET
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult LeaveBalanceEdit(int id, string LeaveType)
        {
            try
            {
                string UpdateStatus = string.Empty;  // Added by Rajas on 24 MARCH 2017

                LeaveBalance LeaveBalanceEdit = WetosDB.LeaveBalances.Single(b => b.LeaveBalanceId == id && b.LeaveType == LeaveType);

                LeaveBalanceModel NewLeaveBalance = new LeaveBalanceModel();

                NewLeaveBalance.LeaveType = LeaveBalanceEdit.LeaveType.Trim();

                NewLeaveBalance.CompanyId = LeaveBalanceEdit.CompanyId;

                NewLeaveBalance.PreviousBalance = LeaveBalanceEdit.PreviousBalance;

                NewLeaveBalance.LeaveUsed = LeaveBalanceEdit.LeaveUsed;

                NewLeaveBalance.CurrentBalance = LeaveBalanceEdit.CurrentBalance;

                NewLeaveBalance.BranchId = LeaveBalanceEdit.BranchId;

                NewLeaveBalance.EmployeeId = LeaveBalanceEdit.EmployeeId;

                // Added by Rajas on 24 MARCH 2017 to Populate leave data
                if (PopulateLeaveData(LeaveBalanceEdit.EmployeeId, ref UpdateStatus) == false)
                {
                    ModelState.AddModelError("", UpdateStatus);
                }

                PopulateDropdownEdit();

                return View(NewLeaveBalance);
            }

            catch (System.Exception ex)
            {
                AddAuditTrail("Error : Leave credit update failed due to " + ex.Message);

                Error("Leave credit update failed");

                return RedirectToAction("LeaveBalanceIndex");
            }
        }

        /// <summary>
        /// TO GET Required Leave data
        /// Added by Rajas on 24 MARCH 2017
        /// </summary>
        /// <returns></returns>
        public bool PopulateLeaveData(int EmpId, ref string UpdateStatus)
        {
            bool ReturnStatus = false;

            try
            {
                // Added by Rajas on 23 FEB 2017 generate list for available leaves as per employee group assigned
                EmployeeGroupDetail EmployeeGroupDetailObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == EmpId).FirstOrDefault();

                if (EmployeeGroupDetailObj != null)
                {
                    // Updated by Rajas on 23 FEB 2017, added && a.EmployeeGrpId == EmployeeGroupDetailObj.EmployeeGroupId
                    var LeaveMasterList = WetosDB.LeaveMasters.Where(a => a.EmployeeGroup.EmployeeGroupId == EmployeeGroupDetailObj.EmployeeGroup.EmployeeGroupId)
                        .Select(a => new { LeaveId = a.LeaveCode, LeaveType = a.LeaveCode }).ToList();

                    ViewBag.LeaveTypeList = new SelectList(LeaveMasterList, "LeaveId", "LeaveType").ToList();

                    var FinYear = WetosDB.FinancialYears.Select(a => new { FinancialId = a.FinancialYearId, FinancialName = a.FinancialName }).ToList();
                    ViewBag.FinYearList = new SelectList(FinYear, "FinancialId", "FinancialName").ToList();


                    // Added by Rajas on 9 MARCH 2017 for Displaying error message if rules are not set to employee group
                    if (LeaveMasterList.Count <= 0)
                    {
                        UpdateStatus = "Please create leave rules for the particular Employee group";

                        return ReturnStatus;
                    }
                }
                else
                {
                    UpdateStatus = "Please Verify details, inconsistent data!!";

                    return ReturnStatus;
                }

                ReturnStatus = true;

                return ReturnStatus;
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Exception due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                UpdateStatus = "Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);

                return ReturnStatus;
            }
        }

        /// <summary>
        /// Updated by Rajas on 24 FEB 2017
        /// POST
        /// </summary>
        /// <param name="id"></param>
        /// <param name="NewLeaveCredit"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult LeaveBalanceEdit(int id, LeaveBalanceModel NewLeaveBalance)
        {
            try
            {
                string UpdateStatus = string.Empty;

                // Added by Rajas on 15 MAY 2017
                bool IsEdit = true;
                NewLeaveBalance.LeaveBalanceId = id;

                if (UpdateLeaveBalanceData(NewLeaveBalance, IsEdit, ref UpdateStatus) == true)
                {
                    AddAuditTrail("Success : Leave balance updated");

                    Success("Leave balance updated successfully");
                }
                else
                {
                    AddAuditTrail(UpdateStatus);

                    Error(UpdateStatus);
                }

                return RedirectToAction("LeaveBalanceIndex");
            }
            catch (System.Exception ex)
            {
                PopulateDropdownEdit();

                AddAuditTrail("Error : Leave balance not updated due to " + ex.Message);

                Error("Leave balance not updated");

                return View(NewLeaveBalance);
            }
        }

        /// <summary>
        /// Common function to validate the data for edit or create
        /// Added by Rajas on 24 FEB 2017
        /// </summary>
        /// Updated by Rajas on 29 JULY 2017
        private bool UpdateLeaveBalanceData(LeaveBalanceModel NewLeaveBalance, bool IsEdit, ref string UpdateStatus)
        {
            bool ReturnStatus = false;

            try
            {
                WetosDB.LeaveBalance LeaveBalanceTblObj = WetosDB.LeaveBalances.Where(a => a.LeaveBalanceId == NewLeaveBalance.LeaveBalanceId).FirstOrDefault();
                // || a.EmployeeId == NewLeaveBalance.EmployeeId || a.LeaveType == NewLeaveBalance.LeaveType).FirstOrDefault();

                // Added by Rajas on 31 JULY 2017 
                WetosDB.LeaveBalance IsLeaveTypeAvailable = WetosDB.LeaveBalances.Where(a => a.LeaveType == NewLeaveBalance.LeaveType && a.EmployeeId == NewLeaveBalance.EmployeeId).FirstOrDefault();

                // ADDED BY RAJAS ON 29 JULY 2017 START
                bool IsNew = false;

                // IS OBJECT PRESET
                if (LeaveBalanceTblObj != null)  // Added by Rajas on 2 JUNE 2017
                {
                    if (IsEdit == false)  // CREATE            
                    {
                        UpdateStatus = "Leave Balance entry already available."; //WetosEmployeeController.GetErrorMessage(1);

                        //AddAuditTrail("Error in Department update : " + UpdateStatus);
                        return ReturnStatus;
                    }
                }
                else
                {
                    if (IsLeaveTypeAvailable != null)
                    {
                        UpdateStatus = "Leave balance entry already available for selected leave type.";

                        return ReturnStatus;
                    }
                    else
                    {
                        if (IsEdit == false) // CREATE    
                        {
                            LeaveBalanceTblObj = new WetosDB.LeaveBalance();
                            IsNew = true;
                        }
                        else // EDIT    
                        {
                            UpdateStatus = "Error in updating Leave balance entry."; // WetosEmployeeController.GetErrorMessage(1); 
                            //AddAuditTrail("Error in Department update : " + UpdateStatus);
                            return ReturnStatus;
                        }
                    }
                }
                // ADDED BY RAJAS ON 29 JULY 2017 END

                string LeaveType = string.Empty;

                // To get leave code as leave type
                LeaveType = WetosDB.LeaveMasters.Where(a => a.LeaveCode == NewLeaveBalance.LeaveType && a.Company.CompanyId == NewLeaveBalance.CompanyId).Select(a => a.LeaveCode).FirstOrDefault();

                if (LeaveType == null)
                {
                    UpdateStatus = "Inconsistent data detected!! Please verify";
                }
                else
                {
                    LeaveBalanceTblObj.LeaveType = LeaveType;
                }
                // Added by Rajas on 24 MARCH 2017 End

                LeaveBalanceTblObj.CompanyId = NewLeaveBalance.CompanyId;

                LeaveBalanceTblObj.PreviousBalance = NewLeaveBalance.PreviousBalance;

                LeaveBalanceTblObj.LeaveUsed = NewLeaveBalance.LeaveUsed;

                LeaveBalanceTblObj.CurrentBalance = NewLeaveBalance.CurrentBalance;

                LeaveBalanceTblObj.BranchId = NewLeaveBalance.BranchId;

                LeaveBalanceTblObj.EmployeeId = NewLeaveBalance.EmployeeId;

                // Add new table object 
                if (IsNew)
                {
                    WetosDB.LeaveBalances.AddObject(LeaveBalanceTblObj);
                }

                WetosDB.SaveChanges();

                return ReturnStatus = true;
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                UpdateStatus = "Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);

                return ReturnStatus;
            }
        }


        /// <summary>
        /// Added by Rajas on 7 FEB 2017
        /// </summary>
        private void PopulateDropdown()
        {
            // Updated by Rajas on 6 MAY 2017 to get data which is not MarkedAsDelete START


            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyObj = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, CompanyName = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.CompanyList = new SelectList(CompanyObj, " CompanyId", "CompanyName").ToList();


            var BranchObj = new List<Branch>(); //WetosDB.Branches.Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();

            ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();


            var Department = new List<Department>(); //WetosDB.Departments.Select(a => new { DepartmentId = a.DepartmentId, DepartmentName = a.DepartmentName }).ToList();

            ViewBag.DepartmentList = new SelectList(Department, "DepartmentId", "DepartmentName").ToList();


            var EmployeeType = WetosDB.EmployeeTypes.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { EmployeeTypeId = a.EmployeeTypeId, EmployeeTypeName = a.EmployeeTypeName }).ToList();

            ViewBag.EmployeeTypeNameList = new SelectList(EmployeeType, "EmployeeTypeId", "EmployeeTypeName").ToList();


            var Location = WetosDB.Locations.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { LocationId = a.LocationId, LocationName = a.LocationName }).ToList();

            ViewBag.LocatioList = new SelectList(Location, "LocationId", "LocationName").ToList();


            var Designation = WetosDB.Designations.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { DesignationId = a.DesignationId, DesignationName = a.DesignationName }).ToList();

            ViewBag.DesignationList = new SelectList(Designation, "DesignationId", "DesignationName").ToList();

            //var RoleType = WetosDB.RoleTypes.Select(a => new { RoleTypeId = a.RoleId, RoleTypeName = a.RoleName }).ToList();
            //ViewBag.RoleTypeList = new SelectList(RoleType, "RoleTypeId", "RoleTypeName").ToList();

            // Above lines commented nd below lines added by Rajas on 7 FEB 2017 for assigning role dropdown from RoleDef table


            var RoleType = WetosDB.RoleDefs.Select(a => new { RoleTypeId = a.RoleId, RoleTypeName = a.RoleName }).ToList();

            ViewBag.RoleTypeList = new SelectList(RoleType, "RoleTypeId", "RoleTypeName").ToList();


            // Updated by Rajas on 7 FEB 2017 replaced a.EmployeeId with a.EmployeeCode + " | " + a.FirstName + " " + a.LastName
            DateTime Leavingdate = Convert.ToDateTime("01/01/1900");  // Added by Rajas on 9 MARCH 2017

            var EmployeeObj = new List<Employee>(); //WetosDB.Employees.Where(a => a.Leavingdate == Leavingdate).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " | " + a.FirstName + " " + a.LastName }).ToList();

            ViewBag.EmployeeList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();


            // Added by Rajas on 24 FEB 2017 START
            var FinYear = WetosDB.FinancialYears.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { FinancialId = a.FinancialYearId, FinancialName = a.FinancialName }).ToList();

            ViewBag.FinYearList = new SelectList(FinYear, "FinancialId", "FinancialName").ToList();


            var Leaves = new List<LeaveMaster>(); //WetosDB.LeaveMasters.Select(a => new { LeaveId = a.LeaveId, LeaveType = a.LeaveCode }).ToList();

            ViewBag.LeaveTypeList = new SelectList(Leaves, "LeaveId", "LeaveType").ToList();
            // END
        }

        /// <summary>
        /// Added by Rajas on 27 FEB 2017
        /// </summary>
        private void PopulateDropdownEdit()
        {
            // Updated by Rajas on 6 MAY 2017 to get data which is not MarkedAsDelete START

            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyObj = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, CompanyName = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion
            ViewBag.CompanyList = new SelectList(CompanyObj, " CompanyId", "CompanyName").ToList();


            #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            //var BranchObj = WetosDB.Branches.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();
            var BranchObj = WetosDB.SP_GetBranchList(EmployeeId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();


            var Department = WetosDB.Departments.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { DepartmentId = a.DepartmentId, DepartmentName = a.DepartmentCode + " = " + a.DepartmentName }).ToList();//ADDED DEPARTMENT CODE BY SHRADDHA ON 15 FEB 2018 

            ViewBag.DepartmentList = new SelectList(Department, "DepartmentId", "DepartmentName").ToList();


            var EmployeeType = WetosDB.EmployeeTypes.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { EmployeeTypeId = a.EmployeeTypeId, EmployeeTypeName = a.EmployeeTypeName }).ToList();

            ViewBag.EmployeeTypeNameList = new SelectList(EmployeeType, "EmployeeTypeId", "EmployeeTypeName").ToList();


            var Location = WetosDB.Locations.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { LocationId = a.LocationId, LocationName = a.LocationName }).ToList();

            ViewBag.LocatioList = new SelectList(Location, "LocationId", "LocationName").ToList();


            var Designation = WetosDB.Designations.Where(a => a.MarkedAsDelete == null || a.MarkedAsDelete == 0).Select(a => new { DesignationId = a.DesignationId, DesignationName = a.DesignationName }).ToList();

            ViewBag.DesignationList = new SelectList(Designation, "DesignationId", "DesignationName").ToList();
            // Updated by Rajas on 6 MAY 2017 to get data which is not MarkedAsDelete END

            //var RoleType = WetosDB.RoleTypes.Select(a => new { RoleTypeId = a.RoleId, RoleTypeName = a.RoleName }).ToList();
            //ViewBag.RoleTypeList = new SelectList(RoleType, "RoleTypeId", "RoleTypeName").ToList();

            // Above lines commented nd below lines added by Rajas on 7 FEB 2017 for assigning role dropdown from RoleDef table


            var RoleType = WetosDB.RoleDefs.Select(a => new { RoleTypeId = a.RoleId, RoleTypeName = a.RoleName }).ToList();

            ViewBag.RoleTypeList = new SelectList(RoleType, "RoleTypeId", "RoleTypeName").ToList();


            // Updated by Rajas on 7 FEB 2017 replaced a.EmployeeId with a.EmployeeCode + " | " + a.FirstName + " " + a.LastName
            DateTime Leavingdate = Convert.ToDateTime("01/01/1900");  // Added by Rajas on 9 MARCH 2017


            #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
            //var EmployeeObj = WetosDB.Employees.Where(a => a.Leavingdate == Leavingdate).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " - " + a.FirstName + " " + a.LastName }).ToList();
            //   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
            var EmployeeObj = WetosDB.SP_VwActiveEmployee(EmployeeId).Where(a => a.Leavingdate == Leavingdate).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " - " + a.FirstName + " " + a.LastName }).ToList();
            #endregion
            ViewBag.EmployeeList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();
        }



        /// <summary>
        /// HttpGet updated by Rajas on 7 FEB 2017
        /// </summary>
        /// <returns></returns>

        [HttpGet]
        public ActionResult UserRightsCreate()
        {
            UserModel UserModelObj = new UserModel();

            try
            {
                PopulateDropdown();

                //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE START

                var EmployeeObj = WetosDB.SP_GetEmployeeListNotExistInLoginTable()
                    .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EMPLOYEECODE + " - " + a.FIRSTNAME + " " + a.LASTNAME }).ToList();

                ViewBag.EmployeeNotInLoginList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();

                //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE END

                return View(UserModelObj);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error message due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View(UserModelObj);
            }
        }

        /// <summary>
        /// HttpPost function updated by Rajas on 7 FEB 2017
        /// </summary>
        /// <param name="NewUser"></param>
        /// <param name="collection"></param>
        /// <returns></returns>
        /// Updated by Rajas on 31 JULY 2017
        [HttpPost]
        public ActionResult UserRightsCreate(UserModel NewUser, FormCollection collection)
        {
            try
            {
                if (NewUser.RoleTypeId == 0)
                {
                    Error("Please select Role of Employee");

                    PopulateDropdown();

                    //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE START

                    var EmployeeObj = WetosDB.SP_GetEmployeeListNotExistInLoginTable()
                        .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EMPLOYEECODE + " - " + a.FIRSTNAME + " " + a.LASTNAME }).ToList();

                    ViewBag.EmployeeNotInLoginList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();

                    //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE END

                    return View();
                }

                // Added by Rajas on 31 JULY 2017
                User IsUserNameAvailable = WetosDB.Users.Where(a => a.UserName == NewUser.UserName).FirstOrDefault();

                // Added by Rajas on 20 JULy 2017 START
                // Verify password
                if (NewUser.Password != NewUser.Password2)
                {
                    Error("Password doesn't match. Please verify!");

                    PopulateDropdown();

                    //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE START

                    var EmployeeObj = WetosDB.SP_GetEmployeeListNotExistInLoginTable()
                        .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EMPLOYEECODE + " - " + a.FIRSTNAME + " " + a.LASTNAME }).ToList();

                    ViewBag.EmployeeNotInLoginList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();

                    //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE END

                    return View();
                }
                // Added by Rajas on 20 JULy 2017 END

                // Added by Rajas on 31 JULY 2017 START
                if (IsUserNameAvailable != null)
                {
                    Error("User name already available!");

                    PopulateDropdown();

                    //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE START

                    var EmployeeObj = WetosDB.SP_GetEmployeeListNotExistInLoginTable()
                        .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EMPLOYEECODE + " - " + a.FIRSTNAME + " " + a.LASTNAME }).ToList();

                    ViewBag.EmployeeNotInLoginList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();

                    //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE END

                    return View();
                }
                // Added by Rajas on 31 JULY 2017 END

                UpdateUserRightsData(NewUser);

                // ADDED BY RAJAS FOR AuditLog ON 7 FEB 2017
                AddAuditTrail("Success - Add new user is added");


                //ADDED CODE FOR SUCCESS MESSAGE BY RAJAS ON 7 FEB 2017
                Success("User : New user added Successfully");

                return RedirectToAction("UserRightsUserList");
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Exception - User addition failed due to " + ex.Message);

                Error("Error - " + ex.Message);

                PopulateDropdown();

                //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE START

                var EmployeeObj = WetosDB.SP_GetEmployeeListNotExistInLoginTable()
                    .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EMPLOYEECODE + " - " + a.FIRSTNAME + " " + a.LASTNAME }).ToList();

                ViewBag.EmployeeNotInLoginList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();

                //CODE AND SP SP_GetEmployeeListNotExistInLoginTable() ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET THE LIST OF EMPLOYEES WHO ARE NOT EXISTS IN LOGIN TABLE END


                return View();
            }
        }


        /// <summary>
        /// CODE ADDED BY SHRADDHA ON 14 MARCH 2017 TO GET ROLE LIST BASED ON EMPLOYEE SELECTION
        /// </summary>
        /// <param name="Companyid"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GetRole(string EmployeeId)
        {
            int SelEmployeeId = 0;
            if (!string.IsNullOrEmpty(EmployeeId))
            {
                if (EmployeeId.ToUpper() != "NULL")
                {
                    SelEmployeeId = Convert.ToInt32(EmployeeId);
                }
            }

            int UserRoleId = WetosDB.UserRoles.Where(a => a.EmployeeId == SelEmployeeId).Select(a => a.RoleTypeId).FirstOrDefault();

            var BranchList = WetosDB.RoleDefs.Where(a => a.RoleId == UserRoleId).Select(a => new { RoleId = a.RoleId, RoleName = a.RoleName }).ToList();

            return Json(BranchList);
        }

        /// <summary>
        /// Update user rights data and validate
        /// Added by Rajas on 7 FEB 2017
        /// CODE MODIFIED BY SHRADDHA ON 10 MARCH 2017
        /// </summary>
        /// <param name="NewUser"></param>
        /// <returns></returns>
        private bool UpdateUserRightsData(UserModel NewUser)
        {
            // ADDED BY SHALAKA ON 29TH NOV 2017 FOR PASSWORD ENCRYPTION.
            Cryptography objcrypt = new Cryptography();

            bool ReturnStatus = false;

            WetosDB.User UserTblObj = WetosDB.Users.Where(a => a.UserId == NewUser.UserId || a.EmployeeId == NewUser.EmployeeId).FirstOrDefault();

            WetosDB.Employee EmployeeTblObj = WetosDB.Employees.Where(a => a.EmployeeId == NewUser.EmployeeId).FirstOrDefault();

            bool IsNew = false;

            if (UserTblObj == null)
            {
                UserTblObj = new WetosDB.User();
                IsNew = true;
            }
            else
            {
                if (UserTblObj.RoleTypeId != NewUser.RoleTypeId)
                {
                    Error("Please select Correct RoleType for Employee" + EmployeeTblObj.FirstName + " " + EmployeeTblObj.LastName);
                    ReturnStatus = false;
                    return ReturnStatus;
                }
            }
            // EmployeeObj created for saving or updating the other employee related details which are to be updated in users table

            // New Leave table object

            // Not null fields
            UserTblObj.UserName = NewUser.UserName;

            UserTblObj.EmployeeId = NewUser.EmployeeId;

            UserTblObj.RoleTypeId = NewUser.RoleTypeId;

            UserTblObj.MenuId = "1"; //NewUser.MenuId;

            UserTblObj.BranchId = EmployeeTblObj.BranchId;

            UserTblObj.CompanyId = EmployeeTblObj.CompanyId;

            UserTblObj.DepartmentId = EmployeeTblObj.DepartmentId;

            UserTblObj.DesignationId = EmployeeTblObj.DesignationId;

            // Allow null fields
            //UserTblObj.Password = NewUser.Password; // COMMENTED BY SHALAKA ON 29TH NOV 2017 TO SAVE PASSWORD IN ENCRYPTED FORMAT

            //BUG NO : 1004 START
            // UPDATED BY SHALAKA ON 29TH NOV 2017 FOR PASSWORD ENCRYPTION.
            UserTblObj.Password = objcrypt.EncryptPassword(NewUser.Password.Trim());
            //BUG NO. : 1004 (RESOLVED) END

            UserTblObj.Status = "A"; //NewUser.Status;

            UserTblObj.LocationList = NewUser.LocationList;

            UserTblObj.CompanyList = NewUser.CompanyList;

            UserTblObj.BranchList = NewUser.BranchList;

            UserTblObj.DepartmentList = NewUser.DepartmentList;

            UserTblObj.MastersRights = NewUser.MastersRights;

            UserTblObj.AttendanceRights = NewUser.AttendanceRights;

            UserTblObj.ApplicationsRights = NewUser.ApplicationsRights;

            UserTblObj.SanctionsRights = NewUser.SanctionsRights;

            UserTblObj.ReportsRights = NewUser.ReportsRights;

            UserTblObj.AdministrationRights = NewUser.AdministrationRights;

            UserTblObj.UpdatesRights = NewUser.UpdatesRights;

            UserTblObj.DivisionList = NewUser.DivisionList;

            // Add new table object
            if (IsNew)
            {
                WetosDB.Users.AddObject(UserTblObj);
            }

            WetosDB.SaveChanges();

            return ReturnStatus;

        }

        public ActionResult UserRights()
        {
            return View();
        }

        /// <summary>
        /// ADDED BY MOUSAMI ON 13 SEPT 2016
        /// CODE UPDATED BY RAJAS ON 9 MARCH 2017
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult LockUnlock()
        {
            try
            {
                LockUnlockData LockUnlockDataObj = new LockUnlockData();
                LockUnlockDataObj.FromDate = DateTime.Now;
                LockUnlockDataObj.ToDate = LockUnlockDataObj.FromDate;

                PopulateDropdown();

                return View(LockUnlockDataObj);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View();
            }
        }

        /// <summary>
        /// POST
        /// LockUnlockData
        /// Added by Rajas on 9 MARCH 2017
        /// </summary>
        /// <param name="LockUnlockDataObj"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult LockUnlock(LockUnlockData LockUnlockDataObj)
        {
            try
            {
                //
                if (ModelState.IsValid)
                {
                    //WetosDB.usp_UpdateDailyTrans_Lock(LockUnlockDataObj.RadioButtonSelected, LockUnlockDataObj.BranchId, LockUnlockDataObj.CompanyId
                    // , LockUnlockDataObj.FromDate, LockUnlockDataObj.ToDate, LockUnlockDataObj.EmployeeId);

                    string LockStatus = LockUnlockDataObj.RadioButtonSelected.ToUpper();

                    List<DailyTransaction> DataToLockList = WetosDB.DailyTransactions.Where(a => a.TranDate >= LockUnlockDataObj.FromDate && a.TranDate <= LockUnlockDataObj.ToDate).ToList();

                    foreach (DailyTransaction DataToLock in DataToLockList)
                    {
                        DataToLock.Lock = LockStatus;
                        WetosDB.SaveChanges();
                    }

                    //
                    if (DataToLockList.Count() > 0)
                    {
                        if (LockStatus == "Y")
                        {
                            Success("Data is locked");
                        }
                        else
                        {
                            Success("Data is unlocked");
                        }
                    }
                    else
                    {
                        Information("No Attendance Data to lock.");
                    }

                    //return RedirectToAction("Dashboard", "EmployeeDashboard");

                    PopulateDropdownEdit();

                    return View(LockUnlockDataObj);
                }
                else
                {
                    return View(LockUnlockDataObj);
                }
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error - Data lock/unlock failed due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error("Error - Lock/Unlock data failed");

                PopulateDropdown();

                return View(LockUnlockDataObj);
            }
        }

        public ActionResult BulkUsersList()
        {
            //List<User> BulkUserList = WetosDB.Users.ToList();
            //return View(BulkUserList);
            //List<Company> CompanyList = WetosDB.Companies.ToList();
            //return View(CompanyList);
            //List<Branch> BranchList = WetosDB.Branches.ToList();
            //return View(BranchList);
            //List<Department> DepartmentList = WetosDB.Departments.ToList();
            //return View(DepartmentList);
            return View();

        }

        public ActionResult BulkUsers()
        {
            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyObj = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, CompanyName = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.CompanyList = new SelectList(CompanyObj, " CompanyId", "CompanyName").ToList();

            #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            //var BranchObj = WetosDB.Branches.Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();
            var BranchObj = WetosDB.SP_GetBranchList(EmployeeId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();

            var DepartmentObj = WetosDB.Departments.Select(a => new { DepartmentId = a.DepartmentId, DepartmentName = a.DepartmentCode + " - " + a.DepartmentName }).ToList();//ADDED DEPARTMENT CODE BY SHRADDHA ON 15 FEB 2018 

            ViewBag.DepartmentList = new SelectList(DepartmentObj, "DepartmentId", "DepartmentName").ToList();

            return View();

        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult SelectEmployeeForChangePassword()
        {
            try
            {
                // UPDATED BY RAJAS ON 22 MARCH 2017 FOR ACTIVE EMPLOYEES AND CODE ALONG WITH NAME IN DROP DOWN
                var sel_messageto = WetosDB.VwActiveEmployees
                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 START
                    //.Select(a => new { id = a.EmployeeId, name = a.EmployeeCode + " | " + a.FirstName + " " + a.MiddleName + " " + a.LastName }).ToList();
                    .Select(a => new { id = a.EmployeeId, name = a.EmployeeCode + " | " + a.FirstName + " " + a.LastName }).ToList();
                //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 END
                ViewBag.sel_messageto = new SelectList(sel_messageto, "id", "name").ToList();

                return View();
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error("Error Please try again");

                return View();
            }
        }

        ///
        [HttpPost]
        public ActionResult BulkUsers(User UserObj, FormCollection collection)
        {
            try
            {

                WetosDB.Users.AddObject(UserObj);

                // SAVE DATA
                WetosDB.SaveChanges();

                //ADDED BY RAJAS ON 27 DEC 2016
                AddAuditTrail("");

                return RedirectToAction("BulkUsersList");
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                //ex.Message
                return View();


            }
        }



        /// <summary>
        /// Json return for to get Employeegroup dropdown list on basis of branch selection
        /// Added by Rajas on 27 DEC 2016
        /// </summary>
        /// <returns></returns>
        public JsonResult GetEmployeeGroup(string Branchid, string Companyid)
        {
            int SelBranchId = 0;
            if (!string.IsNullOrEmpty(Branchid))
            {
                if (Branchid.ToUpper() != "NULL")
                {
                    SelBranchId = Convert.ToInt32(Branchid);
                }
            }

            int SelCompanyId = 0;
            if (!string.IsNullOrEmpty(Companyid))
            {
                if (Companyid.ToUpper() != "NULL")
                {
                    SelCompanyId = Convert.ToInt32(Companyid);
                }
            }

            // Updated by Rajas on 30 MAY 2017
            var EmployeeGroupList = WetosDB.EmployeeGroups.Where(a => a.Branch.BranchId == SelBranchId && a.Company.CompanyId == SelCompanyId
                && (a.MarkedAsDelete == null || a.MarkedAsDelete == 0)).Select(a => new { EmployeeGroupId = a.EmployeeGroupId, EmployeeGroupName = a.EmployeeGroupName }).ToList();

            return Json(EmployeeGroupList);
        }

        /// <summary>
        /// GET CommonSettings
        /// </summary>
        /// <returns></returns>
        /// Updated by Rajas on 30 MAY 2017
        public ActionResult CommonSettings()
        {
            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyObj = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, CompanyName = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion


            ViewBag.CompanyList = new SelectList(CompanyObj, " CompanyId", "CompanyName").ToList();


            #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            //var BranchObj = WetosDB.Branches.Where(a => a.MarkedAsDelete == 0).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();
            var BranchObj = WetosDB.SP_GetBranchList(EmployeeId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();

            var EmployeeGroupObj = WetosDB.EmployeeGroups.Where(a => a.MarkedAsDelete == 0).Select(a => new { EmployeeGroupId = a.EmployeeGroupId, GroupName = a.EmployeeGroupName }).ToList();

            ViewBag.EmployeeGroupList = new SelectList(EmployeeGroupObj, "EmployeeGroupId", "GroupName").ToList();

            return View();
        }

        /// <summary>
        /// Partial view for common setting
        /// </summary>
        /// <returns></returns>
        public ActionResult GetRulesForCommonSettings(int CompanyId, int BranchId, int EmployeeGroupId)
        {
            try
            {
                List<SP_GetAssignRuleData_Result> GetAssignRuleDataList = WetosDB.SP_GetAssignRuleData(CompanyId, BranchId, EmployeeGroupId).ToList();
                ViewBag.CompanyId = CompanyId;
                ViewBag.BranchId = BranchId;
                ViewBag.EmployeeGroupId = EmployeeGroupId;
                return PartialView(GetAssignRuleDataList);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View();
            }
        }

        // SET RULE ENGINE
        /// <summary>
        /// Save Rule Value
        /// </summary>
        /// <param name="RuleFormula"></param>
        /// <param name="RuleId"></param>
        /// <param name="EmployeeGroup"></param>
        /// <param name="Company"></param>
        /// <param name="Branch"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult SaveRuleValue(string RuleFormula, int RuleId, int EmployeeGroup, int Company, int Branch)
        {
            // ATTENDANCE BASIC
            if (RuleId == 33)
            {
                int AttendanceBase = Convert.ToInt32(RuleFormula);

                if (AttendanceBase > 4)
                {
                    return Json("Error", JsonRequestBehavior.AllowGet);
                }

                // AUTO
                if (AttendanceBase == 4)
                {
                    RuleTransaction RuleTransactionObj30 = WetosDB.RuleTransactions.Where(a => a.CompanyId == Company
                        && a.BranchId == Branch && a.EmployeeGroupId == EmployeeGroup && a.RuleId == 30).FirstOrDefault();
                    if (RuleTransactionObj30 != null)
                    {
                        RuleTransactionObj30.Formula = "TRUE";
                        WetosDB.SaveChanges();
                    }

                    RuleTransaction RuleTransactionObj27 = WetosDB.RuleTransactions.Where(a => a.CompanyId == Company
                        && a.BranchId == Branch && a.EmployeeGroupId == EmployeeGroup && a.RuleId == 27).FirstOrDefault();
                    if (RuleTransactionObj27 != null)
                    {
                        RuleTransactionObj27.Formula = "FALSE";
                        WetosDB.SaveChanges();
                    }
                }
                else if (AttendanceBase == 3) // FLEXI SHIFT
                {
                    RuleTransaction RuleTransactionObj30 = WetosDB.RuleTransactions.Where(a => a.CompanyId == Company
                         && a.BranchId == Branch && a.EmployeeGroupId == EmployeeGroup && a.RuleId == 30).FirstOrDefault();
                    if (RuleTransactionObj30 != null)
                    {
                        RuleTransactionObj30.Formula = "FALSE";
                        WetosDB.SaveChanges();
                    }

                    RuleTransaction RuleTransactionObj27 = WetosDB.RuleTransactions.Where(a => a.CompanyId == Company
                        && a.BranchId == Branch && a.EmployeeGroupId == EmployeeGroup && a.RuleId == 27).FirstOrDefault();
                    if (RuleTransactionObj27 != null)
                    {
                        RuleTransactionObj27.Formula = "TRUE";
                        WetosDB.SaveChanges();
                    }
                }
                else
                {
                    RuleTransaction RuleTransactionObj30 = WetosDB.RuleTransactions.Where(a => a.CompanyId == Company
                         && a.BranchId == Branch && a.EmployeeGroupId == EmployeeGroup && a.RuleId == 30).FirstOrDefault();
                    if (RuleTransactionObj30 != null)
                    {
                        RuleTransactionObj30.Formula = "FALSE";
                        WetosDB.SaveChanges();
                    }

                    RuleTransaction RuleTransactionObj27 = WetosDB.RuleTransactions.Where(a => a.CompanyId == Company
                        && a.BranchId == Branch && a.EmployeeGroupId == EmployeeGroup && a.RuleId == 27).FirstOrDefault();
                    if (RuleTransactionObj27 != null)
                    {
                        RuleTransactionObj27.Formula = "FALSE";
                        WetosDB.SaveChanges();
                    }
                }
            }

            RuleTransaction RuleTransactionObj = WetosDB.RuleTransactions.Where(a => a.CompanyId == Company && a.BranchId == Branch && a.EmployeeGroupId == EmployeeGroup
                && a.RuleId == RuleId).FirstOrDefault();
            if (RuleTransactionObj != null)
            {
                RuleTransactionObj.Formula = RuleFormula;
                WetosDB.SaveChanges();
            }
            return Json(JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// For creating common setting and leave rules through administration
        /// </summary>
        /// <param name="CommonSettingModel"></param>
        /// Try catch added by Rajas on 21 FEB 2017
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetRulesForCommonSettings(CommonSettingModel CommonSettingModelObj)
        {
            try
            {
                RuleTransaction RuleTransactionObj = null;

                List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.CompanyId == CommonSettingModelObj.CompanyId
                    && a.BranchId == CommonSettingModelObj.BranchId && a.EmployeeGroupId == CommonSettingModelObj.EmployeeGroupId).ToList();


                if (RuleTransactionList.Count > 0)
                {
                    foreach (var RuleTransactionItem in RuleTransactionList)
                    {
                        switch (RuleTransactionItem.RuleId)
                        {
                            //1 - 10
                            case 1:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.SearchBeforeHrs;
                                WetosDB.SaveChanges();
                                break;
                            case 2:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.SearchAfterHrs;
                                WetosDB.SaveChanges();
                                break;
                            case 3:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.GraceEarlyTime;
                                WetosDB.SaveChanges();
                                break;
                            case 4:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.GraceLateTime;
                                WetosDB.SaveChanges();
                                break;
                            case 5:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.LateAllowLimit;
                                WetosDB.SaveChanges();
                                break;
                            case 6:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.EarlyAllowLimit;
                                WetosDB.SaveChanges();
                                break;
                            case 7:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.HalfDayLimit;
                                WetosDB.SaveChanges();
                                break;
                            case 8:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.MinOTLimit;
                                WetosDB.SaveChanges();
                                break;
                            case 10:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.MinLimitForFullDayCompoff;
                                WetosDB.SaveChanges();
                                break;
                            //11 -20
                            case 11:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.MinLimitForHalfDayCompoff;
                                WetosDB.SaveChanges();
                                break;
                            case 17:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.NoDaysDeduct;
                                WetosDB.SaveChanges();
                                break;
                            case 18:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.TimeBetweenTwoSwaps;
                                WetosDB.SaveChanges();
                                break;
                            case 20:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.LateCountInMonth;
                                WetosDB.SaveChanges();
                                break;
                            //21-30
                            case 21:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.FullDayLimit;
                                WetosDB.SaveChanges();
                                break;
                            case 22:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.CheckDays;
                                WetosDB.SaveChanges();
                                break;
                            case 25:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.CheckMonthStart;
                                WetosDB.SaveChanges();
                                break;
                            case 27:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();

                                RuleTransactionObj.Formula = CommonSettingModelObj.GradeForCompoffAllowed.ToString();
                                WetosDB.SaveChanges();
                                //= RuleTransactionObj == null ? 0 : (RuleTransactionObj.Formula == "TRUE" ? 1 : 0);
                                //Convert.ToInt32(RuleTransactionObj.Formula);
                                break;
                            case 28:
                                RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == RuleTransactionItem.RuleId).FirstOrDefault();
                                RuleTransactionObj.Formula = CommonSettingModelObj.OTStartAfter;
                                WetosDB.SaveChanges();
                                break;
                        }
                    }

                }
                else if (RuleTransactionList.Count == 0)
                {
                    RuleTransaction RuleTransactionObjForCreate = new RuleTransaction();

                    // Updated by Rajas on 30 MAY 2017 START
                    // GraceEarlyTime
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.GraceEarlyTime == null ? "0" : CommonSettingModelObj.GraceEarlyTime;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.GraceEarlyTimeId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // GraceLateTime
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.GraceLateTime == null ? "0" : CommonSettingModelObj.GraceLateTime;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.GraceLateTimeId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // LateAllowLimit
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.LateAllowLimit == null ? "0" : CommonSettingModelObj.LateAllowLimit;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.LateAllowLimitId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // EarlyAllowLimit
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.EarlyAllowLimit == null ? "0" : CommonSettingModelObj.EarlyAllowLimit;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.EarlyAllowLimitId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // MinLimitForHalfDayCompoff
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.MinLimitForHalfDayCompoff == null ? "0" : CommonSettingModelObj.MinLimitForHalfDayCompoff;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.MinLimitForHalfDayCompoffId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // MinLimitForFullDayCompoff
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.MinLimitForFullDayCompoff == null ? "0" : CommonSettingModelObj.MinLimitForFullDayCompoff;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.MinLimitForFullDayCompoffId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // SearchAfterHrs
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.SearchAfterHrs == null ? "0" : CommonSettingModelObj.SearchAfterHrs;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.SearchAfterHrsId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // SearchBeforeHrs
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.SearchBeforeHrs == null ? "0" : CommonSettingModelObj.SearchBeforeHrs;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.SearchBeforeHrsId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // TimeBetweenTwoSwaps
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.TimeBetweenTwoSwaps == null ? "0" : CommonSettingModelObj.TimeBetweenTwoSwaps;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.TimeBetweenTwoSwapsId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // HalfDayLimit
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.MinLimitForFullDayCompoff == null ? "0" : CommonSettingModelObj.HalfDayLimit;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.HalfDayLimitId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // FullDayLimit
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.FullDayLimit == null ? "0" : CommonSettingModelObj.FullDayLimit;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.FullDayLimitId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // OTStartAfter
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.OTStartAfter == null ? "0" : CommonSettingModelObj.OTStartAfter;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.OTStartAfterId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // MinOTLimit
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.MinOTLimit == null ? "0" : CommonSettingModelObj.MinOTLimit;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.MinOTLimitId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // LateCountInMonth
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.LateCountInMonth == null ? "0" : CommonSettingModelObj.LateCountInMonth;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.LateCountInMonthId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // NoDaysDeduct
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.NoDaysDeduct == null ? "0" : CommonSettingModelObj.NoDaysDeduct;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.NoDaysDeductId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // DeductFrmAttendance
                    RuleTransactionObjForCreate = new RuleTransaction();

                    // MODIFIED BY MSJ ON 23 JAN 2020
                    RuleTransactionObjForCreate.Formula = Convert.ToString(CommonSettingModelObj.DeductFrmAttendance); //CommonSettingModelObj.DeductFrmAttendance == null ? "0" : Convert.ToString(CommonSettingModelObj.DeductFrmAttendance);

                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.DeductFrmAttendanceId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // GradeForWhichLateDeductNotDone
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.GradeForWhichLateDeductNotDone == null ? "0" : CommonSettingModelObj.GradeForWhichLateDeductNotDone;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.GradeForWhichLateDeductNotDoneId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // GradeForOTAllowed
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.GradeForOTAllowed == null ? "0" : CommonSettingModelObj.GradeForOTAllowed;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.GradeForOTAllowedId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // CheckDays
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.CheckDays == null ? "0" : CommonSettingModelObj.CheckDays;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.CheckDaysId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // CheckMonthStart
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = CommonSettingModelObj.CheckMonthStart == null ? "0" : CommonSettingModelObj.CheckMonthStart;
                    RuleTransactionObjForCreate.RuleId = CommonSettingModelObj.CheckMonthStartId;
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();

                    // GradeForCompoffAllowed
                    RuleTransactionObjForCreate = new RuleTransaction();
                    RuleTransactionObjForCreate.Formula = Convert.ToString(CommonSettingModelObj.GradeForCompoffAllowed);
                    RuleTransactionObjForCreate.RuleId = Convert.ToInt32(CommonSettingModelObj.GradeForCompoffAllowedId);
                    RuleTransactionObjForCreate.CompanyId = CommonSettingModelObj.CompanyId;
                    RuleTransactionObjForCreate.BranchId = CommonSettingModelObj.BranchId;
                    RuleTransactionObjForCreate.EmployeeGroupId = CommonSettingModelObj.EmployeeGroupId;
                    RuleTransactionObjForCreate.HeadCode = "BASIC";
                    RuleTransactionObjForCreate.Active = "1";
                    WetosDB.RuleTransactions.AddObject(RuleTransactionObjForCreate);
                    WetosDB.SaveChanges();
                    // Updated by Rajas on 30 MAY 2017 END

                }

                //return View(CommonSettingModelObj);

                // Added by Rajas on 21 FEB 2017 START
                AddAuditTrail("Rules updated successfully");

                Success("Rule updated successfully");

                return RedirectToAction("CommonSettings");
                // Added by Rajas on 21 FEB 2017 END
            }
            catch (System.Exception ex)
            {
                // Added by Rajas on 21 FEB 2017 START
                AddAuditTrail("Rules not updated due to " + ex.Message);

                Error("Rules not updated");

                return RedirectToAction("CommonSettings");
                // Added by Rajas on 21 FEB 2017 END
            }
        }


        public ActionResult SatuatoryReport()
        {
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyObj = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, CompanyName = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.CompanyList = new SelectList(CompanyObj, " CompanyId", "CompanyName").ToList();

            #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            //var BranchObj = WetosDB.Branches.Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();
            var BranchObj = WetosDB.SP_GetBranchList(EmployeeId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion
            ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();

            return View();
        }

        //-- Added by Shalaka on 17th July 2017 ---Start
        /// <summary>
        ///  to check ConsistentData 
        /// </summary>
        public void ConsistentData()
        {
            string UpdateStatus = string.Empty;
            int ErrorNumber = 0;
            int CompanyListCount = 0;
            int BranchListCount = 0;
            int DepartmentListCount = 0;
            int DesignationListCount = 0;
            int GradeListCount = 0;
            int EmployeeListCount = 0;
            int EmployeeGroupListCount = 0;
            int LeaveMasterListCount = 0;
            int LeaveBalanceListCount = 0;
            int LeaveCreditListCount = 0;
            int UserListCount = 0;
            int ShiftCount = 0;
            int FinancialYearCount = 0;
            int UserRoleCount = 0;

            //CODE ADDED BY SHRADDHA ON 08 FEB 2018
            int RuleEngineDataCount = 0;

            AccountController.IsDataConsistent(WetosDB, ref UpdateStatus, ref ErrorNumber,
                           ref CompanyListCount, ref BranchListCount, ref DepartmentListCount, ref DesignationListCount, ref GradeListCount,
                           ref EmployeeListCount, ref EmployeeGroupListCount, ref LeaveMasterListCount, ref LeaveBalanceListCount, ref LeaveCreditListCount,
                           ref UserListCount, ref ShiftCount, ref FinancialYearCount, ref UserRoleCount, ref RuleEngineDataCount);
            ViewBag.ErrorNumber = ErrorNumber;

            ViewBag.CompanyListCount = CompanyListCount;
            ViewBag.BranchListCount = BranchListCount;
            ViewBag.DepartmentListCount = DepartmentListCount;
            ViewBag.DesignationListCount = DesignationListCount;
            ViewBag.GradeListCount = GradeListCount;
            ViewBag.EmployeeListCount = EmployeeListCount;
            ViewBag.EmployeeGroupListCount = EmployeeGroupListCount;
            ViewBag.LeaveMasterListCount = LeaveMasterListCount;
            ViewBag.LeaveBalanceListCount = LeaveBalanceListCount;
            ViewBag.LeaveCreditListCount = LeaveCreditListCount;
            ViewBag.UserListCount = UserListCount;
            ViewBag.ShiftCount = ShiftCount;
            ViewBag.FinancialYearCount = FinancialYearCount;
            ViewBag.UserRoleCount = UserRoleCount;

            ViewBag.RuleEngineDataCount = RuleEngineDataCount; // CODE ADDED BY SHRADDHA ON 08 FEB 2018
        }
        //-- Added by shalaka on 17th July 2017--- End

        //ADDED BY PUSHKAR ON 19 DEC 2019
        /// <summary>
        /// CODE ADDED BY SHRADDHA ON 18 JAN 2018
        /// MADE GENERIC FUNCTION FOR YEAR VIEWBAG
        /// </summary>
        public void PopulateYearListVB()
        {
            // MODIFIED AND ADDED CODE BY MSJ ON 08 JAN 2018 START
            List<FinancialYear> FYObjList = WetosDB.FinancialYears.ToList();
            List<string> FYStrList = new List<string>();
            foreach (FinancialYear CurrentFYObj in FYObjList)
            {
                if (CurrentFYObj.StartDate.Year != CurrentFYObj.EndDate.Year) // DIFF YEARS
                {
                    FYStrList.Add(CurrentFYObj.StartDate.Year.ToString());
                    FYStrList.Add(CurrentFYObj.EndDate.Year.ToString());
                }
                else
                {
                    FYStrList.Add(CurrentFYObj.StartDate.Year.ToString());
                }
            }

            List<SelectListItem> SelectListItemList = new List<SelectListItem>();
            List<string> FinalFYStrList = FYStrList.Distinct().ToList();
            foreach (string CFYStr in FYStrList)
            {
                SelectListItemList.Add(new SelectListItem { Text = CFYStr, Value = CFYStr });
            }
            var FYListVar = SelectListItemList;
            ViewBag.YearListVB = FYListVar;

            // MODIFIED AND ADDED CODE BY MSJ ON 08 JAN 2018 END
        }


        public ActionResult ImportData()
        {
            ConsistentData();

            return View();
        }

        /// <summary>
        /// CODE FOR IMPORT DATA POST ADDED ON 13 JAN 2017 BY SHRADDHA
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ImportData(HttpPostedFileBase UploadFile, FormCollection FC)
        {
            //ADDED BY SHRADDHA FOR GETTING RADIO BUTTON VALUES ON 15 JAN 2017
            string ImportStatus = string.Empty;

            bool IsSuccess = false; // Added by Rajas on 5 JULY 2017

            string group1 = FC["group1"];
            //string MonthShift = FC["MonthId"];
            //string YearShift = FC["FinancialYearId"];

            if (UploadFile != null && UploadFile.ContentLength > 0)
            {
                try
                {

                    //Added By Shraddha on 09 Nov 2016
                    string Attachment = UploadFile.FileName.ToString();  // Updated by Rajas on 3 MARCH 2017

                    // Check Import_Data folder available in application, if not then add
                    // Added by Rajas on 18 JULY 2017 START
                    bool IsExist = System.IO.Directory.Exists(Server.MapPath("~/User_Data/Import_Data/"));

                    if (!IsExist)
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/User_Data/Import_Data/"));
                    }
                    // Added by Rajas on 18 JULY 2017 END

                    string path = Path.Combine(Server.MapPath("~/User_Data/Import_Data"), Attachment);

                    // Delete existing file if Same file name is available in Import Data folder, then import
                    // Added by Rajas on 4 JULY 2017 START
                    System.IO.DirectoryInfo di = new DirectoryInfo(HttpContext.Server.MapPath("~/User_Data/Import_Data"));

                    
                    foreach (FileInfo FileToDelete in di.GetFiles().Where(a => a.Name == Attachment))
                    {
                        FileToDelete.Delete();
                    }
                    // Added by Rajas on 4 JULY 2017 END

                    WetosDB.Employee objBLEmployee = new WetosDB.Employee();

                    string fileExtension = Path.GetExtension(UploadFile.FileName);

                    if (fileExtension == ".xls" || fileExtension == ".xlsx")
                    {
                        UploadFile.SaveAs(path);
                        //byte[] filename = System.IO.File.ReadAllBytes(path);

                        //ViewBag.Message = "File Uploaded Successfully";

                        //ADDED BY SHRADDHA FOR GETTING RADIO BUTTON VALUES ON 15 JAN 2017 START
                        if (group1 == "Employee_Details")
                        {

                            GetEmployeeExcel(path, "", ref ImportStatus, ref IsSuccess);

                        }
                        else if (group1 == "Leave_Balance")
                        {
                            GetLeaveBalanceExcel(path, "", ref ImportStatus, ref IsSuccess);
                        }
                        //ADDED BY SHRADDHA FOR IMPORT DATA INTO LEAVE CREDIT TABLE
                        else if (group1 == "Leave_Credit")
                        {
                            GetLeaveCreditExcel(path, "", ref ImportStatus, ref IsSuccess);
                        }
                        //ADDED BY SHRADDHA FOR GETTING RADIO BUTTON VALUES ON 15 JAN 2017 END
                        else if (group1 == "Leave_CreditBal")
                        {
                            GetLeaveImportCombined(path, "", ref ImportStatus, ref IsSuccess);
                        }
                        // Added by Rajas on 3 APRIL 2017 for Shift Schedule
                        else if (group1 == "Shift_Schedule")
                        {
                            GetShiftScheduleExcel(path, "", ref ImportStatus);

                        }

                        else if (group1 == "Import_Attendance")
                        {
                            // GetAttendanceExcel(path, "", ref ImportStatus);
                        }

                        else if (group1 == "Test_Attendance")
                        {
                            TestAttendance(path, "", ref ImportStatus);  // 
                        }

                        else if (group1 == "RuleEngineData") //CODE ADDED BY SHRADDHA ON 08 FEB 2018 START
                        {
                            GetRuleEngineData(path, "", ref ImportStatus, ref IsSuccess); //CODE ADDED BY SHRADDHA ON 08 FEB 2018 START
                        }//CODE ADDED BY SHRADDHA ON 08 FEB 2018 START
                        else if (group1 == "FamilyData") // ADDED BY MSJ ON 21 JULY 2018
                        {
                            GetFamilyData(path, "", ref ImportStatus, ref IsSuccess); //CODE ADDED BY SHRADDHA ON 08 FEB 2018 START
                        }
                        else if (group1 == "QualifyData") // ADDED BY MSJ ON 21 JULY 2018
                        {
                            GetQualifyData(path, "", ref ImportStatus, ref IsSuccess); //CODE ADDED BY SHRADDHA ON 08 FEB 2018 START
                        }
                        else if (group1 == "ShiftRoaster") // ADDED BY MSJ ON 21 JULY 2018
                        {
                            GetShiftRoaster(path, "", ref ImportStatus, ref IsSuccess); //CODE ADDED BY SHRADDHA ON 08 FEB 2018 START
                        }

                        WetosDB.SaveChanges();
                    }
                    else
                    {
                        Error("Please upload image in .xls .xlsx, format.");
                        //ModelState.AddModelError("Error", "Please upload image in .jpg, .jpeg, .png format.");
                        ConsistentData();

                        return View();
                    }


                }
                catch (System.Exception ex)
                {
                    Error("Something Seems wrong" + ex.Message.ToString() + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));
                    ViewBag.Message = "Error:" + ex.Message.ToString();
                    ConsistentData();
                    return View();
                }

                // Flag check for IsSuccess or not to display success or error message
                // Added by Rajas on 5 JULY 2017 START
                if (!IsSuccess)
                {
                    Error(ImportStatus);
                    ConsistentData();
                    return View();
                }
                else
                {
                    Success(ImportStatus);
                    ConsistentData();
                    return View();
                }
                // Added by Rajas on 5 JULY 2017 END
            }
            else
            {
                Error("You have not specified a file");
                ConsistentData();
                return View();

            }

            //Success(ImportStatus);

            //-- Added by Shalaka on 17th July 2017
            //ConsistentData();

            //return View();
        }

        /// <summary>
        /// CODE FOR IMPORT DATA FOR RULE ENGINE
        /// ADDED BY SHRADDHA ON 08 FEB 2018
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        public bool GetRuleEngineData(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>();

            int RuleId = 0;

            List<WetosDB.RuleEngine> lstSQLRuleEngine = new List<WetosDB.RuleEngine>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Row number 1 is for headers
            try
            {


                // READ  ROW BY ROW
                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(0) && rdr.GetValue(0).ToString() != "" && !rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")// 
                    {
                        RuleId = Convert.ToInt32(rdr.GetValue(0));

                        if (RuleId != 0) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            RuleEngine RuleEngineObj = WetosDB.RuleEngines.Where(a => a.RuleId == RuleId).FirstOrDefault();
                            bool IsNew = false;
                            if (RuleEngineObj == null)
                            {
                                RuleEngineObj = new RuleEngine();
                                IsNew = true;
                            }
                            string Formula = string.Empty;
                            RuleEngineObj.RuleId = RuleId;
                            System.Type type = rdr.GetValue(1).GetType();
                            Formula = rdr.GetValue(1).ToString().Trim();
                            if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                            {
                                if (type.FullName == "System.DateTime")
                                {
                                    Formula = Convert.ToDateTime(rdr.GetValue(1)).ToString("hh:mm:ss").Trim();
                                }
                                else
                                {
                                    Formula = rdr.GetValue(1).ToString().Trim();
                                }
                                RuleEngineObj.Formula = Formula;
                            }

                            string SubCode = string.Empty;
                            if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                            {
                                SubCode = rdr.GetValue(2).ToString().Trim();
                                RuleEngineObj.SubCode = SubCode;
                            }

                            string HeadCode = string.Empty;
                            if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                            {
                                HeadCode = rdr.GetValue(3).ToString().Trim();
                                RuleEngineObj.HeadCode = HeadCode;
                            }

                            string Active = string.Empty;
                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                            {
                                Active = rdr.GetValue(4).ToString().Trim();
                                RuleEngineObj.Active = Active;
                            }

                            string RuleUnit = string.Empty;
                            if (!rdr.IsDBNull(7) && rdr.GetValue(7).ToString() != "")
                            {
                                RuleUnit = rdr.GetValue(7).ToString().Trim();
                                RuleEngineObj.RuleUnit = RuleUnit;
                            }

                            string RuleName = string.Empty;
                            if (!rdr.IsDBNull(8) && rdr.GetValue(8).ToString() != "")
                            {
                                RuleName = rdr.GetValue(8).ToString().Trim();
                                RuleEngineObj.RuleName = RuleName;
                            }
                            if (IsNew == true)
                            {
                                WetosDB.RuleEngines.AddObject(RuleEngineObj);
                            }
                            WetosDB.SaveChanges();
                            lstSQLRuleEngine.Add(RuleEngineObj);
                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());


                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Rule Engine Data at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = " Rule Engine Data : Import data successful";
                    IsSuccess = true;
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting Rule Engine Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                IsSuccess = false;
                return false;
            }

        }



        /// <summary>
        /// IMPORT EMPLOYEE FOR EXCEL
        /// </summary>
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <param name="ImportStatus"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess
        public bool GetEmployeeExcel(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            //CODE ADDED BY SHRADDHA ON 2 MARCH 2017 END

            List<WetosDB.Employee> lstSQLEmployee = new List<WetosDB.Employee>();

            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // Connenction open
            Conn.Open();

            //OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);
            OleDbCommand cmd = new OleDbCommand("Select * from [Employee Master$]", Conn);


            DataTable ImportSheetDataObj = new DataTable();

            OleDbDataAdapter DA = new OleDbDataAdapter(cmd);
            DA.Fill(ImportSheetDataObj);


            // Data reader
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Added by Rajas on 3 MARCH 2017, default value as 1
            try
            {
                #region New CODE

                // Added by Rajas on 6 SEP 2017 START
                foreach (DataRow DataRow in ImportSheetDataObj.Rows)
                {
                    try
                    {
                        RowNo = RowNo + 1;
                        if (string.IsNullOrEmpty(DataRow["EmployeeCode"].ToString()) == false)
                        {
                            EmployeeCode = DataRow["EmployeeCode"].ToString();

                            string Title = string.Empty;

                            if (string.IsNullOrEmpty(DataRow["Title"].ToString()) == false)
                            {
                                Title = DataRow["Title"].ToString().Trim();
                            }
                            string FirstName = null;
                            if (string.IsNullOrEmpty(DataRow["First_Name"].ToString()) == false)
                            {
                                FirstName = DataRow["First_Name"].ToString().Trim();
                            }
                            string MiddleName = null;
                            if (string.IsNullOrEmpty(DataRow["Middle_Name"].ToString()) == false)
                            {
                                MiddleName = DataRow["Middle_Name"].ToString().Trim();
                            }
                            string LastName = null;
                            if (string.IsNullOrEmpty(DataRow["Last_Name"].ToString()) == false)
                            {
                                LastName = DataRow["Last_Name"].ToString().Trim();
                            }

                            string CompanyName = DataRow["Company_Name"].ToString().Trim();
                            DateTime? JoiningDate = null;
                            if (string.IsNullOrEmpty(DataRow["Date_of_Joining"].ToString()) == false)
                            {
                                JoiningDate = Convert.ToDateTime(DataRow["Date_of_Joining"]);
                            }
                            DateTime? ConfirmDate = null;
                            if (string.IsNullOrEmpty(DataRow["Date_of_Confirmation"].ToString()) == false)
                            {
                                try
                                {
                                    ConfirmDate = Convert.ToDateTime(DataRow["Date_of_Confirmation"]);
                                }
                                catch
                                {
                                }
                            }
                            DateTime? BirthDate = null;
                            if (string.IsNullOrEmpty(DataRow["Date_of_Birth"].ToString()) == false)
                            {
                                try
                                {
                                    BirthDate = Convert.ToDateTime(DataRow["Date_of_Birth"]);
                                }
                                catch
                                {
                                }
                            }
                            string Telephone1 = null;
                            if (string.IsNullOrEmpty(DataRow["Official_Mobile_No"].ToString()) == false)
                            {
                                try
                                {
                                    Telephone1 = DataRow["Official_Mobile_No"].ToString().Trim();
                                }
                                catch
                                {
                                }
                            }

                            string Email = null;
                            string EmailAddress = null;
                            if (string.IsNullOrEmpty(DataRow["Email_ID"].ToString()) == false)
                            {

                                Email = DataRow["Email_ID"].ToString().Trim();
                                EmailAddress = DataRow["Email_ID"].ToString().Trim();
                            }

                            string Gender = null;
                            if (string.IsNullOrEmpty(DataRow["Gender"].ToString()) == false)
                            {
                                Gender = DataRow["Gender"].ToString().Trim();
                            }

                            string MarritalStatus = null;
                            if (string.IsNullOrEmpty(DataRow["Marrital_Status"].ToString()) == false)
                            {
                                MarritalStatus = DataRow["Marrital_Status"].ToString().Trim();

                                // ADDED BY MSJ ON 21 JULY 2018 START
                                if (MarritalStatus.ToUpper() == "MARRIED")
                                {
                                    MarritalStatus = "M";
                                }
                                else
                                {
                                    MarritalStatus = "U";
                                }
                                // ADDED BY MSJ ON 21 JULY 2018 END
                            }
                            string DepartmentName = null;
                            if (string.IsNullOrEmpty(DataRow["Department"].ToString()) == false)
                            {
                                DepartmentName = DataRow["Department"].ToString().Trim();
                            }
                            string DesignationName = null;
                            if (string.IsNullOrEmpty(DataRow["Designation"].ToString()) == false)
                            {
                                DesignationName = DataRow["Designation"].ToString().Trim();
                            }
                            string EmployeeReportingId = null;
                            if (string.IsNullOrEmpty(DataRow["Reporting_Person"].ToString()) == false)
                            {
                                EmployeeReportingId = DataRow["Reporting_Person"].ToString().Trim();
                            }
                            string EmployeeReportingId2 = null;
                            if (string.IsNullOrEmpty(DataRow["Leave_Approver"].ToString()) == false)
                            {
                                EmployeeReportingId2 = (DataRow["Leave_Approver"].ToString()).Trim();
                            }

                            // Updated by Rajas on 3 MARCH 2017 for Excel sheet columns mapping START
                            string Present_Address = DataRow["Present_Address"].ToString().Trim();
                            string Permanent_Address = DataRow["Permanent_Address"].ToString().Trim();

                            DateTime? Leavingdate = null;
                            if (string.IsNullOrEmpty(DataRow["Date_Of_Leaving"].ToString()) == false)
                            {
                                try
                                {
                                    Leavingdate = Convert.ToDateTime(DataRow["Date_Of_Leaving"]);
                                }
                                catch
                                {
                                }
                            }
                            string BranchName = "";
                            if (string.IsNullOrEmpty(DataRow["Branch"].ToString()) == false)
                            {
                                BranchName = DataRow["Branch"].ToString().Trim();
                            }
                            string DivisionName = "";
                            if (string.IsNullOrEmpty(DataRow["Division"].ToString()) == false)
                            {
                                DivisionName = DataRow["Division"].ToString().Trim();
                            }

                            string EmployeeGroupName = "";
                            if (string.IsNullOrEmpty(DataRow["EmployeeGroup"].ToString()) == false)
                            {
                                EmployeeGroupName = DataRow["EmployeeGroup"].ToString().Trim();
                            }

                            string EmployeeType = "";
                            if (string.IsNullOrEmpty(DataRow["EmployeeType"].ToString()) == false)
                            {
                                EmployeeType = DataRow["EmployeeType"].ToString().Trim();
                            }

                            string GradeName = "";
                            if (string.IsNullOrEmpty(DataRow["Grade"].ToString()) == false)
                            {
                                GradeName = DataRow["Grade"].ToString().Trim();
                            }
                            // Updated by Rajas on 3 MARCH 2017 for Excel sheet columns mapping END


                            // Added by Rajas on 3 APRIL 2017 START
                            string Shift = "";
                            if (string.IsNullOrEmpty(DataRow["Shift"].ToString()) == false)
                            {
                                Shift = DataRow["Shift"].ToString().Trim();
                            }

                            string WeekOff1 = "";
                            if (string.IsNullOrEmpty(DataRow["WeekOff1"].ToString()) == false)
                            {
                                WeekOff1 = DataRow["WeekOff1"].ToString().Trim().ToUpper(); // ADDED BY MSJ ON 15 DEC 2017
                            }

                            string WeekOff2 = "";
                            if (string.IsNullOrEmpty(DataRow["WeekOff2"].ToString()) == false)
                            {
                                WeekOff2 = DataRow["WeekOff2"].ToString().Trim().ToUpper(); // ADDED BY MSJ ON 15 DEC 2017;
                            }
                            // Added by Rajas on 3 APRIL 2017 END

                            //ADDED CODE BY SHRADDHA ON 18 NOV 2017 TO SET FLAG WHETHER EMPLOYEE IS HAVING LOGIN ACCESS OR NOT START
                            string ESSApplicable = string.Empty;
                            bool IsESSApplicable = false;
                            if (string.IsNullOrEmpty(DataRow["ESS Applicable"].ToString()) == false)
                            {
                                ESSApplicable = DataRow["ESS Applicable"].ToString().Trim();
                                int EssApplicableInt = Convert.ToInt32(ESSApplicable);
                                IsESSApplicable = Convert.ToBoolean(EssApplicableInt);
                            }
                            //ADDED CODE BY SHRADDHA ON 18 NOV 2017 TO SET FLAG WHETHER EMPLOYEE IS HAVING LOGIN ACCESS OR NOT END

                            // ADDED BY MSJ ON 21 JULY 2018 START
                            // BANK NO
                            string BankAccNo = "";
                            if (string.IsNullOrEmpty(DataRow["BANK_ACC_NO"].ToString()) == false)
                            {
                                BankAccNo = DataRow["BANK_ACC_NO"].ToString().Trim().ToUpper();
                            }

                            // UAN NO
                            string UANNo = "";
                            if (string.IsNullOrEmpty(DataRow["UAN_No"].ToString()) == false)
                            {
                                UANNo = DataRow["UAN_No"].ToString().Trim().ToUpper();
                            }

                            // QUALIFICATION1
                            //string QUALIFICATION1 = "";
                            //if (string.IsNullOrEmpty(DataRow["UAN_No"].ToString()) == false)
                            //{
                            //    UANNo = DataRow["UAN_No"].ToString().Trim().ToUpper();
                            //}

                            //// QUALIFICATION2
                            //string UANNo = "";
                            //if (string.IsNullOrEmpty(DataRow["UAN_No"].ToString()) == false)
                            //{
                            //    UANNo = DataRow["UAN_No"].ToString().Trim().ToUpper();
                            //}

                            //// QUALIFICATION3
                            //string UANNo = "";
                            //if (string.IsNullOrEmpty(DataRow["UAN_No"].ToString()) == false)
                            //{
                            //    UANNo = DataRow["UAN_No"].ToString().Trim().ToUpper();
                            //}

                            //// QUALIFICATION4
                            //string UANNo = "";
                            //if (string.IsNullOrEmpty(DataRow["UAN_No"].ToString()) == false)
                            //{
                            //    UANNo = DataRow["UAN_No"].ToString().Trim().ToUpper();
                            //}

                            // PERCENTAGE
                            string Percentage = "";
                            if (string.IsNullOrEmpty(DataRow["Percentage"].ToString()) == false)
                            {
                                Percentage = DataRow["Percentage"].ToString().Trim().ToUpper();
                            }

                            // DEGREE_DIPLOMA_CERTIFICATION
                            string DegreeDiploma = "";
                            if (string.IsNullOrEmpty(DataRow["Degree / Diploma / Certification"].ToString()) == false)
                            {
                                DegreeDiploma = DataRow["Degree / Diploma / Certification"].ToString().Trim().ToUpper();
                            }

                            // YEAR OF PASSING
                            string YearofPassing = "";
                            if (string.IsNullOrEmpty(DataRow["Year of Passing"].ToString()) == false)
                            {
                                YearofPassing = DataRow["Year of Passing"].ToString().Trim().ToUpper();
                            }

                            // INSTITUTION
                            string University_Institute = "";
                            if (string.IsNullOrEmpty(DataRow["University / Institute"].ToString()) == false)
                            {
                                University_Institute = DataRow["University / Institute"].ToString().Trim().ToUpper();
                            }

                            // PAN NO
                            string Pan_No = "";
                            if (string.IsNullOrEmpty(DataRow["Pan_No"].ToString()) == false)
                            {
                                Pan_No = DataRow["Pan_No"].ToString().Trim().ToUpper();
                            }

                            // PASSPORT NO
                            string Passport_No = "";
                            if (string.IsNullOrEmpty(DataRow["Passport_No"].ToString()) == false)
                            {
                                Passport_No = DataRow["Passport_No"].ToString().Trim().ToUpper();
                            }

                            // DRIVING LIECENSE
                            string Driving_License_No = "";
                            if (string.IsNullOrEmpty(DataRow["Pan_No"].ToString()) == false)
                            {
                                Driving_License_No = DataRow["Pan_No"].ToString().Trim().ToUpper();
                            }

                            // VOTER ID
                            string Voter_ID_No = "";
                            if (string.IsNullOrEmpty(DataRow["Voter_ID_No"].ToString()) == false)
                            {
                                Voter_ID_No = DataRow["Voter_ID_No"].ToString().Trim().ToUpper();
                            }

                            // ALLERGIES
                            string Allergies = "";
                            if (string.IsNullOrEmpty(DataRow["Allergies"].ToString()) == false)
                            {
                                Allergies = DataRow["Allergies"].ToString().Trim().ToUpper();
                            }

                            //// FAMILY DETAILS
                            //string FamilyDetail1 = "";
                            //if (string.IsNullOrEmpty(DataRow["FamilyDetail1"].ToString()) == false)
                            //{
                            //    FamilyDetail1 = DataRow["UAN_No"].ToString().Trim().ToUpper();
                            //}

                            // WEDDING ANIVER
                            string Wedding_Anniversary = "";
                            if (string.IsNullOrEmpty(DataRow["Wedding_Anniversary"].ToString()) == false)
                            {
                                Wedding_Anniversary = DataRow["Wedding_Anniversary"].ToString().Trim().ToUpper();
                            }

                            // MARITAL STATUS
                            //string Marrital_Status = "";
                            //if (string.IsNullOrEmpty(DataRow["Marrital_Status"].ToString()) == false)
                            //{
                            //    Marrital_Status = DataRow["Marrital_Status"].ToString().Trim().ToUpper();
                            //}

                            // DIVISION
                            string Division = "";
                            if (string.IsNullOrEmpty(DataRow["Division"].ToString()) == false)
                            {
                                Division = DataRow["Division"].ToString().Trim().ToUpper();
                            }

                            // ADDED BY MSJ ON 21 JULY 2018 END

                            string Telephone2 = string.Empty;
                            string PanNo = string.Empty;
                            bool First = false;
                            bool Second = false;
                            bool Third = false;
                            bool Fourth = false;
                            bool Fifth = false;

                            // CHANGED LOCATION FROM MUMBAI TO LOCATION1 BY MSJ ON 15 DEC 2017
                            Location LocationObj = WetosDB.Locations.Where(a => a.LocationName == "Location1").FirstOrDefault(); // Mumbai

                            // CHECK NULL LOCATION
                            if (LocationObj == null)
                            {
                                LocationObj = new Location();
                                LocationObj.LocationName = "Location1"; // CHANGED LOCATION FROM MUMBAI TO LOCATION1 BY MSJ ON 15 DEC 2017                               
                                LocationObj.MarkedAsDelete = 0;
                                WetosDB.Locations.AddObject(LocationObj);

                                WetosDB.SaveChanges();
                            }

                            // ADD COMPANY
                            WetosDB.Company CompnayObj = WetosDB.Companies.Where(a => a.CompanyName.Trim() == CompanyName.Trim()).FirstOrDefault();

                            if (CompnayObj == null)
                            {
                                CompnayObj = new WetosDB.Company();

                                CompnayObj.CompanyName = CompanyName;

                                CompnayObj.Location = WetosDB.Locations.Where(a => a.LocationId == LocationObj.LocationId).FirstOrDefault();  // Added by Rajas on 4 OCT 2017
                                CompnayObj.Location.LocationId = LocationObj.LocationId;

                                WetosDB.Companies.AddObject(CompnayObj);

                                WetosDB.SaveChanges();
                            }

                            // ADD BRANCH
                            Branch BranchObj = WetosDB.Branches.Where(a => a.BranchName.Trim() == BranchName.Trim()).FirstOrDefault();

                            if (BranchObj == null)
                            {
                                BranchObj = new WetosDB.Branch();

                                BranchObj.BranchName = BranchName;

                                BranchObj.Location = WetosDB.Locations.Where(a => a.LocationId == LocationObj.LocationId).FirstOrDefault();  // Added by Rajas on 4 OCT 2017
                                BranchObj.Location.LocationId = LocationObj.LocationId;

                                BranchObj.Company = WetosDB.Companies.Where(a => a.CompanyId == CompnayObj.CompanyId).FirstOrDefault();  // Added by Rajas on 4 OCT 2017
                                BranchObj.Company.CompanyId = CompnayObj.CompanyId;

                                WetosDB.Branches.AddObject(BranchObj);

                                WetosDB.SaveChanges();
                            }
                            //  Added by Rajas on 4 APRIL 2017 END

                            //SP_InsertExcelDataForEmployee_Result ReturnState

                            // COMMENTED BY MSJ 15 SEP 2017 //UNCOMMENTED BY SHRADDHA ON 16 SEP 2017 BECAUSE IT IS REQUIRED

                            // ADDED BY MSJ ON 24 JAN 2018 START
                            bool IsNewEmployee = false;
                            Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode.Trim()).FirstOrDefault();
                            if (EmployeeObj == null)
                            {
                                IsNewEmployee = true;
                            }
                            // ADDED BY MSJ ON 24 JAN 2018 END

                            //COMMENTED EARLIER SP AND ADDED NEW SP BY SHRADDHA ON 18 NOV 2017 TO MARK MARKEDASDELETED FLAG IS FALSE IN INITIAL STATE BECAUSE IT IS MANDATORY FIELD NOW IN RECENT DATABASE AND IT WAS CREATING ERROR WHILE IMPROTING DATA AND SECOND CHANGE IS ADDED ONE EXTRA COLUMN IN EXCEL SHEET THAT ISESSAPPLICABLE (THIS FIELD IS USED TO ADD DATA IN LOGIN TABLE IF ISESSAPPLICABLE IS TRUE THEN DATA ADD IN LOGIN TABLE OTHERWISE NOT) START
                            //WetosDB.SP_InsertExcelDataForEmployee(EmployeeCode, Title, FirstName, MiddleName, LastName, CompanyName
                            //   , JoiningDate, ConfirmDate, BirthDate, Telephone1, Telephone2, Email
                            //   , EmailAddress, Gender, MarritalStatus, DepartmentName, DesignationName, EmployeeReportingId
                            //   , EmployeeReportingId2, Present_Address, Permanent_Address, PanNo, Leavingdate, BranchName, DivisionName
                            //   , EmployeeGroupName, EmployeeType, GradeName, Shift, WeekOff1, WeekOff2, First, Second, Third, Fourth, Fifth).FirstOrDefault();

                            WetosDB.SP_InsertExcelDataForEmployeeWithESSAndDeleteFlag(EmployeeCode, Title, FirstName, MiddleName, LastName, CompanyName
                               , JoiningDate, ConfirmDate, BirthDate, Telephone1, Telephone2, Email
                               , EmailAddress, Gender, MarritalStatus, DepartmentName, DesignationName, EmployeeReportingId
                               , EmployeeReportingId2, Present_Address, Permanent_Address, PanNo, Leavingdate, BranchName, DivisionName
                               , EmployeeGroupName, EmployeeType, GradeName, Shift, WeekOff1, WeekOff2, First, Second, Third, Fourth, Fifth, IsESSApplicable).FirstOrDefault();

                            //COMMENTED EARLIER SP AND ADDED NEW SP BY SHRADDHA ON 18 NOV 2017 TO MARK MARKEDASDELETED FLAG IS FALSE IN INITIAL STATE BECAUSE IT IS MANDATORY FIELD NOW IN RECENT DATABASE AND IT WAS CREATING ERROR WHILE IMPROTING DATA AND SECOND CHANGE IS ADDED ONE EXTRA COLUMN IN EXCEL SHEET THAT ISESSAPPLICABLE (THIS FIELD IS USED TO ADD DATA IN LOGIN TABLE IF ISESSAPPLICABLE IS TRUE THEN DATA ADD IN LOGIN TABLE OTHERWISE NOT) END

                            // GET EMPLOYEES
                            EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode.Trim()).FirstOrDefault();

                            // ADDED BY MSJ ON 21 JULY 2018 START
                            EmployeeObj.BankNo = BankAccNo;
                            EmployeeObj.PANNO = Pan_No;
                            EmployeeObj.PFNO = UANNo;
                            WetosDB.SaveChanges();
                            // ADDED BY MSJ ON 21 JULY 2018 START

                            #region ENCRYPT PASSWORD

                            // ADDED BY MSJ ON 24 JAN 2018 START
                            if (IsNewEmployee && EmployeeObj != null)
                            {
                                // GET USER 
                                User LoginUser = WetosDB.Users.Where(a => a.UserName == EmployeeCode).FirstOrDefault();

                                if (LoginUser != null)
                                {
                                    // ENCRYPT PASSWORD 
                                    Cryptography objcrypt = new Cryptography();

                                    string TempEncryptPassword = objcrypt.EncryptPassword(LoginUser.Password);
                                    LoginUser.Password = TempEncryptPassword;

                                    // UPDATE LOGIN VERSION
                                    WetosDB.SaveChanges();
                                }
                            }

                            #endregion

                            #region UPDATE SHIFT
                            //Added by Rajas on 5 JULY 2017 to update Shift details in Shift
                            //CODE ADDED BY SHRADDHA ON 29 NOV 2017 TO HANDLE SHIFT CODE ONLY 4 CHARACTERS ALLOWED EXCETPTION
                            string ShiftCode = Shift.Trim().Length > 4 ? Shift.Trim().Substring(0, 4).Trim() : Shift.Trim();
                            // Shift ShiftObj = WetosDB.Shifts.Where(a => a.ShiftCode.Trim() == Shift).FirstOrDefault();//CODE COMMENTED BY SHRADDHA ON 29 NOV 2017 TO HANDLE SHIFT CODE ONLY 4 CHARACTERS ALLOWED EXCETPTION
                            Shift ShiftObj = WetosDB.Shifts.Where(a => a.ShiftCode.Trim() == ShiftCode).FirstOrDefault();//CODE ADDED BY SHRADDHA ON 29 NOV 2017 TO HANDLE SHIFT CODE ONLY 4 CHARACTERS ALLOWED EXCETPTION
                            if (ShiftObj == null)
                            {
                                try
                                {
                                    int CurrentYearInt = DateTime.Now.Year; // ADDED BY MSJ ON 02 JAN 2018

                                    ShiftObj = new Shift();
                                    //ShiftObj.ShiftCode = Shift;//CODE COMMENTED BY SHRADDHA ON 29 NOV 2017 TO HANDLE SHIFT CODE ONLY 4 CHARACTERS ALLOWED EXCETPTION
                                    ShiftObj.ShiftCode = ShiftCode; //CODE ADDED BY SHRADDHA ON 29 NOV 2017 TO HANDLE SHIFT CODE ONLY 4 CHARACTERS ALLOWED EXCETPTION
                                    ShiftObj.ShiftName = Shift;
                                    ShiftObj.FirstInTime = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.FirstOutTime = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.WorkingHours = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.LunchStartTime = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.LunchEndTime = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.LunchTime = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.SecondInTime = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.SecondOutTime = new DateTime(CurrentYearInt, 1, 1, 0, 0, 0); // ADDED BY MSJ ON 02 JAN 2018 replaced 2017 with CurrentYearInt
                                    ShiftObj.LunchTimeExcludeFlag = false;
                                    ShiftObj.NightShiftFlag = false;
                                    ShiftObj.MarkedAsDelete = 0;
                                    ShiftObj.ShiftType = "Regular Shift";
                                    ShiftObj.Company = CompnayObj;
                                    ShiftObj.Company.CompanyId = CompnayObj.CompanyId;
                                    ShiftObj.BranchId = BranchObj.BranchId;

                                    //ADDED BY PUSHKAR TOSLOVE ISSUE REPORTED BY HARSHAL FOR DATA PROCESSING ON 31 AUGUST 2018
                                    EmployeeObj.DefaultShift = ShiftCode;

                                    WetosDB.Shifts.AddObject(ShiftObj);

                                    WetosDB.SaveChanges();
                                }
                                catch (System.Exception E)
                                {
                                    AddAuditTrail("Error in getting EMPLOYEE EXCEL :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                                    MissingEmployee.Add(RowNo.ToString());
                                    AddAuditTrail(DateTime.Now + "_Employee Data Import Error in RowNo:" + RowNo);
                                }
                            }
                            else
                            {
                                //ADDED BY PUSHKAR TOSLOVE ISSUE REPORTED BY HARSHAL FOR DATA PROCESSING ON 31 AUGUST 2018
                                EmployeeObj.DefaultShift = ShiftObj.ShiftCode;
                                WetosDB.SaveChanges();
                            }

                            #endregion

                            #region UPDATE EMPLOYEE GROUP DETAILS

                            // Added by Rajas on 5 JUNE 2017 START

                            // GET GROUP
                            EmployeeGroup EmployeeGroupObj = WetosDB.EmployeeGroups.Where(a => a.EmployeeGroupName.Trim() == EmployeeGroupName.Trim()
                                && a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId).FirstOrDefault();

                            //if (EmployeeGroupObj == null)
                            //{
                            //    EmployeeGroupObj = new EmployeeGroup();
                            //    EmployeeGroupObj.EmployeeGroupName = EmployeeGroupName.Trim();
                            //    EmployeeGroupObj.CompanyId = CompnayObj.CompanyId;
                            //    EmployeeGroupObj.BranchId = BranchObj.BranchId;
                            //    EmployeeGroupObj.MarkedAsDelete = 0;
                            //    WetosDB.EmployeeGroups.AddObject(EmployeeGroupObj);
                            //    WetosDB.SaveChanges();
                            //}

                            if (EmployeeObj != null)
                            {
                                // Get Employee group details
                                EmployeeGroupDetail EmployeeGroupDetailObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == EmployeeObj.EmployeeId).FirstOrDefault();

                                if (EmployeeGroupDetailObj == null)
                                {
                                    if (EmployeeGroupObj != null)
                                    {
                                        EmployeeGroupDetailObj = new EmployeeGroupDetail();

                                        EmployeeGroupDetailObj.Employee = WetosDB.Employees
                                            .Where(a => a.EmployeeId == EmployeeObj.EmployeeId).FirstOrDefault();   // Added by Rajas on 4 OCT 2017
                                        EmployeeGroupDetailObj.Employee.EmployeeId = EmployeeObj.EmployeeId;

                                        EmployeeGroupDetailObj.EmployeeGroup = WetosDB.EmployeeGroups
                                            .Where(a => a.EmployeeGroupId == EmployeeGroupObj.EmployeeGroupId).FirstOrDefault();  // Added by Rajas on 4 OCT 2017
                                        EmployeeGroupDetailObj.EmployeeGroup.EmployeeGroupId = EmployeeGroupObj.EmployeeGroupId;

                                        WetosDB.EmployeeGroupDetails.AddObject(EmployeeGroupDetailObj);
                                        WetosDB.SaveChanges();
                                    }
                                    else
                                    {
                                        MissingEmployee.Add(RowNo.ToString());
                                    }

                                }
                                else // TEMPORARILY CODE ADDED BY SHRADDHA ON 20 NOV 2017 TO UPDATE EXISTING GROUP START
                                {
                                    if (EmployeeGroupObj != null)
                                    {
                                        EmployeeGroupDetailObj.Employee = WetosDB.Employees
                                            .Where(a => a.EmployeeId == EmployeeObj.EmployeeId).FirstOrDefault();   // Added by Rajas on 4 OCT 2017
                                        EmployeeGroupDetailObj.Employee.EmployeeId = EmployeeObj.EmployeeId;

                                        EmployeeGroupDetailObj.EmployeeGroup = WetosDB.EmployeeGroups
                                           .Where(a => a.EmployeeGroupId == EmployeeGroupObj.EmployeeGroupId).FirstOrDefault();  // Added by Rajas on 4 OCT 2017
                                        EmployeeGroupDetailObj.EmployeeGroup.EmployeeGroupId = EmployeeGroupObj.EmployeeGroupId;

                                        //WetosDB.EmployeeGroupDetails.AddObject(EmployeeGroupDetailObj);
                                        WetosDB.SaveChanges();
                                    }
                                }//TEMPORARILY CODE ADDED BY SHRADDHA ON 20 NOV 2017 TO UPDATE EXISTING GROUP END
                            }
                        }

                        // Added by Rajas on 5 JUNE 2017 END
                            #endregion


                    }
                    catch (System.Exception E)
                    {

                        MissingEmployee.Add(RowNo.ToString());

                        AddAuditTrail(DateTime.Now + "_Employee Data Import Error in RowNo:" + RowNo + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                    }
                }
                // Added by Rajas on 6 SEP 2017 END

                #endregion New CODE

                Conn.Close();

                Conn.Dispose();

                if (MissingEmployee.Count > 0)
                {
                    // Error("Can not insert data for Employee codes : " + string.Join(" ,", MissingEmployee));
                    //Error("Error in adding Employee at row number in excel sheet : " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Employee at row number in excel sheet : " + string.Join(", ", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }
                else
                {
                    //Success("Employee : Import data successful");
                    ImportStatus = "Employee : Import data successful";
                    IsSuccess = true;
                    return true;
                }

                //return lstSQLEmployee;
            }
            catch (System.Exception E)
            {
                Conn.Dispose();
                ImportStatus = E.Message + "_" + (E.InnerException == null ? string.Empty : E.InnerException.Message);
                // throw;
                return false;
            }

            //return lstSQLEmployee;

        }

        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// ADDED BY SHRADDHA ON 15 JAN 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess
        public bool GetLeaveBalanceExcel(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            List<WetosDB.LeaveBalance> lstSQLLeaveBalance = new List<WetosDB.LeaveBalance>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Row number 1 is for headers
            try
            {


                // READ  ROW BY ROW
                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                    {
                        EmployeeCode = rdr.GetValue(0).ToString().Trim();

                        LeaveBalance LeaveBalanceObj = new LeaveBalance();
                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();

                        if (EmployeeObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                            string CurrentLeaveType = string.Empty;
                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                            {
                                CurrentLeaveType = rdr.GetValue(4).ToString().Trim();
                            }
                            LeaveBalance CheckForEmployeeIdExistInDB = WetosDB.LeaveBalances.Where(a => a.EmployeeId == EmployeeObj.EmployeeId && a.LeaveType == CurrentLeaveType).FirstOrDefault();

                            if (CheckForEmployeeIdExistInDB != null) // LEAVE BALNACE ALREADY PRESNT
                            {
                                CheckForEmployeeIdExistInDB.EmployeeId = EmployeeObj.EmployeeId;
                                CheckForEmployeeIdExistInDB.BranchId = EmployeeObj.BranchId;
                                CheckForEmployeeIdExistInDB.CompanyId = EmployeeObj.CompanyId;

                                // LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                // LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;

                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }

                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                //{
                                //    DateTime LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(5).ToString().Trim());
                                //    CheckForEmployeeIdExistInDB.AppliedFromDate = LeaveAppliedDate;
                                //}
                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END
                                WetosDB.SaveChanges();
                            }
                            else // LEAVE BALANCE NOT PRESENT INSERT
                            {
                                LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                                LeaveBalanceObj.BranchId = EmployeeObj.BranchId;
                                LeaveBalanceObj.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                //LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    LeaveBalanceObj.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    LeaveBalanceObj.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }


                                WetosDB.LeaveBalances.AddObject(LeaveBalanceObj);
                                WetosDB.SaveChanges();
                            }


                            lstSQLLeaveBalance.Add(LeaveBalanceObj);
                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());


                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Leave Balance : Import data successful";
                    IsSuccess = true;
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting LEAVE BALANCE EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                IsSuccess = false;
                return false;
            }

        }

        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// ADDED BY SHRADDHA ON 15 JAN 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess
        public bool GetLeaveCreditNBalanceExcel(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            List<WetosDB.LeaveBalance> lstSQLLeaveBalance = new List<WetosDB.LeaveBalance>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Row number 1 is for headers
            try
            {


                // READ  ROW BY ROW
                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                    {
                        EmployeeCode = rdr.GetValue(0).ToString().Trim(); // EMLOYEE CODE

                        LeaveBalance LeaveBalanceObj = new LeaveBalance();
                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();

                        if (EmployeeObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                            string CurrentLeaveType = string.Empty;
                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                            {
                                CurrentLeaveType = rdr.GetValue(4).ToString().Trim();
                            }
                            LeaveBalance CheckForEmployeeIdExistInDB = WetosDB.LeaveBalances.Where(a => a.EmployeeId == EmployeeObj.EmployeeId && a.LeaveType == CurrentLeaveType).FirstOrDefault();

                            if (CheckForEmployeeIdExistInDB != null) // LEAVE BALNACE ALREADY PRESNT
                            {
                                CheckForEmployeeIdExistInDB.EmployeeId = EmployeeObj.EmployeeId;
                                CheckForEmployeeIdExistInDB.BranchId = EmployeeObj.BranchId;
                                CheckForEmployeeIdExistInDB.CompanyId = EmployeeObj.CompanyId;

                                // LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                // LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;

                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }

                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                //{
                                //    DateTime LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(5).ToString().Trim());
                                //    CheckForEmployeeIdExistInDB.AppliedFromDate = LeaveAppliedDate;
                                //}
                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END
                                WetosDB.SaveChanges();
                            }
                            else // LEAVE BALANCE NOT PRESENT INSERT
                            {
                                LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                                LeaveBalanceObj.BranchId = EmployeeObj.BranchId;
                                LeaveBalanceObj.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                //LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    LeaveBalanceObj.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    LeaveBalanceObj.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }


                                WetosDB.LeaveBalances.AddObject(LeaveBalanceObj);
                                WetosDB.SaveChanges();
                            }


                            lstSQLLeaveBalance.Add(LeaveBalanceObj);
                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());


                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Leave Balance : Import data successful";
                    IsSuccess = true;
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting LEAVE BALANCE EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                IsSuccess = false;
                return false;
            }

        }

        /// <summary>
        /// CODE FOR IMPORT DATA FOR SHIFT SCHEDULE
        /// ADDED BY RAJAS ON 3 APRIL 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        public bool GetShiftScheduleExcel(string Path, string Company, ref string ImportStatus)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            //string EmployeeName = string.Empty;  // Added by Rajas on 12 APRIL 2017

            List<ShiftSchedule> lstSQLShiftSchedule = new List<ShiftSchedule>();

            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();

            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Setting default row number as 1 
            try
            {


                // READ  ROW BY ROW
                while (rdr.Read())
                {
                    try
                    {
                        RowNo = RowNo + 1;   // Added by Rajas on 3 MARCH 2017
                        if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                        {
                            EmployeeCode = rdr.GetValue(0).ToString().Trim();

                            VwActiveEmployee EmployeeObj = WetosDB.VwActiveEmployees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();

                            EmployeeGroupDetail EmployeeGroupDetailObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == EmployeeObj.EmployeeId).FirstOrDefault();

                            List<Shift> AvailableShiftCodeListObj = WetosDB.Shifts.ToList();

                            if (EmployeeObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                            {
                                // GET CurrentShiftMonth
                                int CurrentShiftMonth = 0;

                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    CurrentShiftMonth = Convert.ToInt32(rdr.GetValue(2));
                                }

                                // GET CurrentShiftYear
                                int CurrentShiftYear = 0;

                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    CurrentShiftYear = Convert.ToInt32(rdr.GetValue(3));
                                }

                                // GET CurrentEmployeeGrpId
                                //int CurrentEmployeeGrpId = 0;

                                //if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                //{
                                //    CurrentEmployeeGrpId = Convert.ToInt32(rdr.GetValue(1));
                                //}

                                // CHECK EXISTIN ENTRY FROM SHIFT SCHEDULE BASED ON EMP CODE AND SHIFT MONTH
                                ShiftSchedule ShiftScheduleObj = WetosDB.ShiftSchedules.Where(a => a.EmployeeId == EmployeeObj.EmployeeId
                                    && a.ShiftMonth == CurrentShiftMonth && a.ShiftYear == CurrentShiftYear).FirstOrDefault();

                                if (ShiftScheduleObj != null) // SCHEDULE ALREADY PRESNT
                                {
                                    ShiftScheduleObj.EmployeeId = EmployeeObj.EmployeeId;

                                    ShiftScheduleObj.BranchId = EmployeeObj.BranchId;

                                    ShiftScheduleObj.CompanyId = EmployeeObj.CompanyId;

                                    foreach (var Shifts in AvailableShiftCodeListObj)
                                    {
                                        for (int i = 0; i <= 30; i++)
                                        {

                                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day1 = rdr.GetValue(4).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day2 = rdr.GetValue(5).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(6) && rdr.GetValue(6).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day3 = rdr.GetValue(6).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(7) && rdr.GetValue(7).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day4 = rdr.GetValue(7).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(8) && rdr.GetValue(8).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day5 = rdr.GetValue(8).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(9) && rdr.GetValue(9).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day6 = rdr.GetValue(9).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(10) && rdr.GetValue(10).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day7 = rdr.GetValue(10).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(11) && rdr.GetValue(11).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day8 = rdr.GetValue(11).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(12) && rdr.GetValue(12).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day9 = rdr.GetValue(12).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(13) && rdr.GetValue(13).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day10 = rdr.GetValue(13).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(14) && rdr.GetValue(14).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day11 = rdr.GetValue(14).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(15) && rdr.GetValue(15).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day12 = rdr.GetValue(15).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(16) && rdr.GetValue(16).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day13 = rdr.GetValue(16).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(17) && rdr.GetValue(17).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day14 = rdr.GetValue(17).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(18) && rdr.GetValue(18).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day15 = rdr.GetValue(18).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(19) && rdr.GetValue(19).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day16 = rdr.GetValue(19).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(20) && rdr.GetValue(20).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day17 = rdr.GetValue(20).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(21) && rdr.GetValue(21).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day18 = rdr.GetValue(21).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(22) && rdr.GetValue(22).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day19 = rdr.GetValue(22).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(23) && rdr.GetValue(23).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day20 = rdr.GetValue(23).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(24) && rdr.GetValue(24).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day21 = rdr.GetValue(24).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(25) && rdr.GetValue(25).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day22 = rdr.GetValue(25).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(26) && rdr.GetValue(26).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day23 = rdr.GetValue(26).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(27) && rdr.GetValue(27).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day24 = rdr.GetValue(27).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(28) && rdr.GetValue(28).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day25 = rdr.GetValue(28).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(29) && rdr.GetValue(29).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day26 = rdr.GetValue(29).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(30) && rdr.GetValue(30).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day27 = rdr.GetValue(30).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(31) && rdr.GetValue(31).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day28 = rdr.GetValue(31).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(32) && rdr.GetValue(32).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day29 = rdr.GetValue(32).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(33) && rdr.GetValue(33).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day30 = rdr.GetValue(33).ToString().Trim();
                                            }

                                            if (!rdr.IsDBNull(34) && rdr.GetValue(34).ToString() != "")
                                            {
                                                ShiftScheduleObj.Day31 = rdr.GetValue(34).ToString().Trim();
                                            }
                                        }
                                    }

                                    if (EmployeeGroupDetailObj != null)
                                    {

                                        ShiftScheduleObj.EmployeeGroupId = EmployeeGroupDetailObj.EmployeeGroup.EmployeeGroupId;
                                    }

                                    ShiftScheduleObj.ShiftYear = CurrentShiftYear;

                                    ShiftScheduleObj.ShiftMonth = CurrentShiftMonth;

                                    WetosDB.SaveChanges();
                                }
                                else // SHIFT SCHEDULE IS NOT AVAILABLE THEN INSERT
                                {
                                    ShiftScheduleObj = new ShiftSchedule();

                                    ShiftScheduleObj.EmployeeId = EmployeeObj.EmployeeId;

                                    ShiftScheduleObj.BranchId = EmployeeObj.BranchId;

                                    ShiftScheduleObj.CompanyId = EmployeeObj.CompanyId;

                                    ShiftScheduleObj.RotationId = 0; // Temp hardcode

                                    if (EmployeeGroupDetailObj != null)
                                    {

                                        ShiftScheduleObj.EmployeeGroupId = EmployeeGroupDetailObj.EmployeeGroup.EmployeeGroupId;
                                    }

                                    if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                    {
                                        ShiftScheduleObj.ShiftMonth = Convert.ToInt32(rdr.GetValue(2));
                                    }

                                    if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                    {
                                        ShiftScheduleObj.ShiftYear = Convert.ToInt32(rdr.GetValue(3));
                                    }

                                    if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day1 = rdr.GetValue(4).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day2 = rdr.GetValue(5).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(6) && rdr.GetValue(6).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day3 = rdr.GetValue(6).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(7) && rdr.GetValue(7).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day4 = rdr.GetValue(7).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(8) && rdr.GetValue(8).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day5 = rdr.GetValue(8).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(9) && rdr.GetValue(9).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day6 = rdr.GetValue(9).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(10) && rdr.GetValue(10).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day7 = rdr.GetValue(10).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(11) && rdr.GetValue(11).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day8 = rdr.GetValue(11).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(12) && rdr.GetValue(12).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day9 = rdr.GetValue(12).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(13) && rdr.GetValue(13).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day10 = rdr.GetValue(13).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(14) && rdr.GetValue(14).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day11 = rdr.GetValue(14).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(15) && rdr.GetValue(15).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day12 = rdr.GetValue(15).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(16) && rdr.GetValue(16).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day13 = rdr.GetValue(16).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(17) && rdr.GetValue(17).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day14 = rdr.GetValue(17).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(18) && rdr.GetValue(18).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day15 = rdr.GetValue(18).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(19) && rdr.GetValue(19).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day16 = rdr.GetValue(19).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(20) && rdr.GetValue(20).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day17 = rdr.GetValue(20).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(21) && rdr.GetValue(21).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day18 = rdr.GetValue(21).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(22) && rdr.GetValue(22).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day19 = rdr.GetValue(22).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(23) && rdr.GetValue(23).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day20 = rdr.GetValue(23).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(24) && rdr.GetValue(24).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day21 = rdr.GetValue(24).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(25) && rdr.GetValue(25).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day22 = rdr.GetValue(25).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(26) && rdr.GetValue(26).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day23 = rdr.GetValue(26).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(27) && rdr.GetValue(27).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day24 = rdr.GetValue(27).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(28) && rdr.GetValue(28).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day25 = rdr.GetValue(28).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(29) && rdr.GetValue(29).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day26 = rdr.GetValue(29).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(30) && rdr.GetValue(30).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day27 = rdr.GetValue(30).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(31) && rdr.GetValue(31).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day28 = rdr.GetValue(31).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(32) && rdr.GetValue(32).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day29 = rdr.GetValue(32).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(33) && rdr.GetValue(33).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day30 = rdr.GetValue(33).ToString().Trim();
                                    }

                                    if (!rdr.IsDBNull(34) && rdr.GetValue(34).ToString() != "")
                                    {
                                        ShiftScheduleObj.Day31 = rdr.GetValue(34).ToString().Trim();
                                    }

                                    WetosDB.ShiftSchedules.AddObject(ShiftScheduleObj);

                                    WetosDB.SaveChanges();
                                }

                            }
                            else
                            {
                                MissingEmployee.Add(RowNo.ToString());

                            }

                        }
                    }

                    catch
                    {
                        MissingEmployee.Add(RowNo.ToString());
                    }
                }

                Conn.Close();

                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in creating Shift Schedule at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Shift Schedule : Import data successful";

                    return true;
                }

                //return lstSQLLeaveBalance;
            }
            catch (System.Exception E)
            {
                Conn.Dispose();
                ImportStatus = E.Message + "_" + (E.InnerException == null ? string.Empty : E.InnerException.Message);
                return false;
            }

        }


        /// <summary>
        /// CODE FOR IMPORT DATA INTO LEAVE CREDIT
        /// ADDED BY SHRADDHA ON 17 JAN 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess
        public bool GetLeaveCreditExcel(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>(); // Added by Rajas on 1 MARCH 2017 for storing list of Employyes missing

            string EmployeeCode = string.Empty;

            List<WetosDB.LeaveCredit> lstSQLLeaveCredit = new List<WetosDB.LeaveCredit>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // Open connection
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // Execute query
            OleDbDataReader rdr = cmd.ExecuteReader();

            // Added by MSJ and Rajas on 2 MARCH 2017
            int RowNo = 1;
            try
            {


                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(0) && rdr.GetValue(0).ToString() != "")
                    {
                        EmployeeCode = rdr.GetValue(0).ToString().Trim();

                        LeaveCredit LeaveCreditObj = new LeaveCredit();
                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode == EmployeeCode).FirstOrDefault();
                        if (EmployeeObj != null)
                        {

                            LeaveCreditObj.EmployeeId = EmployeeObj.EmployeeId;

                            string CurrentLeaveType = string.Empty;
                            if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                            {
                                CurrentLeaveType = rdr.GetValue(3).ToString().Trim();
                            }

                            //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                            DateTime LeaveAppliedDate = new DateTime();
                            int financialYear = 0;
                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                            {
                                LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(4).ToString().Trim());
                                financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();

                            }
                            //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END

                            LeaveCredit CheckForEmployeeIdExistInDB = WetosDB.LeaveCredits.Where(a => a.EmployeeId == EmployeeObj.EmployeeId && a.LeaveType == CurrentLeaveType && a.FinancialYearId == financialYear).FirstOrDefault();
                            if (CheckForEmployeeIdExistInDB != null)
                            {
                                CheckForEmployeeIdExistInDB.BranchId = EmployeeObj.BranchId;
                                CheckForEmployeeIdExistInDB.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();

                                //CODE ADDED FOR ADDING FINANCIAL YEAR ID BY SHRADDHA ON 09 FEB 2017 START

                                //LeaveCreditObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveType = rdr.GetValue(3).ToString().Trim();
                                }
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.CarryForward = Convert.ToDouble(rdr.GetValue(1).ToString().Trim());
                                }

                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //DateTime LeaveAppliedDate = new DateTime();
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(4).ToString().Trim());
                                    CheckForEmployeeIdExistInDB.ApplicableEffectiveDate = LeaveAppliedDate;
                                    //financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();
                                    CheckForEmployeeIdExistInDB.FinancialYearId = financialYear == null ? 0 : financialYear;
                                }
                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END

                                //if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                //{
                                //    string FinancialYearName = rdr.GetValue(4).ToString().Trim();
                                //    int financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();
                                //    CheckForEmployeeIdExistInDB.FinancialYearId = financialYear == null ? 0 : financialYear;
                                //}
                                CheckForEmployeeIdExistInDB.OpeningBalance = Convert.ToDouble(rdr.GetValue(2).ToString().Trim());
                                WetosDB.SaveChanges();
                            }
                            else
                            {
                                LeaveCreditObj.EmployeeId = EmployeeObj.EmployeeId;
                                LeaveCreditObj.BranchId = EmployeeObj.BranchId;
                                LeaveCreditObj.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();

                                //LeaveCreditObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    LeaveCreditObj.LeaveType = rdr.GetValue(3).ToString().Trim();
                                }
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    LeaveCreditObj.CarryForward = Convert.ToDouble(rdr.GetValue(1).ToString().Trim());
                                }

                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //DateTime LeaveAppliedDate = new DateTime();
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(4).ToString().Trim());
                                    LeaveCreditObj.ApplicableEffectiveDate = LeaveAppliedDate;
                                    //int financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();
                                    LeaveCreditObj.FinancialYearId = financialYear;

                                }


                                //if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                //{
                                //    string FinancialYearName = rdr.GetValue(4).ToString().Trim();
                                //   }
                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END
                                LeaveCreditObj.OpeningBalance = Convert.ToDouble(rdr.GetValue(2).ToString().Trim());


                                WetosDB.LeaveCredits.AddObject(LeaveCreditObj);
                                WetosDB.SaveChanges();
                            }

                            lstSQLLeaveCredit.Add(LeaveCreditObj);
                            WetosDB.SaveChanges();
                        }

                        else  // If employee doesn't exist 
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());
                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Credit at row number in excel sheet : " + string.Join(" ,", MissingEmployee));
                    ImportStatus = "Error in adding Leave Credit at row number in excel sheet : " + string.Join(" ,", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    // Success("Leave Credit : Import data successful");
                    ImportStatus = "Leave Credit : Import data successful";
                    IsSuccess = true;
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting LEAVE CREDIT EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                //throw;
                ImportStatus = "Error in adding Leave Credit at row number in excel sheet : " + string.Join(" ,", MissingEmployee);
                IsSuccess = false;
                return false;
            }

        }

        public ActionResult DataProcessing()
        {
            #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var EmployeeObj = WetosDB.Employees.Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " - " + a.FirstName + " " + a.LastName }).ToList(); //ADDED EMPLOYEE CODE BY SHRADDHA ON 15 FEB 2018 
            //   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
            var EmployeeObj = WetosDB.SP_VwActiveEmployee(EmployeeId).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " - " + a.FirstName + " " + a.LastName }).ToList(); //ADDED EMPLOYEE CODE BY SHRADDHA ON 15 FEB 2018 
            #endregion

            ViewBag.EmployeeList = new SelectList(EmployeeObj, "EmployeeId", "EmployeeName").ToList();

            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmpId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyObj = WetosDB.SP_GetCompanyList(EmpId).Select(m => new { Companyid = m.CompanyId, CompanyName = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.CompanyList = new SelectList(CompanyObj, " CompanyId", "CompanyName").ToList();

            #region CODE FOR GET BRANCH LIST ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            //var BranchObj = WetosDB.Branches.Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();
            var BranchObj = WetosDB.SP_GetBranchList(EmployeeId).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList(); //.Select(m => new { BranchId = m.BranchId, BranchName = m.BranchName}).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.BranchList = new SelectList(BranchObj, " BranchId", "BranchName").ToList();

            //var SearchByObj = WetosDB.DropdownDatas.Where(a => a.TypeId == 4).Select(a => new { SearchbyId = a.Value, SearchByText = a.Text }).ToList();
            List<string> SearchByObj = WetosDB.DropdownDatas.Where(a => a.TypeId == 4).Select(a => a.Text).ToList();
            ViewBag.SearchByList = SearchByObj;

            return View();
        }


        /// <summary>
        /// Data Processing button handler
        /// </summary>
        /// <param name="EmployeeObj"></param>
        /// <param name="fc"></param>
        /// <param name="submit"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult DataProcessing(PostingAttendanceModel EmployeeObj, FormCollection fc, string submit)
        {
            string FromDateString = fc["FromDate"];
            string ToDateString = fc["ToDate"];

            string SelectAllCheckbox = fc["SelectAllCheckbox"];

            // CHECK FOR NULL FROM AND TO DATE ADDED BY MSJ ON 23 JAN 2019
            if (!string.IsNullOrEmpty(FromDateString) && !string.IsNullOrEmpty(ToDateString))
            {
                string[] FromSplitDate = FromDateString.Split('/');
                string[] ToSplitDate = ToDateString.Split('/');

                DateTime FromDate = new DateTime(Convert.ToInt32(FromSplitDate[2]), Convert.ToInt32(FromSplitDate[1]), Convert.ToInt32(FromSplitDate[0]), 0, 0, 0);
                DateTime ToDate = new DateTime(Convert.ToInt32(ToSplitDate[2]), Convert.ToInt32(ToSplitDate[1]), Convert.ToInt32(ToSplitDate[0]), 0, 0, 0);

                if (FromDate.Date > DateTime.Now.Date || ToDate.Date > DateTime.Now.Date)
                {
                    Information("Select correct date range for data processing. Cannot process attendance for future date.");
                    return View();
                }

                //ADDED BY SHALAKA ON 01ST DEC 2017 TO GET SELECTED EMPLOYEES LIST ---> START 
                string EmployeeString = "";
                EmployeeString = fc["EmployeeId"];
                //ADDED BY SHALAKA ON 01ST DEC 2017 TO GET SELECTED EMPLOYEES LIST ---> END 

                switch (submit)
                {
                    //case "Calculate Leave":
                    //    return RedirectToAction("DataProcessing");

                    //case "Calculate OT":
                    //    return RedirectToAction("DataProcessing");

                    //case "Calculate OD":
                    //    return RedirectToAction("DataProcessing");

                    //case "Get Attendance":
                    //    return RedirectToAction("DataProcessing");

                    //case "Process Payroll":
                    //    return RedirectToAction("DataProcessing");

                    case "Process Attendance":
                        return RedirectToAction("ProcessAttendance", new { fromdate = FromDate, todate = ToDate, EmployeeList = EmployeeString });

                }
            }
            else
            {
                Information("Select correct date range for data processing.");
            }
            // CHECK FOR NULL FROM AND TO DATE ADDED BY MSJ ON 23 JAN 2019 END

            //ADDED BY RAJAS ON 27 DEC 2016
            AddAuditTrail("");

            return View();
        }

        /// <summary>
        /// GET
        /// Process Attendance for Individual Employee
        /// Added by Rajas on 31 AUGUST 2017
        /// </summary>
        /// <returns></returns>
        //public ActionResult DataProcessForIndividualEmployee()
        //{
        //    try
        //    {
        //        AttendanceDataProcessModel AttendanceDataProcessModelObj = new AttendanceDataProcessModel();

        //        PopulateDropDownForDataProcessEmployeewise();

        //        return View();
        //    }
        //    catch (System.Exception ex)
        //    {
        //        AddAuditTrail("Error in PopulateDropDownForDataProcessEmployeewise due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message) );

        //        return View("Error");
        //    }
        //}

        /// <summary>
        /// POST
        /// Added by Rajas on 31 AUGUST 2017
        /// </summary>
        /// <param name="AttendanceDataProcessModelObj"></param>
        /// <param name="fc"></param>
        /// <returns></returns>
        [HttpPost]
        //public ActionResult DataProcessForIndividualEmployee(AttendanceDataProcessModel AttendanceDataProcessModelObj, FormCollection fc)
        //{
        //    try
        //    {
        //        ProcessAttendenceForIndividualEmployee(WetosDB, AttendanceDataProcessModelObj.FromDate, AttendanceDataProcessModelObj.ToDate
        //            , AttendanceDataProcessModelObj.EmployeeId);

        //        PopulateDropDownForDataProcessEmployeewise();

        //        return View();
        //    }
        //    catch (System.Exception ex)
        //    {
        //        AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message) );
        //        PopulateDropDownForDataProcessEmployeewise();
        //        return View();
        //    }
        //}

        /// <summary>
        /// Added by Rajas on 31 AUGUST 2017
        /// </summary>
        private void PopulateDropDownForDataProcessEmployeewise()
        {
            //CODE FOR DROPDOWN
            // code for company drop down list
            #region COMPANY LIST CODE ADDED BY SHRADDHA ON 30 MAR 2018
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN START
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //var CompanyObj = WetosDB.Companies.Select(a => new { CompanyId = a.CompanyId, CompanyName = a.CompanyName }).ToList();
            var CompanyName = WetosDB.SP_GetCompanyList(EmployeeId).Select(m => new { Companyid = m.CompanyId, CompanyName = m.CompanyName }).ToList();
            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 MAR 2018 FOR BRANCH WISE ADMIN END
            #endregion

            ViewBag.CompanyNameList = new SelectList(CompanyName, "CompanyId", "CompanyName").ToList();

            // code for Department drop down list
            var Department = new List<Department>();
            ViewBag.DepartmentNameList = new SelectList(Department, "DepartmentId", "DepartmentName").ToList();

            //drop down for branch name list
            var BranchName = new List<Branch>();
            ViewBag.BranchNameList = new SelectList(BranchName, "BranchId", "BranchName").ToList();

            //Drop down for employee
            var EmployeeNameList = new List<Employee>();
            ViewBag.EmployeeList = new SelectList(EmployeeNameList, "EmployeeId", "Name").ToList();
        }

        /// <summary>
        /// Json return for to get Branch dropdown list on basis of company selection
        /// Added by Rajas on 31 AUGUST 2017
        /// </summary>
        /// <returns></returns>
        //[HttpPost]
        //public JsonResult GetBranch(string Companyid)
        //{
        //    int SelCompanyId = 0;
        //    if (!string.IsNullOrEmpty(Companyid))
        //    {
        //        if (Companyid.ToUpper() != "NULL")
        //        {
        //            SelCompanyId = Convert.ToInt32(Companyid);
        //        }
        //    }

        //    var BranchList = WetosDB.Branches.Where(a => a.Company.CompanyId == SelCompanyId
        //        && (a.MarkedAsDelete == null || a.MarkedAsDelete == 0)).Select(a => new { BranchId = a.BranchId, BranchName = a.BranchName }).ToList();

        //    return Json(BranchList);
        //}

        /// <summary>
        /// Json return for to get Department dropdown list on basis of branch selection
        /// Added by Rajas on 31 AUGUST 2017
        /// </summary>
        /// <returns></returns>
        //public JsonResult GetDepartment(string Branchid)
        //{
        //    int SelBranchId = 0;
        //    if (!string.IsNullOrEmpty(Branchid))
        //    {
        //        if (Branchid.ToUpper() != "NULL")
        //        {
        //            SelBranchId = Convert.ToInt32(Branchid);
        //        }
        //    }

        //    var DepartmentList = WetosDB.Departments.Where(a => a.BranchId == SelBranchId && (a.MarkedAsDelete == null || a.MarkedAsDelete == 0)).Select(a => new { DepartmentId = a.DepartmentId, DepartmentName = a.DepartmentName }).ToList();

        //    return Json(DepartmentList);
        //}

        /// <summary>
        /// Json return for to get Employee dropdown list on basis of department selection
        /// Added by Rajas on 31 AUGUST 2017
        /// </summary>
        /// <returns></returns>
        public JsonResult GetEmployee(int Companyid, int Branchid, int Departmentid, DateTime Fromdate, DateTime Todate)
        {
            var EmployeeObj = WetosDB.SP_ActiveEmployeeAsOnDate(Fromdate, Todate)
                .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();

            if (Branchid == 0 && Departmentid == 0)
            {
                EmployeeObj = WetosDB.SP_ActiveEmployeeAsOnDate(Fromdate, Todate).Where(a => a.CompanyId == Companyid)
                   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
            }
            else if (Departmentid == 0)
            {
                EmployeeObj = WetosDB.SP_ActiveEmployeeAsOnDate(Fromdate, Todate).Where(a => a.BranchId == Branchid && a.CompanyId == Companyid)
               .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();

            }
            else
            {
                EmployeeObj = WetosDB.SP_ActiveEmployeeAsOnDate(Fromdate, Todate).Where(a => a.BranchId == Branchid && a.CompanyId == Companyid
                    && a.DepartmentId == Departmentid)
                    .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
            }

            return Json(EmployeeObj);
        }

        /// <summary>
        /// logic to process attendence vget dat from comna data and add to daily transaction
        /// it adds all employees and marke them as absent is not present in commanDATA tABLE
        /// </summary>
        /// <param name="id"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <returns></returns>
        public ActionResult ProcessAttendance(DateTime fromdate, DateTime todate, String EmployeeList)
        {
            try
            {
                List<string> ProcessEmpList = new List<string>();
                string ErrorMessage = string.Empty;

                // Added by Rajas on 29 JULY 2017
                DateTime StartTime = DateTime.Now;

                //ADDED BY SHALAKA ON 01ST DEC 2017 TO CALL INDIVIDUAL EMPLOYEE DATA PROCESSING
                // check null
                if (!string.IsNullOrEmpty(EmployeeList))
                {
                    ProcessEmpList = EmployeeList.Split(',').ToList();

                    //Check Count 
                    if (ProcessEmpList.Count > 0)
                    {
                        // get each emp in list
                        foreach (string ProcessEmp in ProcessEmpList)
                        {
                            if (!string.IsNullOrEmpty(ProcessEmp))
                            {
                                // PROCESS INDIVUDUAL DATA
                                int TempProcessEmpId = Convert.ToInt32(ProcessEmp);

                                // COMMENTED BY MSJ ON 23 JAN 2020 START
                                //if (ProcessAttendenceForIndividualEmployee(WetosDB, fromdate, todate, TempProcessEmpId, ref ErrorMessage) == false)
                                //{
                                //    AddAuditTrail(ErrorMessage);

                                //    // ADDED BY MSJ ON 31 JAN 2018 START
                                //    // Added by Rajas on 29 JULY 2017 to calculate POSTING time
                                //    DateTime EndTime = DateTime.Now;
                                //    TimeSpan ExeTime = EndTime.TimeOfDay - StartTime.TimeOfDay;

                                //    AddAuditTrail("POSTING Execution time : " + ExeTime);

                                //    ViewBag.Message = "Error in Data Processing";
                                //    Session["ErrorMessage"] = ViewBag.Message;
                                //    AddAuditTrail("Processing Attendence");
                                //    return RedirectToAction("DataProcessing");
                                //    // ADDED BY MSJ ON 31 JAN 2018 END
                                //}
                                // COMMENTED BY MSJ ON 23 JAN 2020 START
                            }
                        }
                    }
                }
                else
                {
                    ProcessEmpList = null;

                    //new Thread(() =>
                    //{
                    //    Thread.Sleep(30000);
                    //    //Do an advanced looging here which takes a while

                    // CALL STATIC FUNCTION
                    if (ProcessAttendenceEx(WetosDB, fromdate, todate, ProcessEmpList, ref ErrorMessage) == false)
                    {
                        AddAuditTrail(ErrorMessage);

                        // ADDED BY MSJ ON 31 JAN 2018 START
                        // Added by Rajas on 29 JULY 2017 to calculate POSTING time
                        DateTime EndTime = DateTime.Now;
                        TimeSpan ExeTime = EndTime.TimeOfDay - StartTime.TimeOfDay;

                        AddAuditTrail("POSTING Execution time : " + ExeTime);

                        ViewBag.Message = "Error in Data Processing";
                        Session["DataProcessMessage"] = ViewBag.Message;
                        AddAuditTrail("Processing Attendence");
                        return RedirectToAction("DataProcessing");
                        // ADDED BY MSJ ON 31 JAN 2018 END
                    }
                    //}).Start();                    
                }

                // ADDED BY MSJ ON 31 JAN 2018 START
                // Added by Rajas on 29 JULY 2017 to calculate POSTING time
                DateTime TempEndTime = DateTime.Now;
                TimeSpan TempExeTime = TempEndTime.TimeOfDay - StartTime.TimeOfDay;

                AddAuditTrail("POSTING Execution time : " + TempExeTime);

                // ADDED BY MSJ ON 31 JAN 2018 END

                ViewBag.Message = "Data Processing Successful";
                Session["DataProcessMessage"] = ViewBag.Message;
                AddAuditTrail("Processing Attendence");

                return RedirectToAction("DataProcessing");
            }
            catch (System.Exception ex)
            {
                ViewBag.Message = "Error in Processing Attendence";
                Session["DataProcessMessage"] = ViewBag.Message;
                AddAuditTrail("Error in Processing Attendence due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return RedirectToAction("DataProcessing");
            }
        }

        /// <summary>
        /// ADDED CODE BY SHRADDHA FOR GETTITNG WEEK NUMBER OF MONTH FOR GIVEN DATE ON 16 MARCH 2017
        /// </summary>
        /// <param name="date"></param>
        /// <returns></returns>
        public static int GetWeekOfMonth(DateTime date)
        {
            DateTime beginningOfMonth = new DateTime(date.Year, date.Month, 1);

            while (date.Date.AddDays(1).DayOfWeek != CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek)
                date = date.AddDays(1);

            return (int)Math.Truncate((double)date.Subtract(beginningOfMonth).TotalDays / 7f) + 1;
        }

        /// <summary>
        /// ADDED BY SHRADDHA FOR COMP OFF TABLE ENTRY FOR EXTRA HOURS ON 15 MAR 2017 START
        /// </summary>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="ReturnStatusMsg"></param>
        /// <returns></returns>
        public bool MarkCompOffForExtraHrs(DailyTransaction DailyTransactionObj, int FullDayRuleHourInt, int HalfDayRuleHourInt, ref string ReturnStatusMsg)
        {
            bool ReturnStatus = false;
            try
            {
                if (DailyTransactionObj.ExtraHrs != null)
                {
                    //(RuleTransactionList.Where(a=>a.RuleId == 4)
                    // CHECK FOR COMP OFF
                    if (DailyTransactionObj.ExtraHrs.Value.Hour >= HalfDayRuleHourInt && DailyTransactionObj.ExtraHrs.Value.Hour < FullDayRuleHourInt) // NEED TO REPLACE WITH RULE CVALUES ????
                    {
                        bool IsNew = false;
                        CompOff NewCompOffObj = WetosDB.CompOffs.Where(a => a.WoDate == DailyTransactionObj.TranDate && a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                        if (NewCompOffObj == null)
                        {
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table Start
                            NewCompOffObj = new CompOff();
                            IsNew = true;
                        }
                        NewCompOffObj.EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                        NewCompOffObj.WoDate = DailyTransactionObj.TranDate;
                        NewCompOffObj.WrkDayStatus = DailyTransactionObj.Status;
                        NewCompOffObj.DayStatus = "Half Day";
                        NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                        NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                        NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                        NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                        NewCompOffObj.LogOutTime = DailyTransactionObj.LogOut;
                        NewCompOffObj.ShiftId = DailyTransactionObj.ShiftId;
                        NewCompOffObj.TotalHrs = DailyTransactionObj.WorkingHrs;
                        NewCompOffObj.CoHours = DailyTransactionObj.ExtraHrs;
                        if (IsNew == true)
                        {
                            // ADD COMP OFF
                            WetosDB.CompOffs.AddObject(NewCompOffObj);
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table End
                        }
                        //Commented By Shraddha on 10 JAN 2017
                        //DailyTransactionObj.ActualStatus = "COCO*";
                        WetosDB.SaveChanges();
                    }
                    else if (DailyTransactionObj.ExtraHrs.Value.Hour >= FullDayRuleHourInt) // PRESNT FOR FULL DATE
                    {
                        //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table start
                        bool IsNew = false;
                        CompOff NewCompOffObj = WetosDB.CompOffs.Where(a => a.WoDate == DailyTransactionObj.TranDate && a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                        if (NewCompOffObj == null)
                        {
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table Start
                            NewCompOffObj = new CompOff();
                            IsNew = true;
                        }

                        NewCompOffObj.EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                        NewCompOffObj.WoDate = DailyTransactionObj.TranDate;
                        NewCompOffObj.WrkDayStatus = DailyTransactionObj.Status;
                        NewCompOffObj.DayStatus = "Full Day";
                        NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                        NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                        NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                        NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                        NewCompOffObj.LogOutTime = DailyTransactionObj.LogOut;
                        NewCompOffObj.ShiftId = DailyTransactionObj.ShiftId;
                        NewCompOffObj.TotalHrs = DailyTransactionObj.WorkingHrs;
                        NewCompOffObj.CoHours = DailyTransactionObj.ExtraHrs;

                        if (IsNew == true)
                        {
                            // ADD COMP OFF
                            WetosDB.CompOffs.AddObject(NewCompOffObj);
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table End
                        }
                        //Commented By Shraddha on 10 JAN 2017
                        //DailyTransactionObj.ActualStatus = "COCO**"; // NEED TO ASK EVISKA
                        WetosDB.SaveChanges();
                    }

                }
                ReturnStatus = true;
                return ReturnStatus;
            }
            catch (System.Exception E)
            {
                ReturnStatus = false;
                ReturnStatusMsg = E.Message + "_" + (E.InnerException == null ? string.Empty : E.InnerException.Message);
                return ReturnStatus;
            }

        }

        /// <summary>
        /// ADDED CODE FOR PROVIDING FILE UPLOAD VIEW BY SHRADDHA ON 22 DEC  2016
        /// </summary>
        /// <returns></returns>
        public ActionResult FileProcessing()
        {
            return View();
        }

        /// <summary>
        /// ADDED CODE FOR FILE UPLOAD POSTING BY SHRADDHA ON 22 DEC  2016 START
        /// </summary>
        /// <param name="UploadFile"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FileProcessing(HttpPostedFileBase UploadFile)
        {
            if (UploadFile != null && UploadFile.ContentLength > 0)
            {
                try
                {

                    string Attachment = (UploadFile.FileName);

                    string path = Path.Combine(Server.MapPath("~/User_Data/Upload_Files"), Attachment);


                    string fileExtension = Path.GetExtension(UploadFile.FileName);

                    UploadFile.SaveAs(path);

                    //ADDED CODE TO READ FILE DATA AND DUMP INTO COMMONDATA TABLE BY SHRADDHA ON 22 DEC 2016 START
                    string[] PunchData = System.IO.File.ReadAllLines(path);

                    foreach (string PunchRecord in PunchData)
                    {
                        string[] PunchSplitData = PunchRecord.Split('\t');

                        CommanData CommonDataObj = new CommanData();
                        CommonDataObj.EmployeeCode = PunchSplitData[0].Trim();

                        CommonDataObj.CmnTime = Convert.ToDateTime(PunchSplitData[1]);

                        CommonDataObj.CmnDate = new DateTime(CommonDataObj.CmnTime.Year, CommonDataObj.CmnTime.Month, CommonDataObj.CmnTime.Day, 0, 0, 0);

                        CommonDataObj.CompanyId = 1;
                        CommonDataObj.BranchId = 1;
                        WetosDB.CommanDatas.AddObject(CommonDataObj);
                        WetosDB.SaveChanges();

                    }
                    //ADDED CODE TO READ FILE DATA AND DUMP INTO COMMONDATA TABLE BY SHRADDHA ON 22 DEC 2016 END
                    ViewBag.Message = "File Processed Successfully";


                    // AppraisalRatingObj.UploadFileEmployee = Attachment + fileExtension;//Modified By Shraddha on 09 Nov 2016
                }
                catch (System.Exception ex)
                {
                    ViewBag.Message = "Error:" + ex.Message.ToString();

                }

            }
            else
            {
                ViewBag.Message = "You have not specified a file";

            }
            return View();
        }

        /// <summary>
        /// FOR DOCUMENT UPLOAD GIVEN RIGHT TO ADMIN
        /// ADDED BY SHRADDHA ON 15 JAN 2017
        /// <returns></returns>
        public ActionResult UploadDocuments()
        {
            try
            {
                //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 START
                //var sel_messageto = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.MiddleName + " " + a.LastName }).ToList();

                //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 END

                #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
                int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
                //var sel_messageto = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.LastName }).ToList();
                //   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
                var sel_messageto = WetosDB.SP_VwActiveEmployee(EmployeeId).Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " - " + a.FirstName + " " + a.LastName }).ToList(); //ADDED EMPLOYEE CODE BY SHRADDHA ON 15 FEB 2018 
                #endregion

                ViewBag.sel_messageto = new SelectList(sel_messageto, "EmployeeId", "EmployeeName").ToList();

                var DocumentType = WetosDB.DropdownDatas.Where(a => a.TypeId == 12).Select(a => new { TextLbl = a.Text, Name = a.Text }).ToList();

                ViewBag.DocumentTypeVB = new SelectList(DocumentType, "TextLbl", "Name").ToList();

                return View();
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error("Inconsistent data detected. Please Verify!");

                return View();
            }
        }

        /// <summary>
        /// FOR DOCUMENT UPLOAD POST
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult UploadDocuments(UploadDocument UploadDocumentObj, HttpPostedFileBase UploadFile)
        {

            if (UploadFile != null && UploadFile.ContentLength > 0)
            {
                try
                {
                    Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeId == UploadDocumentObj.EmployeeID).FirstOrDefault();

                    // ADDED BY MSJ ON 20 JULY 2017 START
                    // GENERATE 
                    string DocContType = UploadDocumentObj.DocContentType.Replace('/', '_').Replace(' ', '_');

                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 START
                    //string DocumentFileName = EmployeeObj.FirstName.Trim() + "_" + EmployeeObj.MiddleName.Trim() + "_"
                    //+ EmployeeObj.LastName.Trim() + "_" + DocContType + "_" + (DateTime.Now.ToString("yyyy_MM_dd_HHmmss"));
                    string DocumentFileName = (EmployeeObj.FirstName == string.Empty ? "" : EmployeeObj.FirstName.Trim()) + "_" + (EmployeeObj.MiddleName == string.Empty ? "" : EmployeeObj.MiddleName.Trim()) + "_"
                        + (EmployeeObj.LastName == string.Empty ? "" : EmployeeObj.LastName.Trim()) + "_" + DocContType + "_" + (DateTime.Now.ToString("yyyy_MM_dd_HHmmss"));
                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 END
                    DocumentFileName = DocumentFileName.Replace(' ', '_');
                    // ADDED BY MSJ ON 20 JULY 2017 END

                    string Attachment = (DocumentFileName);

                    string path = Path.Combine(Server.MapPath("~/User_Data/Document_Upload"), Attachment);


                    string fileExtension = Path.GetExtension(UploadFile.FileName);

                    UploadFile.SaveAs(path + fileExtension);

                    UploadDocument UploadDocumentTblObj = new UploadDocument();
                    UploadDocumentTblObj.EmployeeID = UploadDocumentObj.EmployeeID;

                    UploadDocumentTblObj.DocContentType = UploadDocumentObj.DocContentType;
                    UploadDocumentTblObj.DocDescription = UploadDocumentObj.DocDescription;
                    UploadDocumentTblObj.DocStatus = UploadDocumentObj.DocStatus;
                    UploadDocumentTblObj.DocType = fileExtension;
                    UploadDocumentTblObj.ExtraDetails = UploadDocumentObj.ExtraDetails;
                    UploadDocumentTblObj.DocFolder = "Document_Upload";
                    UploadDocumentTblObj.DocPath = path;
                    UploadDocumentTblObj.FileName = Attachment + fileExtension;

                    WetosDB.UploadDocuments.AddObject(UploadDocumentTblObj);
                    WetosDB.SaveChanges();

                    ViewBag.Message = "File Processed Successfully";

                }
                catch (System.Exception ex)
                {
                    ViewBag.Message = "Error:" + ex.Message.ToString();

                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 START
                    //var sel_messageto = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.MiddleName + " " + a.LastName }).ToList();


                    #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
                    int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
                    //var sel_messageto = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.LastName }).ToList();
                    //   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
                    var sel_messageto = WetosDB.SP_VwActiveEmployee(EmployeeId).Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.LastName }).ToList();
                    #endregion


                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 END

                    ViewBag.sel_messageto = new SelectList(sel_messageto, "id", "name").ToList();

                    var DocumentType = WetosDB.DropdownDatas.Where(a => a.TypeId == 12).Select(a => new { TextLbl = a.Text, Name = a.Text }).ToList();

                    ViewBag.DocumentTypeVB = new SelectList(DocumentType, "TextLbl", "Name").ToList();
                    return View();

                }
                ViewBag.Message = "Document Uploaded Successful";
                Session["SuccessMessage2"] = ViewBag.Message;

                //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 START
                //var sel_message = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.MiddleName + " " + a.LastName }).ToList();

                //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 END

                #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
                int EmpId = Convert.ToInt32(Session["EmployeeNo"]);
                //var sel_message = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.LastName }).ToList();
                //   .Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();
                var sel_message = WetosDB.SP_VwActiveEmployee(EmpId).Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.LastName }).ToList();
                #endregion


                ViewBag.sel_messageto = new SelectList(sel_message, "id", "name").ToList();

                var DocumentType2 = WetosDB.DropdownDatas.Where(a => a.TypeId == 12).Select(a => new { TextLbl = a.Text, Name = a.Text }).ToList();
                ViewBag.DocumentTypeVB = new SelectList(DocumentType2, "TextLbl", "Name").ToList();
                return RedirectToAction("SelectEmployeeForUploadDocumentList");
            }
            else
            {
                ViewBag.Message = "You have not specified a file";

                //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 START
                //var sel_messageto = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.MiddleName + " " + a.LastName }).ToList();

                //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA AS PER SUGGESTED BY MSJ ON TO HANDLE EMPTY MIDDLE NAME PROBLEM 30 OCT 2017 END

                #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
                int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
                //var sel_messageto = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.LastName }).ToList();
                var sel_messageto = WetosDB.SP_VwActiveEmployee(EmployeeId).Select(a => new { id = a.EmployeeId, name = a.Title + " " + a.FirstName + " " + a.LastName }).ToList();
                #endregion

                ViewBag.sel_messageto = new SelectList(sel_messageto, "id", "name").ToList();

                var DocumentType = WetosDB.DropdownDatas.Where(a => a.TypeId == 12).Select(a => new { TextLbl = a.Text, Name = a.Text }).ToList();
                ViewBag.DocumentTypeVB = new SelectList(DocumentType, "TextLbl", "Name").ToList();
                return View();
            }
        }

        /// <summary>
        /// Updated by Rajas on 27 MARCH 2017
        /// </summary>
        /// <returns></returns>
        public ActionResult SelectEmployeeForUploadDocumentList()
        {
            try
            {


                #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
                int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
                //var sel_messageto = WetosDB.Employees.Select(a => new { id = a.EmployeeId, name = (a.Title == null ? "" : a.Title) + " " + (a.FirstName == null ? "" : a.FirstName) + " " + (a.MiddleName == null ? "" : a.MiddleName) + " " + (a.LastName == null ? "" : a.LastName) }).ToList();
                var sel_messageto = WetosDB.SP_VwActiveEmployee(EmployeeId).Select(a => new { id = a.EmployeeId, name = (a.Title == null ? "" : a.Title) + " " + (a.FirstName == null ? "" : a.FirstName) + " " + (a.MiddleName == null ? "" : a.MiddleName) + " " + (a.LastName == null ? "" : a.LastName) }).ToList();
                #endregion

                ViewBag.sel_messageto = new SelectList(sel_messageto, "id", "name").ToList();
                return View();
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error("Inconsistent data detected. Please verify!");

                return View();
            }
        }

        public ActionResult UploadDocumentList(int EmployeeId)
        {
            List<UploadDocument> UploadDocumentObj = WetosDB.UploadDocuments.Where(a => a.EmployeeID == EmployeeId).ToList();
            return PartialView(UploadDocumentObj);
        }

        public ActionResult DownloadPDF(int id)
        {

            try
            {
                System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();

                //Removed App_Data folder  from file saving location By Shraddha on 13 DEC 2016 because of causing 404 SERVER Error Start

                //Removed App_Data folder  from file saving location By Shraddha on 13 DEC 2016 because of causing 404 SERVER Error End

                //UploadDocument UploadDocumentObj = WetosDB.UploadDocuments.Where(a => a.DocID == id).FirstOrDefault();

                gv.DataBind();

                Response.ClearContent();
                Response.Buffer = true;
                Response.AddHeader("content-disposition", "attachment; filename=.pdf");
                Response.ContentType = "application/pdf";
                Response.Charset = "";
                System.IO.StringWriter sw = new System.IO.StringWriter();
                System.Web.UI.HtmlTextWriter htw = new System.Web.UI.HtmlTextWriter(sw);
                gv.RenderControl(htw);
                Response.Output.Write(sw.ToString());
                Response.Flush();
                Response.End();
            }

            catch (System.Exception)
            {
                //throw;
            }

            return RedirectToAction("Index", "Home");
            //return RedirectToAction("HRDashboard", "Home");
        }


        //ADDED CODE FOR GETTITNG SECOND OR FOURTH SATURDAY OF WEEK
        private static DateTime GetSaturdayByWeek(DateTime dateofMonth, int weekNumber)
        {
            DateTime firstDateofMonth = new DateTime(dateofMonth.Year, dateofMonth.Month, 1);
            DateTime resultDate = CultureInfo.InvariantCulture.Calendar.AddWeeks(firstDateofMonth, weekNumber - 1);
            int day = Convert.ToInt32(resultDate.DayOfWeek) < 6 ? (Convert.ToInt32(resultDate.DayOfWeek) - 6) * -1 : 0;
            return resultDate.AddDays(day);
        }

        //ADDED CODE FOR GETTITNG ENUM VALUES OF DAYS ON 15 MARCH 2017
        public enum GetDateNumberFromDateName
        {
            MONDAY = 1,
            TUESDAY = 2,
            WEDNESDAY = 3,
            THURSDAY = 4,
            FRIDAY = 5,
            SATURDAY = 6,
            SUNDAY = 7
        }

        /// <summary>
        /// ADDED CODE BY SHRADDHA FOR GETTITNG WEEK NUMBER OF MONTH FOR GIVEN DATE ON 15 MARCH 2017
        /// </summary>
        /// <param name="date"></param>
        /// <returns></returns>
        //public static int GetWeekNumberOfMonth(DateTime date)
        //{
        //    date = date.Date;
        //    DateTime firstMonthDay = new DateTime(date.Year, date.Month, 1);
        //    DateTime firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
        //    if (firstMonthMonday > date)
        //    {
        //        firstMonthDay = firstMonthDay.AddMonths(-1);
        //        firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
        //    }
        //    return (date - firstMonthMonday).Days / 7 + 1;
        //}



        //public static int GetWeekNumberOfMonth(this DateTime date)
        //{
        //    DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
        //    int firstDay = (int)firstDayOfMonth.DayOfWeek;
        //    if (firstDay == 0)
        //    {
        //        firstDay = 7;
        //    }
        //    double d = (firstDay + date.Day - 1) / 7.0;
        //    return (int)Math.Ceiling(d);
        //}

        //private static DateTime GetWeekOffdayByWeek(DateTime dateofMonth, string WeekOff2Day, int weekNumber)
        //{

        //    int DayNumber = 0;

        //    if (WeekOff2Day.ToUpper() == "MONDAY")
        //    {
        //        //DayNumber = 1;
        //        GetDateNumberFromDateName Value = GetDateNumberFromDateName.MONDAY;
        //        DayNumber = (int)Value;
        //    }
        //    if (WeekOff2Day.ToUpper() == "TUESDAY")
        //    {
        //        //DayNumber = 2;
        //        GetDateNumberFromDateName Value = GetDateNumberFromDateName.TUESDAY;
        //        DayNumber = (int)Value;
        //    }
        //    if (WeekOff2Day.ToUpper() == "WEDNESDAY")
        //    {
        //        //DayNumber = 3;
        //        GetDateNumberFromDateName Value = GetDateNumberFromDateName.WEDNESDAY;
        //        DayNumber = (int)Value;
        //    }
        //    if (WeekOff2Day.ToUpper() == "THURSDAY")
        //    {
        //        //DayNumber = 4;
        //        GetDateNumberFromDateName Value = GetDateNumberFromDateName.THURSDAY;
        //        DayNumber = (int)Value;
        //    }
        //    if (WeekOff2Day.ToUpper() == "FRIDAY")
        //    {
        //        //DayNumber = 5;
        //        GetDateNumberFromDateName Value = GetDateNumberFromDateName.FRIDAY;
        //        DayNumber = (int)Value;
        //    }
        //    if (WeekOff2Day.ToUpper() == "SATURDAY")
        //    {
        //        //DayNumber = 6;
        //        GetDateNumberFromDateName Value = GetDateNumberFromDateName.SATURDAY;
        //        DayNumber = (int)Value;
        //    }
        //    if (WeekOff2Day.ToUpper() == "SUNDAY")
        //    {
        //        //DayNumber = 7;
        //        GetDateNumberFromDateName Value = GetDateNumberFromDateName.SUNDAY;
        //        DayNumber = (int)Value;
        //    }
        //    DateTime firstDateofMonth = new DateTime(dateofMonth.Year, dateofMonth.Month, 1);
        //    DateTime resultDate = CultureInfo.InvariantCulture.Calendar.AddWeeks(firstDateofMonth, weekNumber - 1);
        //    int day = Convert.ToInt32(resultDate.DayOfWeek) < DayNumber ? (Convert.ToInt32(resultDate.DayOfWeek) - DayNumber) * -1 : 0;
        //    return resultDate.AddDays(day);
        //}

        /// <summary>
        /// FUNCTION ADDED BY SHRADDHA ON 15 MARCH 2017
        /// </summary>
        /// <param name="CurrentDate"></param>
        /// <param name="WEEKOFF2DAY"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="ReturnStatusMsg"></param>
        /// <returns></returns>
        public bool MarkWeekOff2DayPresent(DailyTransaction DailyTransactionObj, int FullDayRuleHourInt, int HalfDayRuleHourInt, ref string ReturnStatusMsg)
        {
            bool ReturnStatus = false;
            try
            {
                if (DailyTransactionObj.Status == "AAAA")
                {
                    // Updated by Rajas on 29 APRIL 2017
                    DailyTransactionObj.Status = "WOWO"; // WWWW

                    WetosDB.SaveChanges();
                }
                else if (DailyTransactionObj.Status != "AAAA")
                {
                    DailyTransactionObj.Status = "WPWP";  // WOWO

                    //CODE ADDED BY SHRADDHA ON 06 MARCH 2017 FOR ADDING WEEK OFF DAY IN COMP OFF TABLE START
                    if (DailyTransactionObj.WorkingHrs != null)
                    {

                        if (DailyTransactionObj.WorkingHrs.Value.Hour >= HalfDayRuleHourInt && DailyTransactionObj.WorkingHrs.Value.Hour < FullDayRuleHourInt) // NEED TO REPLACE WITH RULE CVALUES ????
                        {

                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table Start
                            CompOff NewCompOffObj = new CompOff();
                            NewCompOffObj.EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                            NewCompOffObj.WoDate = DailyTransactionObj.TranDate;
                            NewCompOffObj.WrkDayStatus = DailyTransactionObj.Status;
                            NewCompOffObj.DayStatus = "Half Day";
                            NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                            NewCompOffObj.LogOutTime = DailyTransactionObj.LogOut;
                            NewCompOffObj.ShiftId = DailyTransactionObj.ShiftId;
                            NewCompOffObj.TotalHrs = DailyTransactionObj.WorkingHrs;
                            NewCompOffObj.CoHours = DailyTransactionObj.ExtraHrs;
                            WetosDB.CompOffs.AddObject(NewCompOffObj);
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table End

                            //Commented By Shraddha on 10 JAN 2017
                            //DailyTransactionObj.ActualStatus = "COCO*";
                            WetosDB.SaveChanges();
                        }
                        else if (DailyTransactionObj.WorkingHrs.Value.Hour >= FullDayRuleHourInt)
                        {
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table start
                            CompOff NewCompOffObj = new CompOff();
                            NewCompOffObj.EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                            NewCompOffObj.WoDate = DailyTransactionObj.TranDate;
                            NewCompOffObj.WrkDayStatus = DailyTransactionObj.Status;
                            NewCompOffObj.DayStatus = "Full Day";
                            NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                            NewCompOffObj.LogOutTime = DailyTransactionObj.LogOut;
                            NewCompOffObj.ShiftId = DailyTransactionObj.ShiftId;
                            NewCompOffObj.TotalHrs = DailyTransactionObj.WorkingHrs;
                            NewCompOffObj.CoHours = DailyTransactionObj.ExtraHrs;
                            WetosDB.CompOffs.AddObject(NewCompOffObj);
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table END

                            //Commented By Shraddha on 10 JAN 2017
                            //DailyTransactionObj.ActualStatus = "COCO**";
                            WetosDB.SaveChanges();
                        }

                        //CODE ADDED BY SHRADDHA ON 06 MARCH 2017 FOR ADDING WEEK OFF DAY IN COMP OFF TABLE END

                        // DailyTransaction DailyTransactionObj = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).FirstOrDefault();

                    }

                    WetosDB.SaveChanges();

                }
                ReturnStatus = true;
                return ReturnStatus;
            }
            catch (System.Exception E)
            {
                ReturnStatus = false;
                ReturnStatusMsg = E.Message + "_" + (E.InnerException == null ? string.Empty : E.InnerException.Message);
                return ReturnStatus;
            }
        }


        /// <summary>
        /// CODE TO Provide Right To Employee For Login
        /// ADDED BY SHRADDHA ON 30 JAN 2017
        /// <returns></returns>
        public ActionResult ProvideRightToEmployeeForLogin()
        {


            #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //List<VwActiveEmployee> EmployeeList = WetosDB.VwActiveEmployees.ToList();
            List<SP_VwActiveEmployee_Result> EmployeeList = WetosDB.SP_VwActiveEmployee(EmployeeId).ToList();
            #endregion
            return View(EmployeeList);

        }

        [HttpPost]
        public ActionResult ProvideRightToEmployeeForLogin(List<VwActiveEmployee> EmployeeList, FormCollection FC)
        {

            #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            //List<VwActiveEmployee> EmployeeListObj = WetosDB.VwActiveEmployees.ToList();
            List<SP_VwActiveEmployee_Result> EmployeeListObj = WetosDB.SP_VwActiveEmployee(EmployeeId).ToList();
            #endregion

            return View(EmployeeListObj);

        }

        //###############################  ADDED BY PUSHKAR FOR CHANGE PASSWORD ON 14 APRIL 2017 ##############################################START

        /// <summary>
        /// Updated by Rajas on 12 AUGUST 2017
        /// Track error in audit trail
        /// </summary>
        /// <returns></returns>
        public ActionResult ResetPassword()
        {
            try
            {
                // Active employees only, Updated by Rajas on 29 APRIL 2017
                //var EmployeeName = WetosDB.VwActiveEmployees.Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " " + a.FirstName + " " + a.LastName }).ToList();

                // Updated by Rajas on 31 JULY 2017
                var EmployeeName = WetosDB.SP_UserListForResetPassword().Select(a => new { EmployeeId = a.EmployeeId, EmployeeName = a.EmployeeCode + " - " + a.FirstName + " " + a.LastName }).ToList();
                ViewBag.EmployeeNameList = new SelectList(EmployeeName, "EmployeeId", "EmployeeName").ToList();

                ViewBag.Message = Session["SuccessMessage"];

                AddAuditTrail("Clicked On ResetPassword"); // ADDED on 21 NOV 2016

                return View();
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error in Reset Password fill Employeelist due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View("Error");
            }

        }

        /// <summary>
        /// Added By shraddha on 19 NOV 2016 for providing reset password functionality to Authorized person for selected employee
        /// </summary>
        /// <param name="EmployeeId"></param>
        /// <returns></returns>
        ///
        public ActionResult ResetPasswordForSelectedEmployee(int EmployeeId = 0)
        {
            try
            {
                User EmployeeObj = WetosDB.Users.Where(a => a.EmployeeId == EmployeeId).FirstOrDefault();

                // ADDED BY MSJ ON 11 JAN 2918 START
                Cryptography objcrypt = new Cryptography();
                string password = objcrypt.DecryptPassword(EmployeeObj.Password);
                EmployeeObj.Password = password;
                // ADDED BY MSJ ON 11 JAN 2918 END

                return PartialView(EmployeeObj);
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due in ResetPasswordForSelectedEmployee " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                return View("Error");
            }
        }


        /// <summary>
        /// Added By Shraddha on 19 NOV 2016 for save reset password in login table
        /// </summary>
        /// <param name="EmployeeId"></param>
        /// <returns></returns>
        /// Try catch Added by Rajas on 29 APRIL 2017
        [HttpPost]
        public ActionResult ResetPasswordForSelectedEmployee(User LogintblObj)
        {
            try
            {
                // Added by Rajas on 21 SEP 2017 for password encryption
                Cryptography objcrypt = new Cryptography();

                if (ModelState.IsValid)
                {
                    Session["Login"] = 1;
                    string username = LogintblObj.UserName;
                    string password = LogintblObj.Password;
                    int EmployeeId = Convert.ToInt32(LogintblObj.EmployeeId);

                    User user = WetosDB.Users.Where(u => u.EmployeeId == EmployeeId && u.UserName == username).FirstOrDefault();
                    bool IsNew = false;
                    if (user == null)
                    {
                        IsNew = true;
                        user = new User();
                    }
                    Employee EmployeeObj = WetosDB.Employees.Where(u => u.EmployeeId == EmployeeId).FirstOrDefault();
                    UserRole UserRoleObj = WetosDB.UserRoles.Where(u => u.EmployeeId == EmployeeId).FirstOrDefault();

                    // user.Password = password;
                    user.Password = objcrypt.EncryptPassword(password.Trim());  // Updated by Rajas on 21 SEP 2017 for encrypted password.

                    user.UserName = username;
                    user.MenuId = "1";
                    user.RoleTypeId = UserRoleObj.RoleTypeId;
                    user.CompanyId = EmployeeObj.CompanyId;
                    user.BranchId = EmployeeObj.BranchId;
                    user.EmployeeId = EmployeeObj.EmployeeId;   // Added by Shraddha on 29 JULY 2017
                    if (IsNew == true)
                    {
                        WetosDB.Users.AddObject(user);
                    }
                    WetosDB.SaveChanges();
                    Session["SuccessMessage"] = "You Have Succesfully Reset Password for" + " " + EmployeeObj.EmployeeCode + " " + EmployeeObj.FirstName + " " + EmployeeObj.LastName;
                    AddAuditTrail("Reset Password Successful for Emp. Code" + EmployeeObj.EmployeeCode); // ADDED on 21 NOV 2016
                    return RedirectToAction("ResetPassword", "WetosAdministration");
                }
                else
                {
                    Session["Login"] = 0;
                    // If we got this far, something failed, redisplay form
                    ModelState.AddModelError("", "Please Enter Valid UserName or Password");
                    return View();
                }
            }
            catch (System.Exception ex)
            {
                AddAuditTrail("Error due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message));

                Error("Error in Resetting password. Please try again!");

                return View();
            }
        }

        //###############################  ADDED BY PUSHKAR FOR CHANGE PASSWORD ON 14 APRIL 2017 ##############################################END

        // Posting static
        #region POSTING

        // Flag added by Rajas on 20 MAY 2017
        //static bool IsSchedular = false;

        /// <summary>
        /// NEW POSTING
        /// </summary>
        /// <param name="WetosDB"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <returns></returns>
        public static bool ProcessAttendenceEx(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, List<string> ProcessEmpList, ref string ErrorMessage)
        {
            bool ReturnStatus = false;
            try
            {

                #region COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018

                //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
                // CHECK AUTO SHIFT
                // Check whether AUTO shift is allowed or not // 30
                //string IsAutoShiftAllowed = WetosDB.RuleTransactions.Where(a => a.RuleId == 30).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
                //bool IsAutoShiftFlag = string.IsNullOrEmpty(IsAutoShiftAllowed) == true ? false : (IsAutoShiftAllowed.ToUpper() == "TRUE" ? true : false);
                int RuleAttendanceBase = Convert.ToInt32(WetosDB.RuleTransactions.Where(a => a.RuleId == 33).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault());
                bool IsAutoShiftFlag = false;
                if (RuleAttendanceBase == 4)
                {
                    IsAutoShiftFlag = true;
                }
                //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END

                #endregion

                #region MARK EMPLOYEES INACTIVE IF HAVING LEAVING DATE LESS THAN OR EQUAL TO TODAY
                //CODE ADDED BY SHRADDHA ON 01 NOV 2017
                MarkActiveInctiveEmployee(WetosDB);
                #endregion

                #region  MARK ONLY ABSENT OR PRESENT STATUS, IN, OUT, WRK HOURS, SHIFT (Default as in Employee database) USING Store procedure

                // mark only absent or PRESENT STATUS, IN, OUT, WRK HOURS, SHIFT (GENERAL)
                // UPDATE DAILY TRANSACTION BASED ON COMMAN DATA FOR SELECTED DATE IN DATE RANGE (ALL DAYS) START
                // Need to mark as per shift

                for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
                {

                    //added Logic By Shraddha on 04 JAN 2017 FOR CHECKING IF DATA IS ALREADY PROCESSED OR NOT FOR PRESENT DAY

                    // check COMMON DATA AVAIBALE FOR CURRENT DATE
                    CommanData CommanDataObj = WetosDB.CommanDatas.Where(a => a.CmnDate == CurrentDate).FirstOrDefault();

                    // if (CommanDataObj != null) // DATA PRESNT IN COMMON DATA FOR DATE
                    //{
                    // check DAILY TRAN DATA AVAIBALE FOR CURRENT DATE
                    DailyTransaction DailyTransactionObj = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).FirstOrDefault();

                    if (CommanDataObj == null)
                    {


                        // MODFIED BY SHALAKA ON 11 DEC 2017 START
                        //If Employees are Selected for Data processing 
                        if (ProcessEmpList != null)
                        {

                        }
                        else //For All Employees Attendance Data Posting 
                        {
                            if (IsAutoShiftFlag) // AUTO SHIFT
                            {
                                WetosDB.CommandTimeout = 2000;
                                //WetosDB.SPPostingprocessForALLEmployeeForAutoShiftWithNS(CurrentDate); // ADDED BY MSJ ON 28 JAN 2018
                                WetosDB.SPPostingprocessForAutoShiftWithNS(CurrentDate);
                            }
                            else
                            {
                                //WetosDB.SP_UPDATELeaveBalanceBeforePosting(CurrentDate);
                                //WetosDB.SPPostingprocessForAllBranchAndPrevDayForShiftG(CurrentDate);  // Updated by Rajas on 9 JUNE 2017
                                WetosDB.SPPostingprocess(CurrentDate);
                            }
                        }
                        // MODFIED BY SHALAKA ON 11 DEC 2017 END
                    }
                    else
                    {
                        string SwipeFlag = WetosDB.Employees.Where(a => a.EmployeeCode == CommanDataObj.EmployeeCode).Select(a => a.SwipeFlag).FirstOrDefault();

                        if (SwipeFlag != "N")
                        {
                            if (IsAutoShiftFlag) // AUTO SHIFT
                            {
                                WetosDB.CommandTimeout = 2000;
                                //WetosDB.SPPostingprocessForAllBranchAndPrevDayForAutoShift(CurrentDate);  // ADDED BY MSJ ON 15 JAN 2018
                                WetosDB.SPPostingprocessForALLEmployeeForAutoShiftWithNS(CurrentDate); // ADDED BY MSJ ON 28 JAN 2018
                            }
                            else
                            {
                                // WetosDB.SP_UPDATELeaveBalanceBeforePosting(CurrentDate); //MODIFIED BY PUSHKAR ON 22 MARCH 2019
                                WetosDB.SPPostingprocessForAllBranchAndPrevDayForShiftG(CurrentDate);  // Updated by Rajas on 9 JUNE 2017
                            }
                            // }  // COMMENTED BY MSJ ON 23 JAN 2020
                            // MODFIED BY SHALAKA ON 11 DEC 2017 END
                        }
                    }
                }
                #endregion

                //return true;
                //// Added by Rajas on 5 AUGUST 2017 to Save Previous Late/Early count 
                //// If for today's processing late/early entry is NULL then update LateCount as previous late/early count value
                //int PreviousLateCount = 0;
                //int PrevEarlyCount = 0;

                //ADDED BY NANDINI ON 21 JULY 2020 START
                try
                {
                    List<LeaveApplication> LeaveDedList = WetosDB.LeaveApplications.Where(a => a.EffectiveDate >= fromdate && a.EffectiveDate <= todate
                        && a.Purpose.Contains("Deduction dated")
                        && a.MarkedAsDelete == 0).ToList();

                    foreach (LeaveApplication LeaveDedListEntry in LeaveDedList)
                    {
                        LeaveDedListEntry.MarkedAsDelete = 1;
                        WetosDB.SaveChanges();

                        LeaveBalance LeaveBalanceObj = WetosDB.LeaveBalances.Where(a => a.EmployeeId == LeaveDedListEntry.EmployeeId && a.LeaveType == LeaveDedListEntry.LeaveType).FirstOrDefault();
                        if (LeaveBalanceObj != null)
                        {
                            var UpdatedBalance = LeaveBalanceObj.CurrentBalance + LeaveDedListEntry.ActualDays;  // AppliedDays
                            var LeaveUsedObj = (LeaveBalanceObj.LeaveUsed == null ? 0 : LeaveBalanceObj.LeaveUsed) + LeaveDedListEntry.ActualDays;

                            LeaveBalanceObj.CurrentBalance = UpdatedBalance;
                            LeaveBalanceObj.LeaveUsed = LeaveUsedObj;
                            LeaveBalanceObj.PreviousBalance = LeaveBalanceObj.PreviousBalance - LeaveDedListEntry.ActualDays;
                            WetosDB.SaveChanges();
                        }
                    }
                }
                catch (Exception)
                {

                    //throw;
                }
                //ADDED BY NANDINI ON 21 JULY 2020 END

                #region Process attendance

                // Added by Rajas on 7 AUGUST 2017
                PostingFlagModel PostingFlagModelObj = new PostingFlagModel();

                List<string> ErrorInEmployee = new List<string>();  // Added by Rajas on 18 AUGUST 2017

                string ReturnMessage = string.Empty;
                string UpdatedStatus = string.Empty;
                string NewStatus = string.Empty;

                // Processing for Every dayodpr
                for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
                {
                    #region GET ALL REQUIRED LIST

                    List<DailyTransaction> DailyTransactionListForCurrentDayList = new List<DailyTransaction>();
                    List<HoliDay> HolidayList = new List<HoliDay>();
                    List<DeclaredHoliday> DeclaredHolidayList = new List<DeclaredHoliday>();
                    List<DeclaredHoliday> WorkOnDeclaredHolidayCompOffList = new List<DeclaredHoliday>(); // CODE ADDED BY SHRADDHA ON 14 AR 2018
                    List<WetosDB.ExceptionEntry> ExceptionList = new List<WetosDB.ExceptionEntry>();
                    List<RuleTransaction> AllRuleTransactionList = new List<RuleTransaction>();
                    List<SP_POSTINGGetRequiredEmployeeDetails_Result> RequiredEmpDetListObj = new List<SP_POSTINGGetRequiredEmployeeDetails_Result>();
                    List<CondoneTrn> CondoneTrnList = new List<CondoneTrn>();

                    try
                    {
                        // GET DAILY TRAN LIST FOR CURRENT DATE
                        DailyTransactionListForCurrentDayList = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate
                            && (string.IsNullOrEmpty(a.Lock) ? false : a.Lock.ToUpper() == "N" ? false : true) == false).ToList();

                        // GET HOLIDAY FOR ALL BRANCHES AND COMPANY
                        HolidayList = WetosDB.HoliDays.Where(a => a.FromDate == CurrentDate && a.MarkedAsDelete == 0).ToList();

                        // GET DECLARED HOLIDAY
                        ///DeclaredHolidayList = WetosDB.DeclaredHolidays.Where(a => a.HolidayDate == CurrentDate && a.MarkASDelete != 1).ToList();
                        DeclaredHolidayList = WetosDB.DeclaredHolidays.Where(a => a.HolidayDate == CurrentDate).ToList(); // ADDED BY MSJ ON 21 JAN 2019

                        // GET DECLARED HOLIDAY UTILIZED LIST
                        //WorkOnDeclaredHolidayCompOffList = WetosDB.DeclaredHolidays.Where(a => a.CompWorkDay1 == CurrentDate && a.MarkASDelete != 1).ToList(); // CODE ADDED BY SHRADDHA ON 14 MAR 2018
                        WorkOnDeclaredHolidayCompOffList = WetosDB.DeclaredHolidays.Where(a => a.CompWorkDay1 == CurrentDate).ToList();  // ADDED BY MSJ ON 21 JAN 2019

                        // GET Exception List
                        // Updated by Rajas on 17 AUGUST 2017 for sanctioned status only
                        //ExceptionList = WetosDB.Exceptions.Where(a => a.ExceptionDate == CurrentDate && a.MarkedAsDelete == 0 && a.Status == "2").ToList();

                        // Above line commented and below line added by Rajas on 26 SEP 2017
                        // Comparison from status removed instead comparison from StatusId
                        ExceptionList = WetosDB.ExceptionEntries.Where(a => a.ExceptionDate == CurrentDate && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                        // GET ALL RULES
                        AllRuleTransactionList = WetosDB.RuleTransactions.ToList();

                        // GET Active employe list along with required group details 
                        // Added by Rajas on 4 AUGUST 2017
                        List<SP_POSTINGGetRequiredEmployeeDetails_Result> TEMPRequiredEmpDetListObj = new List<SP_POSTINGGetRequiredEmployeeDetails_Result>();
                        TEMPRequiredEmpDetListObj = WetosDB.SP_POSTINGGetRequiredEmployeeDetails().ToList();

                        //ADDED BY SHALAKA ON 01ST DEC 2017 IF EMPLOYEES ARE SELECTED FOR DATA PROCESSING
                        //If Employees are Selected for Data processing 
                        if (ProcessEmpList != null)
                        {
                            if (ProcessEmpList.Count > 0)
                            {
                                //ADDED BY SHALAKA ON 01ST DEC 2017 FOR SINGLE OR MULTIPLE EMPOLYEES --- START 
                                foreach (string ProcessEmp in ProcessEmpList)
                                {
                                    int EmpID = Convert.ToInt32(ProcessEmp);

                                    RequiredEmpDetListObj = TEMPRequiredEmpDetListObj.Where(a => a.EmployeeId == EmpID).ToList();
                                }
                            }
                            else
                            {
                                //IF EMPLOYEES ARE NOT SELECTED THEN USE RequiredEmpDetListObj
                                TEMPRequiredEmpDetListObj = RequiredEmpDetListObj;
                            }
                        }
                        else //ADDED BY SHALAKA ON 01ST DEC 2017 IF EMPLOYEES ARE SELECTED FOR DATA PROCESSING ***
                        {
                            RequiredEmpDetListObj = TEMPRequiredEmpDetListObj;
                        }
                        //ADDED BY SHALAKA ON 01ST DEC 2017 FOR SINGLE OR MULTIPLE EMPOLYEES --- END

                        // GET CONDONE ENTRY
                        CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
                    }
                    catch (System.Exception ex)
                    {
                        ErrorMessage = "Error in getting all List due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);

                        return ReturnStatus = false;
                    }

                    #endregion GET ALL REQUIRED LIST

                    #region PROCESS ATTENDANCE FOR EVERY DAILY TRANSACTION ENTRY

                    foreach (DailyTransaction DailyTransactionObj in DailyTransactionListForCurrentDayList) // SP
                    {
                        try
                        {
                            SP_LeaveTableData_Result AvailableLeaveBalanceLL = WetosDB.SP_LeaveTableData(DailyTransactionObj.EmployeeId)
                            .Where(a => a.LeaveType.Trim() == "CL").FirstOrDefault();
                            // ADDED BY MSJ ON 17 AUG 2017 START
                            // IS RECORD LOCKED ?
                            bool LockedData = string.IsNullOrEmpty(DailyTransactionObj.Lock) ? false : DailyTransactionObj.Lock.ToUpper() == "N" ? false : true;

                            if (!LockedData) // START OF LOCK CONDITION // ADDED BY MSJ ON 17 AUG 2017
                            {
                                // ADDED BY MSJ ON 17 AUG 2017 END

                                // GET EMP GROUP FOR EMP in Daily transaction
                                int EmployeeGroupIdObj = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                                    .Select(a => a.EmployeeGroupId).FirstOrDefault();

                                // EMP INFO
                                var EmployeeObj = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                    && a.JoiningDate <= CurrentDate).FirstOrDefault();

                                if (EmployeeObj != null)
                                {
                                    // Get companyId
                                    int EmployeeCompanyId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                                        .Select(a => a.CompanyId).FirstOrDefault();

                                    // Get BranchId
                                    int EmployeeBranchId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                                        .Select(a => a.BranchId).FirstOrDefault();

                                    // GET List of all rules assigned to Employee Group
                                    List<RuleTransaction> RuleTransactionList = AllRuleTransactionList.Where(a => a.EmployeeGroupId == EmployeeGroupIdObj).ToList();

                                    //SHIFT, Check HoliDay, WeeklyOff, CondoneEntry,CompOff,Adjusment Or Mannual Correction

                                    #region COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018
                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
                                    // CHECK AUTO SHIFT
                                    // Check whether AUTO shift is allowed or not // 30
                                    //string IsAutoShiftAllowed = WetosDB.RuleTransactions.Where(a => a.RuleId == 30).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
                                    //bool IsAutoShiftFlag = string.IsNullOrEmpty(IsAutoShiftAllowed) == true ? false : (IsAutoShiftAllowed.ToUpper() == "TRUE" ? true : false);
                                    RuleAttendanceBase = Convert.ToInt32(RuleTransactionList.Where(a => a.RuleId == 33).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault());
                                    IsAutoShiftFlag = false;
                                    if (RuleAttendanceBase == 4)
                                    {
                                        IsAutoShiftFlag = true;
                                    }
                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
                                    #endregion

                                    #region MARK EXCEPTION ENTRY (Why List ?)
                                    List<WetosDB.ExceptionEntry> ExceptionListForSelectedEmployees = new List<ExceptionEntry>(); // CODE ADDED BY SHRADDHA ON 15 MAR 2018
                                    if (ExceptionList.Count > 0)
                                    {
                                        // Removed List obj for exception
                                        // Updated by Rajas on 4 AUGUST 2017
                                        //var ExceptionListForSelectedEmployees = ExceptionList.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                                        ExceptionListForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).ToList();

                                        if (ExceptionListForSelectedEmployees.Count > 0)
                                        {
                                            foreach (WetosDB.ExceptionEntry ExceptionObjForSelectedEmployee in ExceptionListForSelectedEmployees)
                                            {
                                                DailyTransactionObj.Login = ExceptionObjForSelectedEmployee.LoginTime;
                                                DailyTransactionObj.LogOut = ExceptionObjForSelectedEmployee.LogOutTime;

                                                // ADDED BY MSJ ON 07 DEC 2019
                                                //DailyTransactionObj.Status ?
                                                //string WorkingHrsString = (ExceptionObjForSelectedEmployee.LogOutTime.TimeOfDay - ExceptionObjForSelectedEmployee.LoginTime.TimeOfDay).ToString();
                                                string WorkingHrsString = (ExceptionObjForSelectedEmployee.LogOutTime - ExceptionObjForSelectedEmployee.LoginTime).ToString();

                                                // ADDED BY MSJ ON 07 DEC 2019
                                                try
                                                {
                                                    DailyTransactionObj.WorkingHrs = Convert.ToDateTime(WorkingHrsString);
                                                }
                                                catch (Exception)
                                                {
                                                }

                                                DailyTransactionObj.Status = StatusConstants.FullDayPresentStatus;
                                                WetosDB.SaveChanges();

                                                PostingFlagModelObj.IsExceptionEntry = true;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region DEFINE VARIABLES

                                    Shift ShiftObjForCurrentEmployee = new Shift(); // ADDED BY MSJ ON 28 JAN 2018
                                    GlobalSetting GlobalSettingObj = new GlobalSetting(); // ADDED BY MSJ ON 28 JAN 2018
                                    bool IsHalfDay = false;  // IsSaturday
                                    DateTime Intime = DailyTransactionObj.Login;
                                    DateTime OutTime = DailyTransactionObj.LogOut;
                                    // Added by Rajas on 14 JUNE 2017
                                    string Today = Intime.DayOfWeek.ToString();

                                    //DailyTransactionObj.ShiftId = 
                                    //string ShiftForTekman = WetosDB.Employees.Where(a => a.EmployeeId = DailyTransactionObj.EmployeeId).Max().Select(a => a.DefaultShift).FirstOrDefault();
                                    string ShiftForTekman = EmployeeObj.DefaultShift;
                                    DailyTransactionObj.ShiftId = ShiftForTekman;

                                    #region CODE ADDED BY SHRADDHA ON 12 MARCH 2018 TAKEN FROM LNT REALITY CODE FOR WEEKLY HALF DAY START
                                    // Added by Rajas on 8 AUGUST 2017 START
                                    string ShiftDay = Convert.ToString(DailyTransactionObj.TranDate.DayOfWeek).ToUpper().Trim();
                                    // Added by Rajas on 16 AUGUST 2017 for marking Half Day shift as per Employee table value
                                    string WeeklyHalfDay = EmployeeObj.WeeklyHalfDay == null ? string.Empty : EmployeeObj.WeeklyHalfDay.ToUpper().Trim();

                                    // Updated by Rajas on 16 AUGUST 2017
                                    if (ShiftDay == WeeklyHalfDay) // MOVE TO GLOBAL SETTING ---> if (ShiftDay == "SATURDAY")
                                    {
                                        IsHalfDay = true;    // IsSaturday
                                    }
                                    #endregion

                                    // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
                                    RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

                                    // Get rule whether to deduct attendance when employee is late beyond allowed limit
                                    // Added by Rajas on 20 SEP 2017
                                    string RuleForLateCountAttDeduction = RuleTransactionList.Where(a => a.RuleId == 14)
                                        .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

                                    // Get rule whether to deduct leave when employee is late beyond allowed limit
                                    // Added by Rajas on 20 SEP 2017
                                    string RuleForLateCountLeaveDeduction = RuleTransactionList.Where(a => a.RuleId == 13)
                                        .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

                                    // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
                                    RuleTransaction RuleForEarlyCount = RuleTransactionList.Where(a => a.RuleId == 46).FirstOrDefault();

                                    // Get rule whether to deduct attendance when employee is early beyond allowed limit
                                    // Added by Rajas on 20 SEP 2017
                                    string RuleForEarlyCountAttDeduction = RuleTransactionList.Where(a => a.RuleId == 14)
                                        .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

                                    // Get rule whether to deduct leave when employee is early beyond allowed limit
                                    // Added by Rajas on 20 SEP 2017
                                    string RuleForEarlyCountLeaveDeduction = RuleTransactionList.Where(a => a.RuleId == 13)
                                        .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

                                    // Get value for deduction in case of attendance or leave, if employee crossed early count limit
                                    // Added by Rajas on 20 SEP 2017
                                    string NoOfDaysDeduct = RuleTransactionList.Where(a => a.RuleId == 17).Select(a => a.Formula).FirstOrDefault();
                                    int DeductionDay = 0;
                                    if (NoOfDaysDeduct != null)
                                    {
                                        // Updated by Rajas on 25 SEP 2017
                                        // Case 3 not exist so, default case will be executed.
                                        DeductionDay = NoOfDaysDeduct == "0.5" ? 3 : Convert.ToInt32(NoOfDaysDeduct);
                                    }

                                    //-----------------------Added by Rajas on 28 SEP 2017 START----------------------------------

                                    // Get ',' seperated Leave codes as value for deduction
                                    string DeductLeaveCode = RuleTransactionList.Where(a => a.RuleId == 15).Select(a => a.Formula.Trim()).FirstOrDefault();

                                    #region SET IsFlexiShiftAllowed BASED UPON ATTENDNACE BASED
                                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 09 FEB 2018
                                    // Check whether Flexi shift is allowed or not
                                    string IsFlexiShiftAllowed = RuleTransactionList.Where(a => a.RuleId == 27).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault() == null ? "" : RuleTransactionList.Where(a => a.RuleId == 27).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
                                    //string IsFlexiShiftAllowed = "FALSE";
                                    //if (RuleAttendanceBase == 3)
                                    //{
                                    //    IsFlexiShiftAllowed = "TRUE";
                                    //}

                                    #endregion
                                    #endregion

                                    #region ATTENDANCE BASE TYPE

                                    RuleTransaction AttendanceBaseRule = RuleTransactionList.Where(a => a.RuleId == 33).FirstOrDefault();
                                    //ADDED BY PUSHKAR ON 08 JAN 2019 FOR SHIFT BASED ON RULES EMP GRP WISE ONLY !@#$%^
                                    if (AttendanceBaseRule != null)
                                    {
                                        RuleAttendanceBase = Convert.ToInt32(AttendanceBaseRule.Formula.ToUpper().Trim());
                                    }
                                    else
                                    {
                                        RuleAttendanceBase = Convert.ToInt32(WetosDB.RuleTransactions.Where(a => a.RuleId == 33).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault());
                                    }

                                    #region POSTING SHIFT TYPES
                                    //1 - DEFAULT SHIFT
                                    //2 - SHIFT SCHEDULE
                                    //3 - FLEXY SHIFT
                                    //4 - AUTO SHIFT
                                    #endregion

                                    if (RuleAttendanceBase == 3 || IsFlexiShiftAllowed.Trim().ToUpper() == "TRUE") // 3 - FLEXY SHIFT
                                    {
                                        #region CONSIDER FLEXY SHIFT

                                        string WorkingHoursAsPerShift = RuleTransactionList.Where(a => a.RuleId == 12).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
                                        if (IsFlexiShiftAllowed == "TRUE")
                                        {
                                            if (WorkingHoursAsPerShift != "TRUE")
                                            {
                                                string WorkHoursHalfDayLimit = RuleTransactionList.Where(a => a.RuleId == 29).Select(a => a.Formula).FirstOrDefault();
                                                string WorkHoursFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 28).Select(a => a.Formula).FirstOrDefault();

                                                if (WorkHoursHalfDayLimit != null && WorkHoursFullDayLimit != null)
                                                {
                                                    DateTime HalfDayLimit = Convert.ToDateTime(WorkHoursHalfDayLimit);
                                                    DateTime FullDayLimit = Convert.ToDateTime(WorkHoursFullDayLimit);

                                                    // ADDED BY MSJ IN 02 APR 2018 // ADDED WORKING HOURS NULL VL
                                                    if (DailyTransactionObj.WorkingHrs != null) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                                                    {
                                                        if (HalfDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
                                                        {
                                                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                        }
                                                        else if ((HalfDayLimit.TimeOfDay < DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
                                                            && (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay))
                                                        {
                                                            DailyTransactionObj.Status = StatusConstants.SecondHalfAbsentStatus;
                                                        }
                                                        else if (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay) //MODIFIED BY PUSHKAR ON 4 APRIL
                                                        {
                                                            string EarlyTime = (FullDayLimit.TimeOfDay - DailyTransactionObj.WorkingHrs.Value.TimeOfDay).ToString();

                                                            string Earlystring = DailyTransactionObj.WorkingHrs.Value.ToShortDateString() + " " + EarlyTime;

                                                            DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);

                                                            int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                                            int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                                            // Get Max early count from existing
                                                            int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions
                                                                .Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                                       && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear
                                                                       && a.TranDate < DailyTransactionObj.TranDate)
                                                                       .Select(a => a.EarlyCount).Max());

                                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;  // Update early count

                                                            if (RuleForEarlyCount != null)
                                                            {
                                                                int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

                                                                if (MaxearlyCountForEmployee == 0)
                                                                {
                                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                                }

                                                                else
                                                                {
                                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                                }

                                                                WetosDB.SaveChanges();

                                                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                                                // Code in this region modified by Rajas on 20 SEP 2017 START

                                                                if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "FALSE")
                                                                {
                                                                    // Added by Rajas on 12 AUGUST 2017 
                                                                    // Global setting value base deduction 
                                                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                                                    {
                                                                        if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                        {
                                                                            switch (DeductionDay)
                                                                            {
                                                                                case 0:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                case 1:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                default:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;
                                                                            }

                                                                        }
                                                                    }
                                                                    else   // Deduct half day after every allowed late count 
                                                                    {
                                                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
                                                                        {
                                                                            switch (DeductionDay)
                                                                            {
                                                                                case 0:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                case 1:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                default:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;
                                                                            }
                                                                        }
                                                                        else // Updated by Rajas on 1 SEP 2017
                                                                        {
                                                                            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                            {
                                                                                switch (DeductionDay)
                                                                                {
                                                                                    case 0:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;

                                                                                    case 1:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;

                                                                                    default:
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
                                                                {
                                                                    string[] LeaveCodes = DeductLeaveCode.Split(',');
                                                                    int Count = LeaveCodes.Length;

                                                                    // Check balance for First leave type
                                                                    for (int i = 0; i <= Count; i++)
                                                                    {
                                                                        string LeaveType = LeaveCodes[i].Trim();

                                                                        LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                                            && a.LeaveType == LeaveType).FirstOrDefault();

                                                                        if (AvailableLeaveBalance != null)
                                                                        {
                                                                            if (AvailableLeaveBalance.CurrentBalance > 0)
                                                                            {
                                                                                double Deduction = Convert.ToDouble(NoOfDaysDeduct);
                                                                                if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                                {
                                                                                    // Deduct balance for Leave
                                                                                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                                                                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                                                                    // Update entry in DailyTransaction for Deducted leave type
                                                                                    DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                                                                    DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                                                                    //WetosDB.SaveChanges();
                                                                                }

                                                                                break; // If deduction is done then stop loop.
                                                                            }
                                                                        }

                                                                    }
                                                                }
                                                                else  // Early mark only. No deduction
                                                                {
                                                                    // Updated by Rajas on 28 SEP 2017
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                    DailyTransactionObj.Remark = "Early";
                                                                }

                                                                // Code in this region modified by Rajas on 20 SEP 2017 END

                                                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                                            }

                                                            WetosDB.SaveChanges();
                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.Status = StatusConstants.FullDayPresentStatus;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region FIND SHIFT
                                        if (RuleAttendanceBase == 1)
                                        {
                                            //ADDED IF CONDITION BY SHRADDHA ON 15 MAR 2018 AND ADDED EARLIER CODE IN ELSE PART
                                            //ADDED BY PUSHKAR TO HANDLE EXCEPTION ENTRY FOR SHIFT SCHEDULE ON 21 FEB 2020
                                            if (ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Count() > 0)
                                            {
                                                #region IF EXCEPTION ENTRY AVAILABLE FOR SELECTED DATE
                                                ExceptionEntry ExceptionObjForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                                                if (ExceptionObjForSelectedEmployees != null)
                                                {
                                                    DailyTransactionObj.ShiftId = ExceptionObjForSelectedEmployees.ShiftId;
                                                    WetosDB.SaveChanges();
                                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region CONSIDER SHIFT FROM DEFAULT SHIFT
                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift && a.BranchId == EmployeeObj.BranchId).FirstOrDefault();
                                                if (ShiftObjForCurrentEmployee != null)
                                                {
                                                    DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                                    WetosDB.SaveChanges();
                                                }
                                                #endregion
                                            }
                                        }
                                        else if (RuleAttendanceBase == 2)
                                        {
                                            //ADDED IF CONDITION BY SHRADDHA ON 15 MAR 2018 AND ADDED EARLIER CODE IN ELSE PART
                                            //ADDED BY PUSHKAR TO HANDLE EXCEPTION ENTRY FOR SHIFT SCHEDULE ON 21 FEB 2020 !@#$%^
                                            if (ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Count() > 0)
                                            {
                                                #region IF EXCEPTION ENTRY AVAILABLE FOR SELECTED DATE
                                                ExceptionEntry ExceptionObjForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                                                if (ExceptionObjForSelectedEmployees != null)
                                                {
                                                    DailyTransactionObj.ShiftId = ExceptionObjForSelectedEmployees.ShiftId;
                                                    WetosDB.SaveChanges();
                                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                                                }
                                                #endregion
                                            }
                                            else//!@#$%^
                                            {
                                                #region CONSIDER SHIFT SCHEDULE
                                                ShiftSchedule ShiftScheduleObj2 = WetosDB.ShiftSchedules.Where(a => a.ShiftMonth == CurrentDate.Month
                                                && a.ShiftYear == CurrentDate.Year && a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                                                if (ShiftScheduleObj2 != null)
                                                {
                                                    string ShiftfromShiftTbl = "";
                                                    switch (CurrentDate.Day)
                                                    {
                                                        case 1:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day1;
                                                            break;
                                                        case 2:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day2;
                                                            break;
                                                        case 3:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day3;
                                                            break;
                                                        case 4:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day4;
                                                            break;
                                                        case 5:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day5;
                                                            break;
                                                        case 6:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day6;
                                                            break;
                                                        case 7:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day7;
                                                            break;
                                                        case 8:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day8;
                                                            break;
                                                        case 9:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day9;
                                                            break;
                                                        case 10:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day10;
                                                            break;
                                                        case 11:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day11;
                                                            break;
                                                        case 12:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day12;
                                                            break;
                                                        case 13:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day13;
                                                            break;
                                                        case 14:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day14;
                                                            break;
                                                        case 15:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day15;
                                                            break;
                                                        case 16:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day16;
                                                            break;
                                                        case 17:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day17;
                                                            break;
                                                        case 18:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day18;
                                                            break;
                                                        case 19:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day19;
                                                            break;
                                                        case 20:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day20;
                                                            break;
                                                        case 21:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day21;
                                                            break;
                                                        case 22:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day22;
                                                            break;
                                                        case 23:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day23;
                                                            break;
                                                        case 24:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day24;
                                                            break;
                                                        case 25:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day25;
                                                            break;
                                                        case 26:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day26;
                                                            break;
                                                        case 27:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day27;
                                                            break;
                                                        case 28:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day28;
                                                            break;
                                                        case 29:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day29;
                                                            break;
                                                        case 30:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day30;
                                                            break;
                                                        case 31:
                                                            ShiftfromShiftTbl = ShiftScheduleObj2.Day31;
                                                            break;
                                                        default:
                                                            break;
                                                    }

                                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == ShiftfromShiftTbl).FirstOrDefault();
                                                    if (ShiftObjForCurrentEmployee != null)
                                                    {
                                                        DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                                        WetosDB.SaveChanges();
                                                    }

                                                }


                                                #endregion
                                            }
                                        }
                                        else if (RuleAttendanceBase == 4) // 4- AUTO SHIFT
                                        {
                                            //ADDED IF CONDITION BY SHRADDHA ON 15 MAR 2018 AND ADDED EARLIER CODE IN ELSE PART
                                            //if (ExceptionList.Count > 0)
                                            //{
                                            //    #region IF EXCEPTION ENTRY AVAILABLE FOR SELECTED DATE
                                            //    ExceptionEntry ExceptionObjForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                                            //    if (ExceptionObjForSelectedEmployees != null)
                                            //    {
                                            //        DailyTransactionObj.ShiftId = ExceptionObjForSelectedEmployees.ShiftId;
                                            //        WetosDB.SaveChanges();
                                            //        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                                            //    }
                                            //    #endregion
                                            //}
                                            //else
                                            //{
                                            #region GET SHIFT  FROM CLOSEST TIME

                                            DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                                && a.BranchId == EmployeeBranchId
                                                && !a.ShiftName.ToUpper().Contains("HALF DAY")
                                                //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                                                //&& a.ShiftCode == EmployeeObj.DefaultShift
                                                ).Select(a => a.FirstInTime).ToArray();

                                            long min = long.MaxValue;

                                            DateTime ClosestTime = new DateTime();

                                            foreach (DateTime CurrentDateTime in FirstInTimeArray)
                                            {
                                                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
                                                long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
                                                if (TempDIff < min)
                                                {
                                                    min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
                                                    ClosestTime = CurrentDateTime;
                                                }
                                                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
                                            }


                                            DateTime NSTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 21, 30, 00); //CHANGED BY PUSHKAR FOR NEROLAC ON 21 FEB 2020
                                            if (Intime.TimeOfDay > NSTime.TimeOfDay)
                                            {
                                                // NS ISSUE FIXED BY MSJ ON 29 JAN 2018  !@#$%^
                                                DailyTransactionObj.ShiftId = WetosDB.Shifts.Where(a => a.ShiftType.ToUpper().Contains("THIRD")
                                                    || a.ShiftType.ToUpper().Contains("NIGHT")).Select(a => a.ShiftCode).FirstOrDefault();//"C";

                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                                            }
                                            else if (DailyTransactionObj.TranDate.Date < DailyTransactionObj.Login.Date) // NS LOGIC ADDED BY PUSHKAR ON 09 DEC 2019
                                            {
                                                DailyTransactionObj.ShiftId = WetosDB.Shifts.Where(a => a.ShiftType.ToUpper().Contains("THIRD")
                                                   || a.ShiftType.ToUpper().Contains("NIGHT")).Select(a => a.ShiftCode).FirstOrDefault();//"C";

                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                                            }
                                            else //!@#$%^
                                            {
                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                                    && a.BranchId == EmployeeBranchId
                                                    //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                                                     && a.FirstInTime == ClosestTime && !a.ShiftName.ToUpper().Contains("HALF DAY")).FirstOrDefault(); //ADDED BY PUSHKAR ON 10 DEC 2019
                                            }

                                            //if (ShiftObjForCurrentEmployee != null)
                                            //{
                                            //    DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                            //    WetosDB.SaveChanges();
                                            //}

                                            //COMMENTED ABOVE CODE AND ADDED NEW CODE BY PUSHKAR ON 10 DEC 2019 FOR SAT HALF DAY SHIFT  !@#$%^
                                            if (ShiftObjForCurrentEmployee != null)
                                            {
                                                if (IsHalfDay == true)
                                                {
                                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftName.ToUpper().Contains("HALF DAY")
                                                        && a.BranchId == EmployeeBranchId).FirstOrDefault();

                                                }

                                                DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                                WetosDB.SaveChanges();
                                            }

                                            #endregion // COMMON CODE
                                            //}
                                        }
                                        #endregion

                                        #region CONSIDER WORKING HOURS FROM SHIFT START TIME AS PER RULE
                                        RuleTransaction ConsiderWorkingHoursFromShiftStartTime = RuleTransactionList.Where(a => a.RuleId == 31).FirstOrDefault();
                                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId && a.BranchId == EmployeeObj.BranchId
                                            ).FirstOrDefault();

                                        if (ConsiderWorkingHoursFromShiftStartTime != null && ConsiderWorkingHoursFromShiftStartTime.Formula.ToUpper().Trim() == "TRUE")
                                        {
                                            // ADDED BY MSJ ON 07 DEC 2019
                                            //if (DailyTransactionObj.Login.TimeOfDay < ShiftObjForCurrentEmployee.FirstInTime.TimeOfDay && DailyTransactionObj.WorkingHrs != null && DailyTransactionObj.Login < DailyTransactionObj.LogOut)
                                            //MODIFIED BY PUSHKAR ON 09 DEC 2019
                                            if (DailyTransactionObj.Login < new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month,
                                                 DailyTransactionObj.TranDate.Day, ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute,
                                                ShiftObjForCurrentEmployee.FirstInTime.Second)
                                                && DailyTransactionObj.WorkingHrs != null
                                                && DailyTransactionObj.Login < DailyTransactionObj.LogOut)
                                            {
                                                DateTime LoginTime = new DateTime(DailyTransactionObj.Login.Year, DailyTransactionObj.Login.Month, DailyTransactionObj.Login.Day, ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute, ShiftObjForCurrentEmployee.FirstInTime.Second);

                                                TimeSpan WorkingHrs = DailyTransactionObj.LogOut - LoginTime;
                                                if (WorkingHrs < new TimeSpan(0, 0, 0))
                                                {
                                                    WorkingHrs = new TimeSpan(0, 0, 0);
                                                }
                                                DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, WorkingHrs.Hours, WorkingHrs.Minutes, WorkingHrs.Seconds);

                                                if (DailyTransactionObj.WorkingHrs != null && ShiftObjForCurrentEmployee.WorkingHours != null)
                                                {
                                                    if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay)
                                                    {
                                                        TimeSpan ExtraHrs = DailyTransactionObj.WorkingHrs.Value.TimeOfDay - ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay;
                                                        DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);
                                                    }
                                                }
                                                else
                                                {
                                                    DailyTransactionObj.ExtraHrs = null;
                                                }
                                                WetosDB.SaveChanges();
                                            }
                                            else
                                            {
                                                if (DailyTransactionObj.WorkingHrs != null && ShiftObjForCurrentEmployee.WorkingHours != null)
                                                {
                                                    if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay)
                                                    {
                                                        TimeSpan ExtraHrs = DailyTransactionObj.WorkingHrs.Value.TimeOfDay - ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay;

                                                        DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);
                                                        WetosDB.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (DailyTransactionObj.WorkingHrs != null && ShiftObjForCurrentEmployee.WorkingHours != null)
                                            {
                                                if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay)
                                                {
                                                    TimeSpan ExtraHrs = DailyTransactionObj.WorkingHrs.Value.TimeOfDay - ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay;
                                                    DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);
                                                    WetosDB.SaveChanges();
                                                }
                                            }
                                        }
                                        #endregion

                                        #region LATE/EARLY Logic as per Shift time and Attendance rules

                                        /// IsLateCountToBeIncremented YES/NO
                                        /// Flag added by Rajas on 28 APRIL 2017
                                        bool IsLateCountToBeIncremented = true;

                                        /// IsEarlyCountToBeIncremented YES/NO
                                        /// Flag added by Rajas on 28 APRIL 2017
                                        bool IsEarlyCountToBeIncremented = true;

                                        //bool IsUpdateStatus = false;  // Added by Rajas on 4 AUGUST 2017

                                        // Initialise GlobalSettingObj
                                        GlobalSettingObj = new GlobalSetting();
                                        //GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == "Is Cont Late Deduction").FirstOrDefault();

                                        //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
                                        GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == GlobalSettingsConstant.IsContLateDeduction).FirstOrDefault();

                                        if (DailyTransactionObj.WorkingHrs != null)
                                        {
                                            #region CODE FOR MINIMUM WORKING HOURS LIMIT FOR FULL DAY
                                            #region CODE ADDED BY SHRADDHA ON 15 MAR 2018 NEED TO VERIFY BY MSJ
                                            string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                            if (IsHalfDay == true)
                                            {
                                                MarkAsPresentFullDayLimit = "03:29:00"; //For Boot Export
                                            }

                                            if (!string.IsNullOrEmpty(MarkAsPresentFullDayLimit) && IsHalfDay == false)
                                            {
                                                string[] MarkAsPresentFullDayLimitArray = MarkAsPresentFullDayLimit.Split(':');
                                                int MarkAsPresentFullDayLimitHour = Convert.ToInt32(MarkAsPresentFullDayLimitArray[0]);
                                                int MarkAsPresentFullDayLimitMinute = Convert.ToInt32(MarkAsPresentFullDayLimitArray[1]);
                                                int MarkAsPresentFullDayLimitTotalValue = (MarkAsPresentFullDayLimitHour * 60) + MarkAsPresentFullDayLimitMinute;

                                                int WorkingHoursTotal = (DailyTransactionObj.WorkingHrs.Value.Hour * 60) + DailyTransactionObj.WorkingHrs.Value.Minute;

                                                if (WorkingHoursTotal >= MarkAsPresentFullDayLimitTotalValue) //MODIFIED BY PUSHKAR ON 10 DEC 2019
                                                {
                                                    DailyTransactionObj.Status = StatusConstants.FullDayPresentStatus; //"PPPP";
                                                    WetosDB.SaveChanges();
                                                }
                                                else if (WorkingHoursTotal >= (MarkAsPresentFullDayLimitTotalValue / 2))//MODIFIED BY PUSHKAR ON 10 DEC 2019
                                                {
                                                    DailyTransactionObj.Status = StatusConstants.SecondHalfAbsentStatus; //"PPAA";
                                                    WetosDB.SaveChanges();
                                                }
                                                else
                                                {
                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
                                                    WetosDB.SaveChanges();
                                                }
                                            }

                                            //FOR BOOT EXPORT HALF DAY SHIFT ADDED ON 17 DEC 2019
                                            if (IsHalfDay == true)
                                            {
                                                if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay)
                                                {
                                                    DailyTransactionObj.Status = "PPPP";
                                                }
                                                else if (DailyTransactionObj.WorkingHrs != null)
                                                {
                                                    DailyTransactionObj.Status = "PPAA";
                                                }
                                            }
                                            #endregion
                                            #endregion
                                        }


                                        #region LOGIC FOR LATE MARK AND SHIFT

                                        ReturnMessage = string.Empty;
                                        UpdatedStatus = string.Empty;
                                        NewStatus = string.Empty;

                                        // Rest all flags
                                        PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

                                        // LOGIC FOR LATE MARK AND SHIFT
                                        if (ShiftObjForCurrentEmployee == null)
                                        {
                                            ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
                                        }

                                        //DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);

                                        // ADDED BY MSJ ON 28 JAN 2018 START
                                        //DateTime FirstInTime = ShiftObjForCurrentEmployee.FirstInTime; //OKAY CODE
                                        // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                                        DateTime FirstInTime = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month
                                            , DailyTransactionObj.TranDate.Day,
                                            ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute
                                            , ShiftObjForCurrentEmployee.FirstInTime.Second);

                                        // DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);
                                        //DateTime FirstOutTime = ShiftObjForCurrentEmployee.FirstOutTime; //OKAY CODE
                                        // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                                        DateTime FirstOutTime = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month
                                            , DailyTransactionObj.TranDate.Day,
                                            ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
                                            , ShiftObjForCurrentEmployee.FirstOutTime.Second);

                                        if (ShiftObjForCurrentEmployee.IsOutPunchInNextDay == true)
                                        {
                                            FirstOutTime = new DateTime(DailyTransactionObj.TranDate.AddDays(1).Year, DailyTransactionObj.TranDate.AddDays(1).Month
                                             , DailyTransactionObj.TranDate.AddDays(1).Day,
                                             ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
                                             , ShiftObjForCurrentEmployee.FirstOutTime.Second);
                                        }


                                        // ADDED BY MSJ ON 28 JAN 2018 END

                                        //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
                                        //DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
                                        DateTime? SecondInTime = ShiftObjForCurrentEmployee.SecondInTime;
                                        // DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);
                                        DateTime? SecondOutTime = ShiftObjForCurrentEmployee.SecondOutTime;


                                        // LATE COMING GRACE TIME FROM RULE 5
                                        //int LCGraceTimeMinutes = 00;

                                        if (RuleTransactionList != null && PostingFlagModelObj.IsWeekOff == false && PostingFlagModelObj.IsHoliDay == false)
                                        {
                                            // 5 - allowed late comming min
                                            string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

                                            if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
                                            {
                                                string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

                                                //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
                                                //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
                                            }

                                            /// Added by Rajas on 28 APRIL 2017 START
                                            /// To check GraceLateAllowed limit

                                            // 4 - Grace late allowed limit
                                            string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

                                            if (IsHalfDay == true)
                                            {
                                                GraceLateAllowedLimit = "00:00:00";
                                            }

                                            DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

                                            TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
                                            /// Added by Rajas on 28 APRIL 2017 END

                                            //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
                                            //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
                                            // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

                                            // LATE COMING LOGIC START
                                            // int LateMarkCount = 1;
                                            // Below line for FirstInTime modified by Rajas on 18 APRIL 2017

                                            // MOVED THESE TWO VARIABLE OUT OF THE LOOP
                                            string LateTimeString = string.Empty;
                                            string Latestring = string.Empty;
                                            DateTime CalculatedLateTime = DateTime.Now.Date;
                                            DateTime LateAllowedLimit = DateTime.Now.Date;

                                            // ADDED BY MSJ ON 29 JAN 2018 START
                                            // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                                            if (Intime > FirstInTime)
                                            {
                                                LateTimeString = (Intime - FirstInTime).ToString();  // SecondInTime.TimeOfDay
                                                CalculatedLateTime = Convert.ToDateTime(LateTimeString);
                                            }
                                            // ADDED BY MSJ ON 19 JAN 2018 END
                                            // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                                            if (Intime > FirstInTime && CalculatedLateTime.Hour < 8)  // SecondInTime.TimeOfDay
                                            {
                                                //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

                                                // ADDED BY MSJ ON 29 JAN 2018 START
                                                // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                                                if (Intime > FirstInTime)
                                                {
                                                    // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
                                                    LateTimeString = (Intime - FirstInTime).ToString();  // SecondInTime.TimeOfDay //------------------xxxxxxxxx------------
                                                    //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
                                                    Latestring = Intime.ToShortDateString() + " " + LateTimeString;

                                                    // Added by Rajas on 28 APRIL 2017 START
                                                    // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
                                                    LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr); // MODIFIED MSJ 
                                                    CalculatedLateTime = Convert.ToDateTime(LateTimeString);
                                                }

                                                // Save original attendance status
                                                // Added by Rajas on 8 AUGUST 2017
                                                DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                                if (CalculatedLateTime > GraceLateAllowedMin)
                                                {
                                                    //// Added by Rajas on 29 APRIL 2017
                                                    //DailyTransactionObj.Status = "PPPP^";

                                                    // Updated by Rajas on 8 AUGUST 2017 START
                                                    PostingFlagModelObj.IsLate = true;
                                                    string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                                    //if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                                    {
                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                        DailyTransactionObj.Status = UpdatedStatus;
                                                    }
                                                    // Updated by Rajas on 8 AUGUST 2017 END
                                                }

                                                if (CalculatedLateTime > LateAllowedLimit)  // GRACE < LATE ALLOED ? NEED TO VERIFY
                                                {
                                                    //DailyTransactionObj.Status = "AAPP^";  // AAPP
                                                    DailyTransactionObj.Remark = "Late";

                                                    // Updated by Rajas on 8 AUGUST 2017 START
                                                    PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming = true;
                                                    string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                                    //if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit)) // MarkAsPresentFullDayLimit IS NOT AVAILABLE //COMMENTED BY SHRADDHA ON 27 MAR 2018 AS PER SUGGESTED BY MSJ
                                                    {
                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                        DailyTransactionObj.Status = UpdatedStatus;
                                                    }
                                                    // Updated by Rajas on 8 AUGUST 2017 END

                                                    /// NOTE:
                                                    /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
                                                    /// If Employee is late beyond late allowed limit then deduct Half day directly
                                                    /// In this case don't update late count as action already taken for late employee.
                                                    IsLateCountToBeIncremented = false;
                                                }
                                                // Added by Rajas on 28 APRIL 2017 END

                                                // late by min
                                                DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
                                                //WetosDB.SaveChanges();

                                                int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                                                int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                                int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                                // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
                                                TimeSpan LateBy = Intime - FirstInTime; // SecondInTime.TimeOfDay;

                                                // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
                                                if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
                                                {
                                                    //int TotalLateCountForEmployeeTillDate = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                                                    //   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.LateCount != null).Count());

                                                    // Updated by Rajas on 24 AUGUST 2017 to fix late count issue

                                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
                                                    //int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId)
                                                    //    .Select(a => a.LateCount).Max());
                                                    int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                                                    && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
                                                    .Select(a => a.LateCount).Max());
                                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
                                                    if (RuleForLateCount != null)
                                                    {
                                                        int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

                                                        if (MaxLateCountForEmployee == 0)
                                                        {
                                                            DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
                                                        }

                                                        WetosDB.SaveChanges();

                                                        #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                                        // Code in this region modified by Rajas on 20 SEP 2017 START
                                                        string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                                        //if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                                        {
                                                            if (RuleForLateCountAttDeduction != null && RuleForLateCountAttDeduction == "TRUE")
                                                            {
                                                                // Added by Rajas on 12 AUGUST 2017 
                                                                // Global setting value base deduction 
                                                                if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                                                {
                                                                    if (DailyTransactionObj.LateCount % LateAllowed == 0) // MULTIPLE OF 3
                                                                    {
                                                                        switch (DeductionDay)
                                                                        {
                                                                            case 0:
                                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                                {
                                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                }
                                                                                DailyTransactionObj.Remark = "Late";
                                                                                break;

                                                                            case 1:

                                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                DailyTransactionObj.Remark = "Late";
                                                                                break;

                                                                            default:
                                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                                {
                                                                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                                                }
                                                                                DailyTransactionObj.Remark = "Late";
                                                                                break;
                                                                        }

                                                                    }
                                                                }
                                                                else   // Deduct half day after every allowed late count 
                                                                {
                                                                    if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
                                                                    {
                                                                        switch (DeductionDay)
                                                                        {
                                                                            case 0:
                                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                                {
                                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                }
                                                                                DailyTransactionObj.Remark = "Late";
                                                                                break;

                                                                            case 1:
                                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                                {
                                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                }
                                                                                DailyTransactionObj.Remark = "Late";
                                                                                break;

                                                                            default:
                                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                                {
                                                                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                                                }
                                                                                DailyTransactionObj.Remark = "Late";
                                                                                break;
                                                                        }
                                                                    }
                                                                    else // Updated by Rajas on 1 SEP 2017
                                                                    {
                                                                        if (DailyTransactionObj.LateCount % LateAllowed == 0)
                                                                        {
                                                                            switch (DeductionDay)
                                                                            {
                                                                                case 0:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Late";
                                                                                    break;

                                                                                case 1:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Late";
                                                                                    break;

                                                                                default:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Late";
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else if (RuleForLateCountLeaveDeduction != null && RuleForLateCountLeaveDeduction == "TRUE")
                                                            {
                                                                // Logic for deduction of Leave is pending

                                                                // Added By MSJ on 13 March 2019 START
                                                                DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, LateAllowed, DeductLeaveCode, NoOfDaysDeduct, 2);
                                                                // Added By MSJ on 13 March 2019 END

                                                                //// ADDED BY MSJ ON 22 FEB 2019 START

                                                                //if (DailyTransactionObj.LateCount > LateAllowed)
                                                                //{

                                                                //    string[] LeaveCodes = DeductLeaveCode.Split(',');
                                                                //    int Count = LeaveCodes.Length;

                                                                //    double Deduction = Convert.ToDouble(NoOfDaysDeduct);

                                                                //    // Check balance for First leave type
                                                                //    for (int i = 0; i <= Count; i++)
                                                                //    {
                                                                //        string LeaveType = LeaveCodes[i].Trim();

                                                                //        LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                                //            && a.LeaveType == LeaveType).FirstOrDefault();

                                                                //        if (AvailableLeaveBalance != null)
                                                                //        {
                                                                //            double LeaveBalAfterDucuction = AvailableLeaveBalance.CurrentBalance.Value - Deduction;

                                                                //            //if (AvailableLeaveBalance.CurrentBalance > 0)
                                                                //            if (LeaveBalAfterDucuction > 0)
                                                                //            {

                                                                //                //if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                //                {
                                                                //                    // Deduct balance for Leave
                                                                //                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                                                //                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                                                //                    // Update entry in DailyTransaction for Deducted leave type
                                                                //                    DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                                                //                    DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                                                //                    //WetosDB.SaveChanges();
                                                                //                }

                                                                //                break; // If deduction is done then stop loop.
                                                                //            }
                                                                //            else
                                                                //            {
                                                                //                Deduction = 0 - LeaveBalAfterDucuction;
                                                                //            }
                                                                //        }

                                                                //    }

                                                                //    if (Deduction > 0)
                                                                //    {
                                                                //        // MARKED AS ABSENT // ADDED BY MSJ ON 13 MARCH 2019'
                                                                //        MarkAsAbsent(GlobalSettingObj, DailyTransactionObj, DeductionDay, LateAllowed);
                                                                //    }

                                                                //}
                                                                //// ADDED BY MSJ ON 22 FEB 2019 END
                                                            }
                                                            else  // Late mark only. No deduction
                                                            {
                                                                // Updated by Rajas on 28 SEP 2017
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Late";
                                                            }
                                                        }
                                                        //else  // Late mark only. No deduction
                                                        //{
                                                        //    // Updated by Rajas on 28 SEP 2017
                                                        //    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                        //    DailyTransactionObj.Remark = "Late";
                                                        //}
                                                        // Code in this region modified by Rajas on 20 SEP 2017 END

                                                        #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES
                                                    }
                                                    //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END

                                                    WetosDB.SaveChanges();

                                                    //  IsUpdateStatus = true; // (19 AUG 2017) At this momnet not required 
                                                    //// Added by Rajas on 5 AUGUST 2017
                                                    //PreviousLateCount = DailyTransactionObj.LateCount == null ? 0 : DailyTransactionObj.LateCount.Value;
                                                }
                                                else  // Added by Rajas on 5 AUGUST 2017
                                                {
                                                    //// Employee is Not Late, then
                                                    //DailyTransactionObj.LateCount = PreviousLateCount;
                                                    //WetosDB.SaveChanges();
                                                }


                                            }
                                        }
                                        // LATE COMING LOGIC END
                                        #endregion

                                        if (DailyTransactionObj.WorkingHrs != null)
                                        {
                                            #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

                                            // What will happen in case of night shift

                                            //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
                                            if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
                                            {
                                                //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
                                                //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
                                                if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
                                                 && DailyTransactionObj.WorkingHrs.Value.Second == 0)
                                                {
                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
                                                    WetosDB.SaveChanges();
                                                }
                                            }
                                            //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
                                            #endregion

                                            #region  EARLY GOING LOGIC
                                            // EARLY GOING LOGIC START
                                            //EARLY GOING 

                                            // Logic need to be updated as per late count

                                            // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

                                            ReturnMessage = string.Empty;
                                            UpdatedStatus = string.Empty;
                                            NewStatus = string.Empty;

                                            // Rest all flags
                                            PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

                                            if (RuleTransactionList != null && PostingFlagModelObj.IsWeekOff == false && PostingFlagModelObj.IsHoliDay == false)
                                            {
                                                // 6 - allowed Early going min
                                                string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

                                                if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
                                                {
                                                    string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
                                                }

                                                /// Added by Rajas on 28 APRIL 2017 START
                                                /// To check GraceLateAllowed limit

                                                // 3 - Grace early allowed limit
                                                string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();
                                                if (IsHalfDay == true)
                                                {
                                                    GraceEarlyAllowedLimit = "00:00:00";
                                                }
                                                DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

                                                TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
                                                /// Added by Rajas on 28 APRIL 2017 END


                                                if (DailyTransactionObj.Status.Substring(2, 2) != "AA"
                                                    && DailyTransactionObj.Status.Substring(0, 2) != "TO") //ADDED IF CONDITION BY SHRADDHA ON 06 MAR 2018 BECAUSE  IF EMPLOYEE (ROHIDAS DAMARE - LNT NAGAR) LOGIN ON 10/01/2018 06:58 AND LOGOUT ON 11/01/2018 00:02 HE HAS WORKED FOR OVER TIME THEN ALSO IT IS SHOWING EARLY GOING
                                                {
                                                    if (OutTime < FirstOutTime)
                                                    {
                                                        string EarlyTimeString = (FirstOutTime - OutTime).ToString();

                                                        string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

                                                        // Added by Rajas on 28 APRIL 2017 START
                                                        // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
                                                        DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
                                                        DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

                                                        // Save original attendance status
                                                        // Added by Rajas on 8 AUGUST 2017
                                                        DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                                        if (CalculatedEarlyTime > GraceEarlyAllowedMin)
                                                        {
                                                            // Added by Rajas on 29 APRIL 2017
                                                            //if (!IsUpdateStatus)  (19 AUG 2017) At this momnet not required
                                                            {
                                                                // Updated by Rajas on 8 AUGUST 2017 START
                                                                PostingFlagModelObj.IsLate = true;

                                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                                                if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                                                {
                                                                    DailyTransactionObj.Status = UpdatedStatus;
                                                                }
                                                                // Updated by Rajas on 8 AUGUST 2017 END

                                                                DailyTransactionObj.Remark = "Early"; // Added by rajas on 19 AUGUST 2017
                                                            }
                                                        }

                                                        if (CalculatedEarlyTime > EarlyAllowedLimit)
                                                        {
                                                            //if (!IsUpdateStatus) // (19 AUG 2017) At this momnet not required
                                                            {
                                                                // Updated by Rajas on 8 AUGUST 2017 START
                                                                PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing = true;

                                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                                                if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                                                {
                                                                    DailyTransactionObj.Status = UpdatedStatus;
                                                                }
                                                                // Updated by Rajas on 8 AUGUST 2017 END
                                                            }

                                                            DailyTransactionObj.Remark = "Early";
                                                            WetosDB.SaveChanges();

                                                            /// NOTE:
                                                            /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
                                                            /// If Employee left early beyond early allowed limit then deduct Half day directly
                                                            /// In this case don't update late count as action already taken for late employee.
                                                            IsEarlyCountToBeIncremented = false;
                                                        }
                                                        // Added by Rajas on 28 APRIL 2017 END

                                                        // Early by min
                                                        DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
                                                        //WetosDB.SaveChanges();

                                                        int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                                                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                                        // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
                                                        TimeSpan EarlyBy = FirstOutTime - OutTime;  // SecondInTime.TimeOfDay;

                                                        //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added

                                                        if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
                                                        {
                                                            // Updated by Rajas on 28 AUGUST 2017 to fix early count issue
                                                            int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                                                                && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
                                                                .Select(a => a.EarlyCount).Max());

                                                            if (RuleForEarlyCount != null)
                                                            {
                                                                int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

                                                                if (MaxearlyCountForEmployee == 0)
                                                                {
                                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                                }

                                                                else
                                                                {
                                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                                }

                                                                WetosDB.SaveChanges();

                                                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                                                // Code in this region modified by Rajas on 20 SEP 2017 START
                                                                string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                                                if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                                                {
                                                                    if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
                                                                    {
                                                                        // Added by Rajas on 12 AUGUST 2017 
                                                                        // Global setting value base deduction 
                                                                        if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                                                        {
                                                                            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                            {
                                                                                switch (DeductionDay)
                                                                                {
                                                                                    case 0:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;

                                                                                    case 1:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;

                                                                                    default:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;
                                                                                }

                                                                            }
                                                                        }
                                                                        else   // Deduct half day after every allowed late count 
                                                                        {
                                                                            if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
                                                                            {
                                                                                switch (DeductionDay)
                                                                                {
                                                                                    case 0:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;

                                                                                    case 1:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;

                                                                                    default:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else // Updated by Rajas on 1 SEP 2017
                                                                            {
                                                                                if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                                {
                                                                                    switch (DeductionDay)
                                                                                    {
                                                                                        case 0:
                                                                                            if (DailyTransactionObj.Status.Length > 3)
                                                                                            {
                                                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                            }
                                                                                            DailyTransactionObj.Remark = "Early";

                                                                                            break;

                                                                                        case 1:
                                                                                            if (DailyTransactionObj.Status.Length > 3)
                                                                                            {
                                                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                            }
                                                                                            DailyTransactionObj.Remark = "Early";

                                                                                            break;

                                                                                        default:
                                                                                            if (DailyTransactionObj.Status.Length > 3)
                                                                                            {
                                                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                            }
                                                                                            DailyTransactionObj.Remark = "Early";
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
                                                                    {
                                                                        // Logic for deduction of Leave is pending

                                                                        // Added By MSJ on 13 March 2019 START
                                                                        DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyAllowed, DeductLeaveCode, NoOfDaysDeduct, 1);
                                                                        // Added By MSJ on 13 March 2019 END

                                                                        // ADDED BY MSJ ON 22 FEB 2019 START
                                                                        //if (DailyTransactionObj.LateCount > EarlyAllowed)
                                                                        //{

                                                                        //    string[] LeaveCodes = DeductLeaveCode.Split(',');
                                                                        //    int Count = LeaveCodes.Length;

                                                                        //    // Check balance for First leave type
                                                                        //    for (int i = 0; i <= Count; i++)
                                                                        //    {
                                                                        //        string LeaveType = LeaveCodes[i].Trim();

                                                                        //        LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                                        //            && a.LeaveType == LeaveType).FirstOrDefault();

                                                                        //        if (AvailableLeaveBalance != null)
                                                                        //        {
                                                                        //            if (AvailableLeaveBalance.CurrentBalance > 0)
                                                                        //            {
                                                                        //                double Deduction = Convert.ToDouble(NoOfDaysDeduct);
                                                                        //                if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                        //                {
                                                                        //                    // Deduct balance for Leave
                                                                        //                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                                                        //                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                                                        //                    // Update entry in DailyTransaction for Deducted leave type
                                                                        //                    DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                                                        //                    DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                                                        //                    //WetosDB.SaveChanges();
                                                                        //                }

                                                                        //                break; // If deduction is done then stop loop.
                                                                        //            }
                                                                        //        }

                                                                        //    }
                                                                        //}
                                                                        //// ADDED BY MSJ ON 22 FEB 2019 END
                                                                    }
                                                                    else  // Early mark only. No deduction
                                                                    {
                                                                        // Updated by Rajas on 28 SEP 2017
                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                        {
                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                        }
                                                                        DailyTransactionObj.Remark = "Early";

                                                                    }
                                                                }

                                                                else  // Early mark only. No deduction
                                                                {
                                                                    // Updated by Rajas on 28 SEP 2017
                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                    {
                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                    }
                                                                    DailyTransactionObj.Remark = "Early";

                                                                }

                                                                // Code in this region modified by Rajas on 20 SEP 2017 END

                                                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                                            }

                                                            WetosDB.SaveChanges();

                                                            //// Added by Rajas on 5 AUGUST 2017
                                                            //PrevEarlyCount = DailyTransactionObj.EarlyCount == null ? 0 : DailyTransactionObj.EarlyCount.Value;

                                                        }
                                                        else if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == false)
                                                        {
                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                            DailyTransactionObj.Remark = "Early";
                                                            WetosDB.SaveChanges();
                                                        }
                                                        else  // Added by Rajas on 5 AUGUST 2017
                                                        {
                                                            //// Employee is Not left early, then
                                                            //DailyTransactionObj.EarlyCount = PrevEarlyCount;
                                                            //WetosDB.SaveChanges();
                                                        }

                                                        /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
                                                        /// If employee is Late and Early beyond allowed limit then mark employee absent
                                                        /// Added by Rajas on 18 MAY 2017
                                                        //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
                                                        //{
                                                        //    DailyTransactionObj.Status = "AAAA";
                                                        //    DailyTransactionObj.Remark = "Absent";
                                                        //}


                                                    }
                                                }
                                            }
                                            // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

                                            #endregion
                                        }
                                        #endregion

                                        #region WORKING HRS for TEKMAN

                                        try
                                        {
                                            string WorkHoursHalfDayLimit = RuleTransactionList.Where(a => a.RuleId == 29).Select(a => a.Formula).FirstOrDefault();
                                            string WorkHoursFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 28).Select(a => a.Formula).FirstOrDefault();

                                            if (WorkHoursHalfDayLimit != null && WorkHoursFullDayLimit != null)
                                            {
                                                DateTime HalfDayLimit = Convert.ToDateTime(WorkHoursHalfDayLimit);
                                                DateTime FullDayLimit = Convert.ToDateTime(WorkHoursFullDayLimit);

                                                TimeSpan FInTime1Ex = new TimeSpan(9, 0, 0);
                                                TimeSpan FInTime2Ex = new TimeSpan(9, 45, 59);
                                                //DateTime 

                                                // ADDED BY MSJ IN 02 APR 2018 // ADDED WORKING HOURS NULL VL
                                                if (DailyTransactionObj.WorkingHrs != null && PostingFlagModelObj.IsWeekOff == false && PostingFlagModelObj.IsHoliDay == false) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                                                {
                                                    if (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay
                                                        && DailyTransactionObj.Login.TimeOfDay <= FInTime2Ex
                                                        && DailyTransactionObj.Status.Substring(2, 2) != "AA") //MODIFIED BY PUSHKAR ON 4 APRIL
                                                    {
                                                        string EarlyTime = (FullDayLimit.TimeOfDay - DailyTransactionObj.WorkingHrs.Value.TimeOfDay).ToString();

                                                        string Earlystring = DailyTransactionObj.WorkingHrs.Value.ToShortDateString() + " " + EarlyTime;

                                                        DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);

                                                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                                        // Get Max early count from existing
                                                        int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions
                                                            .Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                                   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear
                                                                   && a.TranDate < DailyTransactionObj.TranDate)
                                                                   .Select(a => a.EarlyCount).Max());

                                                        DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;  // Update early count

                                                        if (RuleForEarlyCount != null)
                                                        {
                                                            int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

                                                            if (MaxearlyCountForEmployee == 0)
                                                            {
                                                                DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                            }

                                                            else
                                                            {
                                                                DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                            }

                                                            WetosDB.SaveChanges();

                                                            #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                                            // Code in this region modified by Rajas on 20 SEP 2017 START
                                                            string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                                            if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                                            {
                                                                if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
                                                                {
                                                                    // Added by Rajas on 12 AUGUST 2017 
                                                                    // Global setting value base deduction 
                                                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                                                    {
                                                                        if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                        {
                                                                            switch (DeductionDay)
                                                                            {
                                                                                case 0:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                case 1:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                default:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;
                                                                            }

                                                                        }
                                                                    }
                                                                    else   // Deduct half day after every allowed late count 
                                                                    {
                                                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
                                                                        {
                                                                            switch (DeductionDay)
                                                                            {
                                                                                case 0:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                case 1:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;

                                                                                default:
                                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                                    {
                                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                    }
                                                                                    DailyTransactionObj.Remark = "Early";
                                                                                    break;
                                                                            }
                                                                        }
                                                                        else // Updated by Rajas on 1 SEP 2017
                                                                        {
                                                                            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                            {
                                                                                switch (DeductionDay)
                                                                                {
                                                                                    case 0:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";

                                                                                        break;

                                                                                    case 1:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";

                                                                                        break;

                                                                                    default:
                                                                                        if (DailyTransactionObj.Status.Length > 3)
                                                                                        {
                                                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                                        }
                                                                                        DailyTransactionObj.Remark = "Early";
                                                                                        break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
                                                                {
                                                                    // Logic for deduction of Leave is pending

                                                                    // Added By MSJ on 13 March 2019 START
                                                                    DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyAllowed, DeductLeaveCode, NoOfDaysDeduct, 1);
                                                                    // Added By MSJ on 13 March 2019 END

                                                                    //// ADDED BY MSJ ON 22 FEB 2019 START
                                                                    //string[] LeaveCodes = DeductLeaveCode.Split(',');
                                                                    //int Count = LeaveCodes.Length;

                                                                    //// Check balance for First leave type
                                                                    //for (int i = 0; i <= Count; i++)
                                                                    //{
                                                                    //    string LeaveType = LeaveCodes[i].Trim();

                                                                    //    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                                    //        && a.LeaveType == LeaveType).FirstOrDefault();

                                                                    //    if (AvailableLeaveBalance != null)
                                                                    //    {
                                                                    //        if (AvailableLeaveBalance.CurrentBalance > 0)
                                                                    //        {
                                                                    //            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
                                                                    //            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                                    //            {
                                                                    //                // Deduct balance for Leave
                                                                    //                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                                                    //                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                                                    //                // Update entry in DailyTransaction for Deducted leave type
                                                                    //                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                                                    //                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                                                    //                //WetosDB.SaveChanges();
                                                                    //            }

                                                                    //            break; // If deduction is done then stop loop.
                                                                    //        }
                                                                    //    }

                                                                    //}
                                                                    //// ADDED BY MSJ ON 22 FEB 2019 END
                                                                }
                                                                else  // Early mark only. No deduction
                                                                {
                                                                    // Updated by Rajas on 28 SEP 2017
                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                    {
                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                    }
                                                                    DailyTransactionObj.Remark = "Early";

                                                                }
                                                            }

                                                            else  // Early mark only. No deduction
                                                            {
                                                                // Updated by Rajas on 28 SEP 2017
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";

                                                            }

                                                            // Code in this region modified by Rajas on 20 SEP 2017 END

                                                            #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                                        }

                                                        WetosDB.SaveChanges();
                                                    }
                                                }

                                            }

                                        }
                                        catch (Exception)
                                        {

                                        }

                                        #endregion

                                        #region FIRST HALF & SECOND HALF INTIME & OUT TIME

                                        string FirstHalfLimit = RuleTransactionList.Where(a => a.RuleId == 44).Select(a => a.Formula).FirstOrDefault();
                                        string SecondHalflimit = RuleTransactionList.Where(a => a.RuleId == 45).Select(a => a.Formula).FirstOrDefault();

                                        DateTime FirstHalf = Convert.ToDateTime(FirstHalfLimit);
                                        DateTime SecondHalf = Convert.ToDateTime(SecondHalflimit);

                                        if (FirstHalfLimit != null && SecondHalflimit != null)
                                        {

                                            //ADDED BY PUSHKAR ON 27 JULY 2018
                                            if (DailyTransactionObj.Status.Substring(0, 4) == "PPAA")
                                            {
                                                if (DailyTransactionObj.WorkingHrs != null) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                                                {
                                                    if (FirstHalf.TimeOfDay <= DailyTransactionObj.WorkingHrs.Value.TimeOfDay) //MODIFIED BY PUSHKAR ON 4 APRIL
                                                    {
                                                        TimeSpan FirstHalfClac = DailyTransactionObj.Login.TimeOfDay + FirstHalf.TimeOfDay;
                                                        TimeSpan FInTime1 = new TimeSpan(9, 0, 0);
                                                        TimeSpan FInTime2 = new TimeSpan(9, 45, 59);

                                                        // ADDED BY MSJ ON 27 DEC 2018 
                                                        if (DailyTransactionObj.BranchId == 2)
                                                        {
                                                            FInTime2 = new TimeSpan(9, 30, 59);
                                                        }

                                                        if (DailyTransactionObj.LogOut.TimeOfDay >= FirstHalfClac)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.Status = "AAAA";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        DailyTransactionObj.Status = "AAAA";
                                                    }
                                                }
                                            }
                                            if (DailyTransactionObj.Status.Substring(0, 4) == "AAPP")
                                            {
                                                if (DailyTransactionObj.WorkingHrs != null) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                                                {
                                                    if (SecondHalf.TimeOfDay <= DailyTransactionObj.WorkingHrs.Value.TimeOfDay) //MODIFIED BY PUSHKAR ON 4 APRIL
                                                    {
                                                        TimeSpan SecondHalfClac = DailyTransactionObj.LogOut.TimeOfDay - SecondHalf.TimeOfDay;
                                                        TimeSpan SecInTime1 = new TimeSpan(13, 30, 0);
                                                        TimeSpan SecInTime2 = new TimeSpan(14, 00, 0); // ADDED BY MSJ ON 29 DEC 2018

                                                        //if (DailyTransactionObj.Login.TimeOfDay <= SecondHalfClac && DailyTransactionObj.Login.TimeOfDay <= SecInTime1) // COMMENTED BY MSJ ON 29 DEC 2018
                                                        if (DailyTransactionObj.Login.TimeOfDay <= SecondHalfClac && DailyTransactionObj.Login.TimeOfDay <= SecInTime2) // ADDED BY MSJ ON 29 DEC 2018
                                                        {

                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.Status = "AAAA";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        DailyTransactionObj.Status = "AAAA";
                                                    }
                                                }

                                            }

                                        }
                                        #endregion

                                    }

                                    #endregion

                                    #region SINGLE SWIP ONLY

                                    TimeSpan NoPunchLogin = new TimeSpan(0, 0, 0);
                                    if (DailyTransactionObj.Login == DailyTransactionObj.LogOut && DailyTransactionObj.Login.TimeOfDay > NoPunchLogin)
                                    {

                                        //DailyTransactionObj.Late = null; //COMMENTED FOR HOSUR KNPL BY PUSHKAR ON 14 NOV 2019
                                        //DailyTransactionObj.Early = null; //COMMENTED FOR HOSUR KNPL BY PUSHKAR ON 14 NOV 2019
                                        DailyTransactionObj.LateCount = null;
                                        DailyTransactionObj.EarlyCount = null;
                                        DailyTransactionObj.Status = "AAAA*";
                                    }

                                    #endregion

                                    #region CODE TO CONSIDER CONDONE TRN TABLE ENTRY

                                    ReturnMessage = string.Empty;
                                    UpdatedStatus = string.Empty;
                                    NewStatus = string.Empty;
                                    PostingFlagModelObj = new PostingFlagModel();

                                    //List<CondoneTrn> CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
                                    if (CondoneTrnList.Count > 0)
                                    {
                                        CondoneTrn CondoneTrnObj = CondoneTrnList.Where(a => a.Company.CompanyId == EmployeeCompanyId && a.Branch.BranchId == EmployeeBranchId).FirstOrDefault();

                                        if (CondoneTrnObj != null)
                                        {
                                            int LateEarlyAllowedTimeHour = 0;
                                            int LateEarlyAllowedTimeMinute = 0;
                                            int LateEarlyAllowedTimeSecond = 0;
                                            int LateEarlyAllowedTotalTimeInMinutes = 0;

                                            if (!string.IsNullOrEmpty(CondoneTrnObj.LateEarly.Trim()) || !string.IsNullOrWhiteSpace(CondoneTrnObj.LateEarly.Trim()))
                                            {
                                                string[] LateEarlyAllowedTimeValue = CondoneTrnObj.LateEarly.Split(':');
                                                LateEarlyAllowedTimeHour = Convert.ToInt32(LateEarlyAllowedTimeValue[0]);
                                                LateEarlyAllowedTimeMinute = Convert.ToInt32(LateEarlyAllowedTimeValue[1]);
                                                LateEarlyAllowedTimeSecond = Convert.ToInt32(LateEarlyAllowedTimeValue[2]);

                                                LateEarlyAllowedTotalTimeInMinutes = (LateEarlyAllowedTimeHour * 60) + LateEarlyAllowedTimeMinute;
                                            }

                                            // List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).ToList();

                                            DailyTransaction DailyTransactionASCondoneTrn = DailyTransactionObj;

                                            //foreach (DailyTransaction DailyTransactionASCondoneTrn in DailyTransactionListForCurrentDate)
                                            {
                                                //COMPARE COMPANY ID AND BRACH ID WITH CONDONE ENTRY
                                                //if (DailyTransactionASCondoneTrn.CompanyId == CondoneTrnObj.CompanyId && DailyTransactionASCondoneTrn.BranchId == CondoneTrnObj.BranchId)
                                                {
                                                    //check for late entry based on status AAPP, LateCount,PPPP, Late, Early

                                                    if (CondoneTrnObj.Status.Trim().ToUpper() == "LATE" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Late.ToString()))
                                                    {
                                                        string[] DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToString().Split(' ');
                                                        //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                                        string[] LateComingTimeValue = DailyTransactionASCondoneTrnLateString[1].Split(':');
                                                        int LateComingTimeValueHour = Convert.ToInt32(LateComingTimeValue[0]);
                                                        int LateComingTimeValueMinute = Convert.ToInt32(LateComingTimeValue[1]);
                                                        int LateComingTimeValueSecond = Convert.ToInt32(LateComingTimeValue[2]);

                                                        int LateComingTotalTimeInMinutes = (LateComingTimeValueHour * 60) + LateComingTimeValueMinute;

                                                        if (LateComingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                                        {
                                                            //// Updated by Rajas on 29 APRIL 2017
                                                            //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

                                                            // Updated by Rajas on 8 AUGUST 2017 START
                                                            PostingFlagModelObj.IsCondone = true;

                                                            // UPDATE STATUS 
                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                            // Updated by Rajas on 8 AUGUST 2017 END

                                                            // Added by Rajas on 1 SEP 2017 START
                                                            //if (LateComingTotalTimeInMinutes >= 240)
                                                            //{
                                                            UpdatedStatus = StatusConstants.Present + UpdatedStatus.Substring(2, 2) + UpdatedStatus.Substring(4, 1);
                                                            //}
                                                            // Added by Rajas on 1 SEP 2017 END

                                                            // Added by Rajas on 28 AUGUST 2017 START
                                                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                            // Added by Rajas on 28 AUGUST 2017 END
                                                        }


                                                        #region CODE TO DEDUCT ALREADY MARKED LATE COUNT

                                                        // Added by Rajas on 28 AUGUST 2017 START

                                                        NewStatus = string.Empty;
                                                        UpdatedStatus = string.Empty;
                                                        ReturnMessage = string.Empty;

                                                        int EmployeeGroupId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();
                                                        RuleForLateCount = AllRuleTransactionList.Where(a => a.RuleId == 46 && a.EmployeeGroupId == EmployeeGroupId).FirstOrDefault();

                                                        if (RuleForLateCount != null)
                                                        {
                                                            if (DailyTransactionObj.LateCount >= 1)
                                                            {

                                                                DailyTransactionObj.LateCount = DailyTransactionObj.LateCount - 1;
                                                                WetosDB.SaveChanges();


                                                                PostingFlagModelObj.IsLateCountReduced = true;

                                                                if (DailyTransactionObj.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                                                {
                                                                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                    DailyTransactionObj.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                                                    DailyTransactionObj.Status = UpdatedStatus;
                                                                    WetosDB.SaveChanges();
                                                                }

                                                                else if (DailyTransactionObj.LateCount > Convert.ToInt32(RuleForLateCount.Formula))
                                                                {
                                                                    //abcd.Status = "AAPP^";
                                                                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                    DailyTransactionObj.Remark = "Late";
                                                                    DailyTransactionObj.Status = UpdatedStatus;
                                                                    WetosDB.SaveChanges();
                                                                }
                                                            }
                                                            // > 2 ABSENT
                                                            // ==2 PRESENT 

                                                            // Initialise flags
                                                            PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                                        }

                                                        // Added by Rajas on 28 AUGUST 2017 START

                                                        #endregion
                                                    }
                                                    else if (CondoneTrnObj.Status.Trim().ToUpper() == "EARLY" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Early.ToString()))
                                                    {
                                                        string[] DailyTransactionASCondoneTrnEarlyString = DailyTransactionASCondoneTrn.Early.Value.ToString().Split(' ');
                                                        //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                                        string[] EarlyGoingTimeValue = DailyTransactionASCondoneTrnEarlyString[1].Split(':');

                                                        int EarlyGoingTimeValueHour = Convert.ToInt32(EarlyGoingTimeValue[0]);
                                                        int EarlyGoingTimeValueMinute = Convert.ToInt32(EarlyGoingTimeValue[1]);
                                                        int EarlyGoingTimeValueSecond = Convert.ToInt32(EarlyGoingTimeValue[2]);

                                                        int EarlyGoingTotalTimeInMinutes = (EarlyGoingTimeValueHour * 60) + EarlyGoingTimeValueMinute;

                                                        if (EarlyGoingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                                        {
                                                            //// Updated by Rajas on 29 APRIL 2017
                                                            //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

                                                            // Updated by Rajas on 8 AUGUST 2017 START
                                                            PostingFlagModelObj.IsCondone = true;

                                                            // UPDATE STATUS 
                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                            // Updated by Rajas on 8 AUGUST 2017 END

                                                            // Added by Rajas on 1 SEP 2017 START
                                                            //if (EarlyGoingTotalTimeInMinutes >= 240)
                                                            //{
                                                            UpdatedStatus = UpdatedStatus.Substring(0, 2) + StatusConstants.Present + UpdatedStatus.Substring(4, 1);
                                                            //}
                                                            // Added by Rajas on 1 SEP 2017 END

                                                            // Added by Rajas on 28 AUGUST 2017 START
                                                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                            // Added by Rajas on 28 AUGUST 2017 END
                                                        }

                                                        #region CODE TO DEDUCT ALREADY MARKED EARLY COUNT

                                                        // Added by Rajas on 28 AUGUST 2017 START

                                                        NewStatus = string.Empty;
                                                        UpdatedStatus = string.Empty;
                                                        ReturnMessage = string.Empty;

                                                        int EmployeeGroupId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();
                                                        RuleForLateCount = AllRuleTransactionList.Where(a => a.RuleId == 16 && a.EmployeeGroupId == EmployeeGroupId).FirstOrDefault();

                                                        if (RuleForLateCount != null)
                                                        {
                                                            if (DailyTransactionObj.EarlyCount >= 1)
                                                            {
                                                                DailyTransactionObj.EarlyCount = DailyTransactionObj.EarlyCount - 1;
                                                                WetosDB.SaveChanges();

                                                                PostingFlagModelObj.IsLateCountReduced = true;

                                                                if (DailyTransactionObj.EarlyCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                                                {
                                                                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                    DailyTransactionObj.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                                                    DailyTransactionObj.Status = UpdatedStatus;
                                                                    WetosDB.SaveChanges();
                                                                }

                                                                else if (DailyTransactionObj.EarlyCount > Convert.ToInt32(RuleForLateCount.Formula))
                                                                {
                                                                    //abcd.Status = "AAPP^";
                                                                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                    DailyTransactionObj.Remark = "Late";
                                                                    DailyTransactionObj.Status = UpdatedStatus;
                                                                    WetosDB.SaveChanges();
                                                                }
                                                            }
                                                            // > 2 ABSENT
                                                            // ==2 PRESENT 

                                                            // Initialise flags
                                                            PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                                        }

                                                        // Added by Rajas on 28 AUGUST 2017 END

                                                        #endregion
                                                    }
                                                    WetosDB.SaveChanges();
                                                }
                                            }

                                        }
                                    }


                                    #endregion

                                    #region MARK HOLIDAY

                                    // Split first half, second half and 5th character
                                    // Check Holiday present rules???
                                    // On Holiday shift is marked

                                    ReturnMessage = string.Empty;
                                    UpdatedStatus = string.Empty;
                                    NewStatus = string.Empty;
                                    bool IsWO = false;
                                    PostingFlagModelObj = new PostingFlagModel();

                                    RuleTransaction RTObjForCompOffFullDayLimitValueHO = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault();
                                    bool IsCORuleHO;
                                    TimeSpan HOtotalTime = new TimeSpan(0, 0, 0);
                                    if (RTObjForCompOffFullDayLimitValueHO != null)
                                    {
                                        string[] TimeForWO = RTObjForCompOffFullDayLimitValueHO.Formula.Split(':');
                                        int WOhrsSplit = Convert.ToInt32(TimeForWO[0]);
                                        int WOminSplit = Convert.ToInt32(TimeForWO[1]);
                                        HOtotalTime = new TimeSpan(WOhrsSplit, WOminSplit, 0);
                                        IsCORuleHO = true;
                                    }
                                    else
                                    {
                                        IsCORuleHO = false;
                                    }


                                    if (HolidayList.Count > 0)
                                    {
                                        // ADDED BY MSJ ON 08 AUG 2017 START
                                        if (HolidayList.Where(a => a.CompanyId == EmployeeCompanyId && a.Branchid == EmployeeBranchId).FirstOrDefault() != null)
                                        {
                                            PostingFlagModelObj.IsHoliDay = true;  // Added by Rajas on 5 SEP 2017

                                            // Updated by Rajas on 5 SEP 2017 START
                                            // Half day holiday
                                            if (HolidayList.Where(a => a.DayStatus == 2).FirstOrDefault() != null)
                                            {
                                                DailyTransactionObj.Status = StatusConstants.HolidayShift + DailyTransactionObj.Status.Substring(2, 3);
                                                WetosDB.SaveChanges();
                                            }
                                            else if (HolidayList.Where(a => a.DayStatus == 3).FirstOrDefault() != null)
                                            {
                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.HolidayShift;
                                                WetosDB.SaveChanges();
                                            }
                                            else
                                            {
                                                // Comman function call for status check and update
                                                // Added by Rajas on 19 AUGUST 2017
                                                CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                /// Mark Holiday shift in DailyTransaction
                                                /// Added by Rajas on 4 JULY 2017
                                                DailyTransactionObj.ShiftId = StatusConstants.HolidayShift;
                                                DailyTransactionObj.LateCount = null;
                                                DailyTransactionObj.EarlyCount = null;
                                                DailyTransactionObj.Late = null;
                                                DailyTransactionObj.Early = null;
                                                DailyTransactionObj.Remark = null;

                                                if (IsCORuleHO == true)
                                                {
                                                    if (DailyTransactionObj.WorkingHrs != null)
                                                    {
                                                        if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= HOtotalTime)
                                                        {
                                                            DailyTransactionObj.Status = "HPHP";
                                                        }
                                                        else if (DailyTransactionObj.WorkingHrs != null)
                                                        {
                                                            DailyTransactionObj.Status = "HPHO";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        DailyTransactionObj.Status = "HOHO";
                                                    }
                                                }
                                                else
                                                {
                                                    if (DailyTransactionObj.WorkingHrs != null)
                                                    {
                                                        DailyTransactionObj.Status = "HPHP";
                                                    }
                                                    else
                                                    {
                                                        DailyTransactionObj.Status = "HOHO";
                                                    }
                                                }


                                                WetosDB.SaveChanges(); //?????
                                            }
                                            // Updated by Rajas on 5 SEP 2017 END
                                        }
                                        // ADDED BY MSJ ON 08 AUG 2017 END
                                    }

                                    #endregion

                                    #region MARK DECLARED HOLIDAY

                                    ReturnMessage = string.Empty;
                                    UpdatedStatus = string.Empty;
                                    NewStatus = string.Empty;
                                    PostingFlagModelObj = new PostingFlagModel();

                                    if (DeclaredHolidayList.Count > 0)
                                    {
                                        // Added by Rajas on 8 AUGUST 2017 START
                                        // Declared holiday table does not have CompanyId reference in table
                                        if (DeclaredHolidayList.Where(a => a.Branch.BranchId == EmployeeBranchId).FirstOrDefault() != null)
                                        {
                                            PostingFlagModelObj.DeclaredHoliDayStatus = true;  // Added by Rajas on 26 SEP 2017

                                            // Comman function call for status check and update
                                            // Added by Rajas on 19 AUGUST 2017
                                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                            // Updated by Rajas on 3 OCT 2017 START
                                            if (DailyTransactionObj.Status.Contains(DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent))
                                            {
                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.DeclaredHoliDayStatus;
                                            }
                                            else if (DailyTransactionObj.Status.Contains(StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2)))
                                            {
                                                DailyTransactionObj.Status = StatusConstants.DeclaredHoliDayStatus + DailyTransactionObj.Status.Substring(2, 2);
                                            }
                                            else
                                            {
                                                DailyTransactionObj.Status = StatusConstants.DeclaredHoliDayStatus;
                                            }
                                            // Updated by Rajas on 3 OCT 2017 END

                                            /// Mark Holiday shift in DailyTransaction
                                            /// Added by Rajas on 4 JULY 2017

                                            DailyTransactionObj.ShiftId = StatusConstants.DeclaredHoliDayStatus;

                                            WetosDB.SaveChanges(); //?????
                                        }
                                        // Added by Rajas on 8 AUGUST 2017 END
                                    }
                                    #endregion

                                    #region MARK WORK ON DECLARED HOLIDAY

                                    //ReturnMessage = string.Empty;
                                    //UpdatedStatus = string.Empty;
                                    //NewStatus = string.Empty;
                                    //PostingFlagModelObj = new PostingFlagModel();

                                    //if (WorkOnDeclaredHolidayCompOffList.Count > 0)
                                    //{
                                    //    // Added by Rajas on 8 AUGUST 2017 START
                                    //    // Declared holiday table does not have CompanyId reference in table
                                    //    if (WorkOnDeclaredHolidayCompOffList.Where(a => a.Branch.BranchId == EmployeeBranchId).FirstOrDefault() != null)
                                    //    {
                                    //        PostingFlagModelObj.DeclaredHoliDayStatus = true;  // Added by Rajas on 26 SEP 2017

                                    //        // Comman function call for status check and update
                                    //        // Added by Rajas on 19 AUGUST 2017
                                    //        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                    //        // Updated by Rajas on 3 OCT 2017 START
                                    //        if (DailyTransactionObj.Status.Contains(DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent))
                                    //        {
                                    //            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.DeclaredHolidayShift;
                                    //        }
                                    //        else if (DailyTransactionObj.Status.Contains(StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2)))
                                    //        {
                                    //            DailyTransactionObj.Status = StatusConstants.DeclaredHolidayShift + DailyTransactionObj.Status.Substring(2, 2);
                                    //        }
                                    //        // Updated by Rajas on 3 OCT 2017 END

                                    //        /// Mark Holiday shift in DailyTransaction
                                    //        /// Added by Rajas on 4 JULY 2017
                                    //        DailyTransactionObj.ShiftId = StatusConstants.DeclaredHolidayShift;

                                    //        WetosDB.SaveChanges(); //?????
                                    //    }
                                    //    // Added by Rajas on 8 AUGUST 2017 END
                                    //}                               

                                    #endregion

                                    #region MARK WeeklyOff1 AND WEEKOFF2 DAY FROM DATABASE (FIRST, SECOND, THIRD, FOURTH, FIFTH) AND MARK AS WEEKOFF
                                    RuleTransaction ConsiderWOfromMaster = RuleTransactionList.Where(a => a.RuleId == 47).FirstOrDefault(); //!@#$%^
                                    // ADDED  BY MSJ ON 31 JAN 2018 
                                    if (EmployeeObj != null)  // ADDED  BY MSJ ON 31 JAN 2018 
                                    {
                                        //RuleTransaction ConsiderWOfromMaster = RuleTransactionList.Where(a => a.RuleId == 47).FirstOrDefault();
                                        if (ConsiderWOfromMaster == null || ConsiderWOfromMaster.Formula.ToUpper() == "TRUE")
                                        {
                                            try
                                            {
                                                string currentDayStr = CurrentDate.DayOfWeek.ToString();
                                                //CODE UNCOMMENTED BY SHRADDHA ON 07 MARCH 2017 START

                                                bool IsWeeklyOff = false;  // Added by Rajas on 4 KULY 2017

                                                ReturnMessage = string.Empty;
                                                UpdatedStatus = string.Empty;
                                                NewStatus = string.Empty;
                                                PostingFlagModelObj = new PostingFlagModel();
                                                IsWO = true;
                                                PostingFlagModelObj.IsWeekOff = true;

                                                RuleTransaction RTObjForCompOffFullDayLimitValueWO = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault();
                                                bool IsCORuleWO;
                                                TimeSpan WOtotalTime = new TimeSpan(0, 0, 0);
                                                if (RTObjForCompOffFullDayLimitValueWO != null)
                                                {
                                                    string[] TimeForWO = RTObjForCompOffFullDayLimitValueWO.Formula.Split(':');
                                                    int WOhrsSplit = Convert.ToInt32(TimeForWO[0]);
                                                    int WOminSplit = Convert.ToInt32(TimeForWO[1]);
                                                    WOtotalTime = new TimeSpan(WOhrsSplit, WOminSplit, 0);
                                                    IsCORuleWO = true;
                                                }
                                                else
                                                {
                                                    IsCORuleWO = false;
                                                }

                                                // MODIFIED BY MSJ ON 21 JAN 2019
                                                if (EmployeeObj.WeeklyOff1.ToUpper() == currentDayStr.ToUpper()
                                                   && WorkOnDeclaredHolidayCompOffList.Where(a => a.Branch.BranchId == EmployeeBranchId).Count() == 0) //IF WEEK OFF DAY IS NOT DECLARED HOLIDAY COMP WORK DAY CONDITION ADDED BY SHRADDHA ON 29 MAR 2018
                                                {
                                                    // Comman function call for status check and update
                                                    // Added by Rajas on 19 AUGUST 2017
                                                    CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                    DailyTransactionObj.ShiftId = StatusConstants.WeekOffShift;  // Updated by Rajas on 19 AUGUST 2017
                                                    DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                                                    DailyTransactionObj.Late = null;
                                                    DailyTransactionObj.Early = null;
                                                    DailyTransactionObj.LateCount = null;
                                                    DailyTransactionObj.EarlyCount = null;
                                                    DailyTransactionObj.Remark = null;

                                                    if (IsCORuleWO == true)
                                                    {
                                                        if (DailyTransactionObj.WorkingHrs != null)
                                                        {
                                                            if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= WOtotalTime)
                                                            {
                                                                DailyTransactionObj.Status = "WPWP";
                                                            }
                                                            else if (DailyTransactionObj.WorkingHrs != null)
                                                            {
                                                                DailyTransactionObj.Status = "WPWO";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.Status = "WOWO";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (DailyTransactionObj.WorkingHrs != null)
                                                        {
                                                            DailyTransactionObj.Status = "WPWP";

                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.Status = "WOWO";
                                                        }
                                                    }

                                                    WetosDB.SaveChanges();
                                                }
                                                else if (!string.IsNullOrEmpty(EmployeeObj.WeeklyOff2)) // #region MARK WeeklyOff2 AS WEEKOFF
                                                {
                                                    #region WEEKLY OFF 2

                                                    if (EmployeeObj.WeeklyOff2.ToUpper() == currentDayStr.ToUpper()
                                                        && WorkOnDeclaredHolidayCompOffList.Where(a => a.Branch.BranchId == EmployeeBranchId).Count() == 0) //IF WEEK OFF DAY IS NOT DECLARED HOLIDAY COMP WORK DAY CONDITION ADDED BY SHRADDHA ON 29 MAR 2018
                                                    {
                                                        string ReturnStatusMsg = string.Empty;

                                                        int WeekNumber = GetWeekOfMonth(CurrentDate);

                                                        //ADDED BY PUSHKAR ON 21 FEB 2020 FOR LAST SAT WORKING RULE !@#$%^
                                                        DateTime StartDateSat = new DateTime(CurrentDate.Year, CurrentDate.Month, 01, 0, 0, 0);
                                                        DateTime EndDateSat = StartDateSat.AddMonths(1).AddDays(-1);
                                                        int CountDay = 0;
                                                        TimeSpan DateDiff = EndDateSat.Subtract(StartDateSat);

                                                        RuleTransaction LastSatWorking = RuleTransactionList.Where(a => a.RuleId == 61).FirstOrDefault();

                                                        if (LastSatWorking != null)
                                                        {
                                                            if (LastSatWorking.Formula.ToUpper() == "TRUE")
                                                            {
                                                                for (int i = 0; i <= DateDiff.Days; i++)
                                                                {
                                                                    if (StartDateSat.Date.AddDays(i).DayOfWeek.ToString().ToUpper() == "SATURDAY")
                                                                    {
                                                                        CountDay = CountDay + 1;
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        if (EmployeeObj.First == true && WeekNumber == 1)
                                                        {
                                                            #region WO1

                                                            // Comman function call for status check and update
                                                            // Added by Rajas on 19 AUGUST 2017
                                                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Second == true && WeekNumber == 2)
                                                        {
                                                            #region WO2

                                                            // Comman function call for status check and update
                                                            // Added by Rajas on 19 AUGUST 2017
                                                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Third == true && WeekNumber == 3)
                                                        {
                                                            #region WO3

                                                            // Comman function call for status check and update
                                                            // Added by Rajas on 19 AUGUST 2017
                                                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Fourth == true && WeekNumber == 4 && CountDay != 4)
                                                        {
                                                            #region WO4

                                                            // Comman function call for status check and update
                                                            // Added by Rajas on 19 AUGUST 2017
                                                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Fifth == true && WeekNumber == 5)
                                                        {
                                                            #region WO5

                                                            // Comman function call for status check and update
                                                            // Added by Rajas on 19 AUGUST 2017
                                                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }

                                                        /// Mark WO shift in DailyTransaction
                                                        /// Added by Rajas on 4 JULY 2017
                                                        if (IsWeeklyOff == true)
                                                        {
                                                            DailyTransactionObj.ShiftId = StatusConstants.WeekOffShift;
                                                            DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                                                            DailyTransactionObj.Late = null;
                                                            DailyTransactionObj.Early = null;
                                                            DailyTransactionObj.LateCount = null;
                                                            DailyTransactionObj.EarlyCount = null;
                                                            DailyTransactionObj.Remark = null;

                                                            if (IsCORuleWO == true)
                                                            {
                                                                if (DailyTransactionObj.WorkingHrs != null)
                                                                {
                                                                    if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= WOtotalTime)
                                                                    {
                                                                        DailyTransactionObj.Status = "WPWP";
                                                                    }
                                                                    else if (DailyTransactionObj.WorkingHrs != null)
                                                                    {
                                                                        DailyTransactionObj.Status = "WPWO";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    DailyTransactionObj.Status = "WOWO";
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (DailyTransactionObj.WorkingHrs != null)
                                                                {
                                                                    DailyTransactionObj.Status = "WPWP";
                                                                }
                                                                else
                                                                {
                                                                    DailyTransactionObj.Status = "WOWO";
                                                                }
                                                            }
                                                        }

                                                        WetosDB.SaveChanges();
                                                    }

                                                    #endregion
                                                }

                                                WetosDB.SaveChanges();
                                            }
                                            catch (Exception)
                                            {

                                                //throw;
                                            }
                                        }

                                    }  // ADDED  BY MSJ ON 31 JAN 2018 

                                    #endregion

                                    #region MARK WO FROM SHIFT ROASTER MARS
                                    //!@#$%^
                                    if (ConsiderWOfromMaster != null && ConsiderWOfromMaster.Formula.ToUpper() == "FALSE")
                                    {
                                        try
                                        {

                                            ReturnMessage = string.Empty;
                                            UpdatedStatus = string.Empty;
                                            NewStatus = string.Empty;
                                            PostingFlagModelObj = new PostingFlagModel();
                                            IsWO = true;
                                            PostingFlagModelObj.IsWeekOff = true;

                                            RuleTransaction RTObjForCompOffFullDayLimitValueWO = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault();
                                            bool IsCORuleWO;
                                            TimeSpan WOtotalTime = new TimeSpan(0, 0, 0);
                                            if (RTObjForCompOffFullDayLimitValueWO != null)
                                            {
                                                string[] TimeForWO = RTObjForCompOffFullDayLimitValueWO.Formula.Split(':');
                                                int WOhrsSplit = Convert.ToInt32(TimeForWO[0]);
                                                int WOminSplit = Convert.ToInt32(TimeForWO[1]);
                                                WOtotalTime = new TimeSpan(WOhrsSplit, WOminSplit, 0);
                                                IsCORuleWO = true;
                                            }
                                            else
                                            {
                                                IsCORuleWO = false;
                                            }

                                            ShiftSchedule ShiftScheduleObj = WetosDB.ShiftSchedules.Where(a => a.ShiftMonth == CurrentDate.Month
                                                && a.ShiftYear == CurrentDate.Year && a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                                            if (ShiftScheduleObj != null)
                                            {
                                                string WeekOffStrfromShift = "";
                                                switch (CurrentDate.Day)
                                                {
                                                    case 1:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day1;
                                                        break;
                                                    case 2:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day2;
                                                        break;
                                                    case 3:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day3;
                                                        break;
                                                    case 4:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day4;
                                                        break;
                                                    case 5:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day5;
                                                        break;
                                                    case 6:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day6;
                                                        break;
                                                    case 7:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day7;
                                                        break;
                                                    case 8:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day8;
                                                        break;
                                                    case 9:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day9;
                                                        break;
                                                    case 10:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day10;
                                                        break;
                                                    case 11:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day11;
                                                        break;

                                                    case 12:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day12;
                                                        break;
                                                    case 13:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day13;
                                                        break;
                                                    case 14:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day14;
                                                        break;
                                                    case 15:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day15;
                                                        break;

                                                    case 16:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day16;
                                                        break;

                                                    case 17:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day17;
                                                        break;
                                                    case 18:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day18;
                                                        break;
                                                    case 19:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day19;
                                                        break;
                                                    case 20:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day20;
                                                        break;
                                                    case 21:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day21;
                                                        break;
                                                    case 22:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day22;
                                                        break;
                                                    case 23:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day23;
                                                        break;
                                                    case 24:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day24;
                                                        break;
                                                    case 25:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day25;
                                                        break;
                                                    case 26:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day26;
                                                        break;
                                                    case 27:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day27;
                                                        break;
                                                    case 28:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day28;
                                                        break;
                                                    case 29:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day29;
                                                        break;
                                                    case 30:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day30;
                                                        break;
                                                    case 31:
                                                        WeekOffStrfromShift = ShiftScheduleObj.Day31;
                                                        break;

                                                    default:
                                                        break;

                                                }

                                                if (WeekOffStrfromShift.ToUpper() == "WO" || WeekOffStrfromShift.ToUpper() == "WW")
                                                {
                                                    CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                    DailyTransactionObj.ShiftId = StatusConstants.WeekOffShift;  // Updated by Rajas on 19 AUGUST 2017
                                                    DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                                                    DailyTransactionObj.Late = null;
                                                    DailyTransactionObj.Early = null;
                                                    DailyTransactionObj.LateCount = null;
                                                    DailyTransactionObj.EarlyCount = null;
                                                    DailyTransactionObj.Remark = null;

                                                    if (IsCORuleWO == true)
                                                    {
                                                        if (DailyTransactionObj.WorkingHrs != null)
                                                        {
                                                            if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= WOtotalTime)
                                                            {
                                                                DailyTransactionObj.Status = "WPWP";
                                                            }
                                                            else if (DailyTransactionObj.WorkingHrs != null)
                                                            {
                                                                DailyTransactionObj.Status = "WPWO";
                                                            }
                                                            DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs; // ADDED BY PUSHKAR ON 19 DEC 2019
                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.Status = "WOWO";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (DailyTransactionObj.WorkingHrs != null)
                                                        {
                                                            DailyTransactionObj.Status = "WPWP";
                                                            DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs; // ADDED BY PUSHKAR ON 19 DEC 2019
                                                        }
                                                        else
                                                        {
                                                            DailyTransactionObj.Status = "WOWO";
                                                        }
                                                    }

                                                    WetosDB.SaveChanges();

                                                }
                                            }

                                        }
                                        catch (Exception Ex)
                                        {

                                            //throw;
                                        }
                                    }
                                    #endregion

                                    #region CODE FOR COMP OFF ADD INTO COMP OFF TABLE FOR EXTRA HOURS BASED ON RULE

                                    RuleTransaction RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == 9).FirstOrDefault(); // 9 - COMP ALLOWED ?
                                    RuleTransaction RTObjForCompOffFullDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault(); // IF COMPOFF ALLOWED FULL DAY LIMIT

                                    RuleTransaction RTObjForCompOffHalfDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 11).FirstOrDefault(); // IF COMPOFF ALLOWED HALF DAY LIMIT


                                    RuleTransaction RTObjForIsAutoCompOffavailable = RuleTransactionList.Where(a => a.RuleId == 32).FirstOrDefault(); // Is Auto Comp Off available?

                                    int FullDayRuleHourInt = 0;
                                    int HalfDayRuleHourInt = 0;

                                    if (RuleTransactionObj != null && RTObjForIsAutoCompOffavailable != null) // RULE 9 & 32 PRESENT //RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
                                    {
                                        //CODE ADDED BY SHRADDHA ON 19 FEB 2018

                                        #region RULE 34 AND 35 ADDED BY SHRADDHA ON 19 FEB 2018 FOR CUMULATIVE COMP OFF
                                        //RULE 34 - Extra Hours Accumulation Allowed or not
                                        //RULE 35 - Min. required extra hours for accumulation
                                        #endregion

                                        RuleTransaction ExtraHoursAccumulationAllowedornot = RuleTransactionList.Where(a => a.RuleId == 34).FirstOrDefault(); // 34 - Extra Hours Accumulation Allowed or not //CODE ADDED BY SHRADDHA ON 19 FEB 2018

                                        if (RuleTransactionObj.Formula.ToUpper().Trim() == "TRUE" && RTObjForIsAutoCompOffavailable.Formula.ToUpper().Trim() == "TRUE")//RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
                                        {
                                            #region COMP OFF ALLOWED OR NOT AND IF YES THEN EXTRA HOURS ACCUMULATION ALLOWED OR NOT


                                            if (ExtraHoursAccumulationAllowedornot != null && ExtraHoursAccumulationAllowedornot.Formula.ToUpper().Trim() == "TRUE")
                                            {
                                                #region IF EXTRA HOURS ACCUMULATION IS ALLOWED
                                                RuleTransaction MinRequiredExtraHoursForAccumulation = RuleTransactionList.Where(a => a.RuleId == 35).FirstOrDefault(); //35 - Min. required extra hours for accumulation //CODE ADDED BY SHRADDHA ON 19 FEB 2018
                                                RuleTransaction WeekDayCompOffFactor = RuleTransactionList.Where(a => a.RuleId == 36).FirstOrDefault(); //36 - Week day comp off factor //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                                                RuleTransaction WeekOffCompOffFactor = RuleTransactionList.Where(a => a.RuleId == 37).FirstOrDefault(); //37 - Week off comp off factor //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                                                RuleTransaction HolidayCompOffFactor = RuleTransactionList.Where(a => a.RuleId == 38).FirstOrDefault(); //38 - Holiday comp off factor //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                                                RuleTransaction CompOffSetTime = RuleTransactionList.Where(a => a.RuleId == 39).FirstOrDefault(); //39 - Comp off set time //CODE ADDED BY SHRADDHA ON 20 FEB 2018

                                                #region RULES ADDED BY SHRADDHA ON 20 FEB 2018 AS PER SUGGESTED BY KATRE SIR BUT NOT USED
                                                RuleTransaction IsExtraHoursRoundedOffForCompOff = RuleTransactionList.Where(a => a.RuleId == 40).FirstOrDefault(); //40 - Is Extra hours rounded off for Comp off //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                                                RuleTransaction CompOffRoundedOffTime = RuleTransactionList.Where(a => a.RuleId == 41).FirstOrDefault(); //41 - Comp Off Rounded Off Time //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                                                #endregion

                                                if (MinRequiredExtraHoursForAccumulation != null)
                                                {
                                                    // MIN REQUIRED EXTRA HOURS FOR ACCUMULATION
                                                    int AccumulationHourInt = 0;
                                                    int AccumulationMinuteInt = 0;
                                                    int MinTotalTimeRequiredForAccumulation = 0;
                                                    double CompOffBalance = 0;
                                                    string ReferenceString = string.Empty;

                                                    //CODE ADDED BY SHRADDHA ON 20 FEB 2018 START
                                                    int CompOffSetTimeHourInt = 0;
                                                    int CompOffSetTimeMinuteInt = 0;
                                                    int CompOffSetTimeDouble = 0;
                                                    DateTime CompOffHours = Convert.ToDateTime(DailyTransactionObj.ExtraHrs);

                                                    //CODE ADDED BY SHRADDHA ON 20 FEB 2018 END

                                                    if (MinRequiredExtraHoursForAccumulation != null)
                                                    {
                                                        // 08:00:00
                                                        string[] MinRequiredExtraHoursForAccumulationSplitValue = MinRequiredExtraHoursForAccumulation.Formula.Split(':');
                                                        AccumulationHourInt = Convert.ToInt32(MinRequiredExtraHoursForAccumulationSplitValue[0]); // Minutes missing
                                                        AccumulationMinuteInt = Convert.ToInt32(MinRequiredExtraHoursForAccumulationSplitValue[1]); // Minutes missing
                                                        MinTotalTimeRequiredForAccumulation = (60 * AccumulationHourInt) + AccumulationMinuteInt;

                                                        //CODE ADDED BY SHRADDHA ON 20 FEB 2018 START
                                                        bool IsWeekOff = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true ? true : false;
                                                        bool IsHoliday = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true ? true : false;
                                                        bool IsWeekDay = true;
                                                        if (DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true || DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true)
                                                        {
                                                            IsWeekDay = false;
                                                        }

                                                        #region CUMULATIVE COMP OFF FORMULA

                                                        #endregion
                                                        //CODE ADDED BY SHRADDHA ON 20 FEB 2018 END

                                                        if (DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) || DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff))
                                                        {
                                                            TimeSpan ExtraHrs = DailyTransactionObj.LogOut - DailyTransactionObj.Login;
                                                            DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);

                                                        }

                                                        //ADDED BY PUSHKAR ON 08 MAY 2018 FOR GETTING EXTRA HRS FOR WEEK-OFF EVEN IF WORKED FOR 1 HRS ON WO
                                                        if (DailyTransactionObj.Status.Contains(StatusConstants.WeeklyOffStatus))
                                                        {
                                                            //ADDED BY PUSHKAR ON 02 APRIL 2019
                                                            TimeSpan ExtraHrs = DailyTransactionObj.LogOut - DailyTransactionObj.Login;
                                                            if (DailyTransactionObj.WorkingHrs != null)
                                                            {
                                                                DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);
                                                            }
                                                            //DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                                                        }

                                                        #region PRESENT ON NORMAL WEEK DAY OR WEEKOFF OR HOLIDAY
                                                        int TotalExtraHoursTimeForWeekDays = 0;
                                                        if (DailyTransactionObj.ExtraHrs != null)
                                                        {
                                                            TotalExtraHoursTimeForWeekDays = (60 * DailyTransactionObj.ExtraHrs.Value.Hour) + DailyTransactionObj.ExtraHrs.Value.Minute;
                                                        }

                                                        #region IF WORKING HOURS TOTAL TIME MORE THAN OR EQUAL TO REQUIRED TIME FOR ACCUMULATION
                                                        //if (TotalExtraHoursTimeForWeekDays >= MinTotalTimeRequiredForAccumulation)
                                                        {
                                                            // 08:00:00
                                                            string[] CompOffSetTimeSplitValue = CompOffSetTime.Formula.Split(':');
                                                            CompOffSetTimeHourInt = Convert.ToInt32(CompOffSetTimeSplitValue[0]); // Minutes missing
                                                            CompOffSetTimeMinuteInt = Convert.ToInt32(CompOffSetTimeSplitValue[1]); // Minutes missing
                                                            CompOffSetTimeDouble = (60 * CompOffSetTimeHourInt) + CompOffSetTimeMinuteInt;

                                                            int ExtraCoHourMinutes = TotalExtraHoursTimeForWeekDays - MinTotalTimeRequiredForAccumulation;
                                                            if (ExtraCoHourMinutes % CompOffSetTimeDouble == 0)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                #region CODE TO BE ADDED WITH HELP OF MSJ NEED HELP GF MSJ
                                                                int ExtraMinutesFraction = (ExtraCoHourMinutes % CompOffSetTimeDouble);
                                                                ExtraCoHourMinutes = ExtraCoHourMinutes - ExtraMinutesFraction;
                                                                TotalExtraHoursTimeForWeekDays = TotalExtraHoursTimeForWeekDays - ExtraMinutesFraction;
                                                                #endregion
                                                            }



                                                            //int abcHour = Convert.ToInt32(ExtraCoHourMinutes % 60);
                                                            double IsWeekOffInt = Convert.ToDouble(IsWeekOff);
                                                            double IsWeekDayInt = Convert.ToDouble(IsWeekDay);
                                                            double IsHolidayInt = Convert.ToDouble(IsHoliday);
                                                            TotalExtraHoursTimeForWeekDays = Convert.ToInt32((TotalExtraHoursTimeForWeekDays * IsWeekOffInt) + (TotalExtraHoursTimeForWeekDays * IsWeekDayInt) + (TotalExtraHoursTimeForWeekDays * IsHolidayInt));

                                                            int TotalExtraMinutesForWeekDays = Convert.ToInt32(TotalExtraHoursTimeForWeekDays % 60);
                                                            int TotalExtraHoursForWeekDays = Convert.ToInt32((TotalExtraHoursTimeForWeekDays - TotalExtraMinutesForWeekDays) / 60);
                                                            CompOffHours = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, TotalExtraHoursForWeekDays, TotalExtraMinutesForWeekDays, 0);


                                                            //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 START
                                                            //UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffBalance, ref ReferenceString);
                                                            //UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffHours, IsWeekDay, IsWeekOff, IsHoliday, CompOffBalance, ref ReferenceString);
                                                            UpdateCumulativeManualCompOffTbl(WetosDB, DailyTransactionObj, TotalExtraHoursTimeForWeekDays, IsWeekDay, IsWeekOff, IsHoliday, CompOffBalance, ref ReferenceString);
                                                            //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 END
                                                        }
                                                        #endregion
                                                        #endregion

                                                    }
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region IF EXTRA HOURS ACCUMULATION IS NOT ALLOWED
                                                string ReturnStatusMsg = string.Empty;

                                                // MIN TIME FOR FULL DAY COMP OFF
                                                if (RTObjForCompOffFullDayLimitValue != null)
                                                {
                                                    // 08:00:00
                                                    string[] FullDayRuleSplitValue = RTObjForCompOffFullDayLimitValue.Formula.Split(':');
                                                    FullDayRuleHourInt = Convert.ToInt32(FullDayRuleSplitValue[0]); // Minutes missing
                                                }

                                                // MIN TIME FOR HALF DAY COMP OFF
                                                if (RTObjForCompOffHalfDayLimitValue != null)
                                                {
                                                    string[] HalfDayRuleSplitValue = RTObjForCompOffHalfDayLimitValue.Formula.Split(':');
                                                    HalfDayRuleHourInt = Convert.ToInt32(HalfDayRuleSplitValue[0]); // Minutes missing
                                                }

                                                if (FullDayRuleHourInt > 0)
                                                {
                                                    // STATIC FUNCTION
                                                    MarkCompOffForExtraHrsEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }

                                    }
                                    #endregion

                                    WetosDB.SaveChanges(); //?????

                                }  // END OF LOCK CONDITION // ADDED BY MSJ ON 17 AUG 2017
                            }
                        }//END CONDITION FOR NEW JOINEE ADDED BY PUSHKAR ON 22 FEB 2019
                        catch (System.Exception Ex1)
                        {
                            ErrorInEmployee.Add(DailyTransactionObj.EmployeeId.ToString());
                            #region ADD AUDIT TRAIL CODE
                            try
                            {

                                AuditTrail action = new AuditTrail();
                                action.LogDate = DateTime.Now;

                                // Updated by Rajas on 1 AUGUST 2017 START
                                //if (DailyTransactionObj.EmployeeId.ToString() > 1024)

                                action.Action = Ex1.Message == null ? DailyTransactionObj.EmployeeId.ToString() : (Ex1.Message + DateTime.Now);

                                // Updated by Rajas on 1 AUGUST 2017 END

                                action.userid = 0; // SessionPersister.UserInfo.UserId;
                                action.UserName = "0"; // SessionPersister.UserInfo.UserName;
                                action.UserRoleNo = 0;
                                action.y_id = 0;
                                action.SoftwareVersion = "STPLSERVER";
                                action.SessionId = 0;

                                action.MachineIP = " ";
                                action.MachineNo = " ";

                                WetosDB.AuditTrails.AddObject(action);

                                WetosDB.SaveChanges();

                                String path = System.Web.HttpContext.Current.Server.MapPath("~/ErrorLog/myFile.txt");
                                using (StreamWriter writer = new StreamWriter(path, true))
                                {
                                    writer.WriteLine(Ex1.Message);
                                }
                            }
                            catch (System.Exception Ex)
                            {
                                String path = System.Web.HttpContext.Current.Server.MapPath("~/ErrorLog/myFile.txt");
                                using (StreamWriter writer = new StreamWriter(path, true))
                                {
                                    writer.WriteLine("Error in Add audit trail on posting attendance:" + Ex.Message.ToString() + " _ " + (Ex.InnerException == null ? string.Empty : Ex.InnerException.Message));
                                }

                            }
                            #endregion
                        }

                    }

                    #endregion

                    #region CODE TO MARK FOR LEAVE APPLICATION STATUS IF ANY SANCTIONED LEAVE IS AVAILABLE

                    //ADDED BY SHRADDHA ON 04 JAN 2017 FOR LEAVE APPLICATION STAUS
                    // Updated by Rajas on 10 AUGUST 2017 for Delete and StatusId
                    List<LeaveApplication> LeaveApplicationObj = WetosDB.LeaveApplications.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                        && a.StatusId == 2 && a.MarkedAsDelete == 0).ToList();

                    if (LeaveApplicationObj.Count > 0)
                    {
                        ReturnMessage = string.Empty;
                        UpdatedStatus = string.Empty;
                        NewStatus = string.Empty;
                        PostingFlagModelObj = new PostingFlagModel();

                        // Added by Rajas on 7 AUGUST 2017
                        PostingFlagModelObj.IsOnLeave = true;

                        foreach (LeaveApplication LeaveApplicationCurrentDayObj in LeaveApplicationObj)
                        {
                            for (DateTime CurrentLeaveDate = LeaveApplicationCurrentDayObj.FromDate; CurrentLeaveDate.Date <= LeaveApplicationCurrentDayObj.ToDate;
                                CurrentLeaveDate = CurrentLeaveDate.AddDays(1))
                            {
                                //ADDED BY 
                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentLeaveDate
                                    && a.EmployeeId == LeaveApplicationCurrentDayObj.EmployeeId
                                    && (string.IsNullOrEmpty(a.Lock) ? false : a.Lock.ToUpper() == "N" ? false : true) == false).ToList();

                                foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
                                {

                                    DailyTransactionAsLeave.ActualStatus = DailyTransactionAsLeave.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
                                    WetosDB.SaveChanges();
                                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS START

                                    // Updated by Rajas on 18 AUGUST 2017 START
                                    if (DailyTransactionAsLeave.Status.Contains(StatusConstants.Present))  // Need to split status 
                                    {
                                        // Pending need to Verify (TEST , generate case and update code)
                                        #region SENT BACK LEAVE AS "RETURNED" TO EMPLOYEE, IF EMPLOYEE PRESENT ON ALREADY SANCTIONED DAY



                                        if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate)
                                        {
                                            NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                            switch (LeaveApplicationCurrentDayObj.FromDayStatus)
                                            {
                                                case 1:
                                                    if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
                                                    {
                                                        // No change in status
                                                    }
                                                    break;

                                                case 2:
                                                    if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                                    }

                                                    break;

                                                case 3:

                                                    if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                                    }
                                                    break;

                                                default:

                                                    break;
                                            }

                                            WetosDB.SaveChanges();
                                        }
                                        else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate)
                                        {
                                            switch (LeaveApplicationCurrentDayObj.ToDayStatus)
                                            {
                                                case 1:
                                                    if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
                                                    {
                                                        // No change in status
                                                    }
                                                    break;

                                                case 2:
                                                    if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                                    }
                                                    break;

                                                case 3:
                                                    if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                                    }
                                                    break;

                                                default:

                                                    break;
                                            }

                                            WetosDB.SaveChanges();
                                        }
                                        else
                                        {
                                            if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                            {
                                                DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                            }
                                            else if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                            {
                                                DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                            }
                                            else
                                            {
                                                // No change in status
                                            }

                                            WetosDB.SaveChanges();
                                        }
                                        #endregion

                                    } // Updated by Rajas on 18 AUGUST 2017 END
                                    else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate
                                        && LeaveApplicationCurrentDayObj.StatusId == 2) // From Day sanction
                                    {
                                        if (LeaveApplicationCurrentDayObj.FromDayStatus == 2)  // First half
                                        {
                                            PostingFlagModelObj.IsFirstHalfLeave = true;
                                        }
                                        else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3) // Second half
                                        {
                                            PostingFlagModelObj.IsSecondHalfLeave = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayLeave = true;
                                        }

                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                    }
                                    else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate
                                        && LeaveApplicationCurrentDayObj.StatusId == 2)  // To Day sanction
                                    {
                                        if (LeaveApplicationCurrentDayObj.FromDayStatus == 2) // First half
                                        {
                                            PostingFlagModelObj.IsFirstHalfLeave = true;
                                        }
                                        else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3) // Second half
                                        {
                                            PostingFlagModelObj.IsSecondHalfLeave = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayLeave = true;
                                        }

                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                        && LeaveApplicationCurrentDayObj.StatusId == 2)  // Added by Rajas on 18 AUGUST 2017
                                    {
                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                        PostingFlagModelObj.IsFullDayLeave = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                    }
                                    //else
                                    //{
                                    //    NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                    //    PostingFlagModelObj.IsFullDayLeave = true;

                                    //    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                    //    DailyTransactionAsLeave.Status = UpdatedStatus;
                                    //}
                                    //else if (DailyTransactionAsLeave.Status.Trim() == "AAAA" && LeaveApplicationCurrentDayObj.StatusId != 2)
                                    //{
                                    //    DailyTransactionAsLeave.Status = "AAAA";
                                    //}
                                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS END
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }
                    #endregion

                    #region CODE TO MARK OD

                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL START
                    // Update by Rajas on 10 AUGUST 2017 for Delete and StatusId
                    List<ODTour> ODTourList = WetosDB.ODTours.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                        && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                    if (ODTourList.Count > 0)
                    {
                        PostingFlagModelObj = new PostingFlagModel();

                        foreach (ODTour ODTourCurrentDayObj in ODTourList)
                        {
                            // Code updated by Rajas on 9 JULY 2017 for Status START
                            for (DateTime CurrentODDate = Convert.ToDateTime(ODTourCurrentDayObj.FromDate); CurrentODDate.Date <= ODTourCurrentDayObj.ToDate; CurrentODDate = CurrentODDate.AddDays(1))
                            {
                                // Status as per selection of ODTourType
                                // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                                // Updated by Rajas on 5 AUGUST 2017
                                UpdatedStatus = string.Empty;
                                NewStatus = string.Empty;
                                PostingFlagModelObj.IsOdTour = true;   // Added by Rajas on 7 AUGUST 2017

                                if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "TOUR")
                                {
                                    NewStatus = "TO";
                                }
                                else if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "OD")
                                {
                                    NewStatus = "OD";
                                }
                                else if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "HALF/FULL DAY OD")
                                {
                                    NewStatus = "OD";
                                }
                                else
                                {
                                    NewStatus = "PP";
                                }

                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentODDate && a.EmployeeId == ODTourCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
                                {
                                    DailyTransactionAsLeave.ActualStatus = DailyTransactionAsLeave.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
                                    WetosDB.SaveChanges();



                                    //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE START
                                    CalculateODWorkingHours(WetosDB, DailyTransactionAsLeave, ODTourCurrentDayObj, PostingFlagModelObj, CurrentODDate,
                                        UpdatedStatus, NewStatus, ref ReturnMessage);
                                    //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE END

                                    // Added by Rajas on 29 AUGUST 2017 START
                                    int EmployeeGroupIdObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == DailyTransactionAsLeave.EmployeeId).Select(a => a.EmployeeGroup.EmployeeGroupId).FirstOrDefault();
                                    List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.CompanyId == DailyTransactionAsLeave.CompanyId
                                        && a.BranchId == DailyTransactionAsLeave.BranchId && a.EmployeeGroupId == EmployeeGroupIdObj).ToList();
                                    RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

                                    //Code Added By Shraddha on 06 JUNE 2017 To Get LateCount from Rules end

                                    #region CODE TO DEDUCT ALREADY MARKED LATE COUNT

                                    NewStatus = string.Empty;
                                    UpdatedStatus = string.Empty;
                                    ReturnMessage = string.Empty;

                                    if (RuleForLateCount != null)
                                    {
                                        if (DailyTransactionAsLeave.LateCount >= 1)
                                        {
                                            DailyTransactionAsLeave.LateCount = DailyTransactionAsLeave.LateCount - 1;
                                            WetosDB.SaveChanges();

                                            PostingFlagModelObj.IsLateCountReduced = true;

                                            if (DailyTransactionAsLeave.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                                DailyTransactionAsLeave.Status = UpdatedStatus;
                                                WetosDB.SaveChanges();
                                            }

                                            else if (DailyTransactionAsLeave.LateCount > Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = "Late";
                                                WetosDB.SaveChanges();
                                            }
                                        }
                                        // > 2 ABSENT
                                        // ==2 PRESENT 

                                        // Initialise flags
                                        PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                        // }
                                    }
                                    // Updated by Rajas on 5 AUGUST 2017 END

                                    #endregion

                                    #region CODE TO DEDUCT ALREADY MARKED EARLY COUNT

                                    NewStatus = string.Empty;
                                    UpdatedStatus = string.Empty;
                                    ReturnMessage = string.Empty;

                                    // Updated by Rajas on 5 AUGUST 2017 START
                                    //foreach (DailyTransaction DailyTransObj in AllEmpEarlyData)
                                    //{
                                    if (RuleForLateCount != null)
                                    {
                                        if (DailyTransactionAsLeave.EarlyCount >= 1)
                                        {
                                            DailyTransactionAsLeave.EarlyCount = DailyTransactionAsLeave.EarlyCount - 1;
                                            WetosDB.SaveChanges();

                                            PostingFlagModelObj.IsLateCountReduced = true;

                                            if (DailyTransactionAsLeave.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                                DailyTransactionAsLeave.Status = UpdatedStatus;
                                                WetosDB.SaveChanges();
                                            }

                                            else if (DailyTransactionAsLeave.EarlyCount > Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                //abcd.Status = "AAPP^";
                                                WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = "Early";
                                                WetosDB.SaveChanges();
                                            }
                                        }
                                        // > 2 ABSENT
                                        // ==2 PRESENT 

                                        // Initialise flags
                                        PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                    }
                                    //}
                                    // Updated by Rajas on 5 AUGUST 2017 END

                                    #endregion

                                    // Added by Rajas on 29 AUGUST 2017 END
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }


                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL END
                    #endregion

                    #region CODE TO MARK LATE EARLY

                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL START
                    // Update by Rajas on 10 AUGUST 2017 for Delete and StatusId
                    List<ODLateEarly> ODLateEarlyList = WetosDB.ODLateEarlies.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                        && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                    if (ODLateEarlyList.Count > 0)
                    {
                        PostingFlagModelObj = new PostingFlagModel();

                        foreach (ODLateEarly ODTourCurrentDayObj in ODLateEarlyList)
                        {
                            // Code updated by Rajas on 9 JULY 2017 for Status START
                            for (DateTime CurrentODDate = Convert.ToDateTime(ODTourCurrentDayObj.FromDate); CurrentODDate.Date <= ODTourCurrentDayObj.ToDate; CurrentODDate = CurrentODDate.AddDays(1))
                            {
                                // Status as per selection of ODTourType
                                // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                                // Updated by Rajas on 5 AUGUST 2017
                                UpdatedStatus = string.Empty;
                                NewStatus = string.Empty;
                                PostingFlagModelObj.IsOdTour = true;   // Added by Rajas on 7 AUGUST 2017

                                if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "TOUR")
                                {
                                    NewStatus = "TO";
                                }
                                else if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "OD")
                                {
                                    NewStatus = "OD";
                                }
                                else
                                {
                                    NewStatus = "PP";
                                }

                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentODDate && a.EmployeeId == ODTourCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
                                {
                                    DailyTransactionAsLeave.ActualStatus = DailyTransactionAsLeave.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
                                    WetosDB.SaveChanges();

                                    //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE START
                                    CalculateODLateEarlyWorkingHours(WetosDB, DailyTransactionAsLeave, ODTourCurrentDayObj, PostingFlagModelObj, CurrentODDate,
                                        UpdatedStatus, NewStatus, ref ReturnMessage);
                                    //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE END

                                    // Added by Rajas on 29 AUGUST 2017 START
                                    int EmployeeGroupIdObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == DailyTransactionAsLeave.EmployeeId).Select(a => a.EmployeeGroup.EmployeeGroupId).FirstOrDefault();
                                    List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.CompanyId == DailyTransactionAsLeave.CompanyId
                                        && a.BranchId == DailyTransactionAsLeave.BranchId && a.EmployeeGroupId == EmployeeGroupIdObj).ToList();
                                    RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

                                    //Code Added By Shraddha on 06 JUNE 2017 To Get LateCount from Rules end

                                    #region CODE TO DEDUCT ALREADY MARKED LATE COUNT

                                    NewStatus = string.Empty;
                                    UpdatedStatus = string.Empty;
                                    ReturnMessage = string.Empty;

                                    if (RuleForLateCount != null)
                                    {
                                        if (DailyTransactionAsLeave.LateCount >= 1)
                                        {
                                            DailyTransactionAsLeave.LateCount = DailyTransactionAsLeave.LateCount - 1;
                                            WetosDB.SaveChanges();

                                            PostingFlagModelObj.IsLateCountReduced = true;

                                            if (DailyTransactionAsLeave.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                                DailyTransactionAsLeave.Status = UpdatedStatus;
                                                DailyTransactionAsLeave.LateCount = null;
                                                if (DailyTransactionAsLeave.LeaveTypeDeducted != null)
                                                {
                                                    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionAsLeave.EmployeeId
                                                     && a.LeaveType == DailyTransactionAsLeave.LeaveTypeDeducted).FirstOrDefault();

                                                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance + 0.5;
                                                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed - 0.5;

                                                    DailyTransactionAsLeave.LeaveDeducted = null;
                                                    DailyTransactionAsLeave.LeaveTypeDeducted = null;
                                                }

                                                WetosDB.SaveChanges();
                                            }
                                            else if (DailyTransactionAsLeave.LateCount > Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = "Late";
                                                WetosDB.SaveChanges();
                                            }
                                        }
                                        // > 2 ABSENT
                                        // ==2 PRESENT 

                                        // Initialise flags
                                        PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                        // }
                                    }
                                    // Updated by Rajas on 5 AUGUST 2017 END

                                    #endregion

                                    #region CODE TO DEDUCT ALREADY MARKED EARLY COUNT

                                    NewStatus = string.Empty;
                                    UpdatedStatus = string.Empty;
                                    ReturnMessage = string.Empty;

                                    // Updated by Rajas on 5 AUGUST 2017 START
                                    //foreach (DailyTransaction DailyTransObj in AllEmpEarlyData)
                                    //{
                                    if (RuleForLateCount != null)
                                    {
                                        if (DailyTransactionAsLeave.EarlyCount >= 1)
                                        {
                                            DailyTransactionAsLeave.EarlyCount = DailyTransactionAsLeave.EarlyCount - 1;
                                            WetosDB.SaveChanges();

                                            PostingFlagModelObj.IsLateCountReduced = true;

                                            if (DailyTransactionAsLeave.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                                DailyTransactionAsLeave.Status = UpdatedStatus;
                                                DailyTransactionAsLeave.EarlyCount = null;
                                                if (DailyTransactionAsLeave.LeaveTypeDeducted != null)
                                                {
                                                    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionAsLeave.EmployeeId
                                                     && a.LeaveType == DailyTransactionAsLeave.LeaveTypeDeducted).FirstOrDefault();

                                                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance + 0.5;
                                                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed - 0.5;

                                                    DailyTransactionAsLeave.LeaveDeducted = null;
                                                    DailyTransactionAsLeave.LeaveTypeDeducted = null;
                                                }

                                                WetosDB.SaveChanges();
                                            }

                                            else if (DailyTransactionAsLeave.EarlyCount > Convert.ToInt32(RuleForLateCount.Formula))
                                            {
                                                //abcd.Status = "AAPP^";
                                                WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                DailyTransactionAsLeave.Remark = "Early";
                                                WetosDB.SaveChanges();
                                            }
                                        }
                                        // > 2 ABSENT
                                        // ==2 PRESENT 

                                        // Initialise flags
                                        PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                    }
                                    //}
                                    // Updated by Rajas on 5 AUGUST 2017 END

                                    #endregion

                                    // Added by Rajas on 29 AUGUST 2017 END
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }


                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL END
                    #endregion

                    #region CODE TO MARK COMPOFF

                    // Added by Rajas on 12 AUGUST 2017 START

                    List<CompOffApplication> COObj = WetosDB.CompOffApplications.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                        && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                    if (COObj.Count > 0)
                    {
                        PostingFlagModelObj = new PostingFlagModel();

                        PostingFlagModelObj.IsCO = true;   // Added by Rajas on 7 AUGUST 2017

                        foreach (CompOffApplication COCurrentDayObj in COObj)
                        {
                            // Status as per selection of ODTourType
                            // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                            // Updated by Rajas on 5 AUGUST 2017
                            UpdatedStatus = string.Empty;
                            NewStatus = StatusConstants.CO;

                            // Code updated by Rajas on 9 JULY 2017 for Status START
                            for (DateTime CurrentCODate = Convert.ToDateTime(COCurrentDayObj.FromDate); CurrentCODate.Date <= COCurrentDayObj.ToDate; CurrentCODate = CurrentCODate.AddDays(1))
                            {
                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentCODate && a.EmployeeId == COCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsCO in DailyTransactionListForCurrentDate)
                                {
                                    DailyTransactionAsCO.ActualStatus = DailyTransactionAsCO.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
                                    WetosDB.SaveChanges();
                                    if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayPresentStatus)  // need to verify
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayPresentStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.FromDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2)
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.FromDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.ToDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2) // WHY NOT INT
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.ToDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        //
                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                    && COCurrentDayObj.StatusId == 2)  // Added by Rajas on 21 SEP 2017 START
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus && COCurrentDayObj.StatusId != 2) // Pending need to Verify (TEST , generate case and update code)
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayAbsentStatus;
                                    }
                                    else
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    // Added by Rajas on 21 SEP 2017 END

                                    WetosDB.SaveChanges();
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }

                    // Added by Rajas on 12 AUGUST 2017 END
                    #endregion

                    #region CODE TO MARK CUMULATIVE COMPOFF

                    // Added by Rajas on 12 AUGUST 2017 START

                    List<CumulativeCompOffApplication> CumulativeCOObj = WetosDB.CumulativeCompOffApplications.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                        && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                    if (CumulativeCOObj.Count > 0)
                    {
                        PostingFlagModelObj = new PostingFlagModel();

                        PostingFlagModelObj.IsCO = true;   // Added by Rajas on 7 AUGUST 2017

                        foreach (CumulativeCompOffApplication COCurrentDayObj in CumulativeCOObj)
                        {
                            // Status as per selection of ODTourType
                            // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                            // Updated by Rajas on 5 AUGUST 2017
                            UpdatedStatus = string.Empty;
                            NewStatus = StatusConstants.CO;

                            // Code updated by Rajas on 9 JULY 2017 for Status START
                            for (DateTime CurrentCODate = Convert.ToDateTime(COCurrentDayObj.FromDate); CurrentCODate.Date <= COCurrentDayObj.ToDate; CurrentCODate = CurrentCODate.AddDays(1))
                            {
                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentCODate && a.EmployeeId == COCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsCO in DailyTransactionListForCurrentDate)
                                {
                                    DailyTransactionAsCO.ActualStatus = DailyTransactionAsCO.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
                                    WetosDB.SaveChanges();
                                    if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayPresentStatus)  // need to verify
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayPresentStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.FromDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2)
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.FromDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.ToDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2) // WHY NOT INT
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.ToDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        //
                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                    && COCurrentDayObj.StatusId == 2)  // Added by Rajas on 21 SEP 2017 START
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus && COCurrentDayObj.StatusId != 2) // Pending need to Verify (TEST , generate case and update code)
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayAbsentStatus;
                                    }
                                    else
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    // Added by Rajas on 21 SEP 2017 END

                                    WetosDB.SaveChanges();
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }

                    // Added by Rajas on 12 AUGUST 2017 END
                    #endregion
                }
                #endregion

                // Added by Rajas on 18 AUGUST 2017 START
                // Generate error string to indicate error occured for processing data for employeeid
                if (ErrorInEmployee.Count > 0)
                {
                    ErrorMessage = "Error in data processing for EmployeeId : " + string.Join(", ", ErrorInEmployee);
                    #region ADD AUDIT TRAIL CODE
                    try
                    {
                        AuditTrail action = new AuditTrail();
                        action.LogDate = DateTime.Now;

                        // Updated by Rajas on 1 AUGUST 2017 START
                        if (ErrorMessage.Length > 1024)
                        {
                            action.Action = ErrorMessage.Substring(0, 1000);
                        }
                        else
                        {
                            action.Action = ErrorMessage;
                        }
                        // Updated by Rajas on 1 AUGUST 2017 END

                        action.userid = 0; // SessionPersister.UserInfo.UserId;
                        action.UserName = "0"; // SessionPersister.UserInfo.UserName;
                        action.UserRoleNo = 0;
                        action.y_id = 0;
                        action.SoftwareVersion = "STPLSERVER";
                        action.SessionId = 0;

                        action.MachineIP = " ";
                        action.MachineNo = " ";

                        WetosDB.AuditTrails.AddObject(action);

                        WetosDB.SaveChanges();

                        String path = System.Web.HttpContext.Current.Server.MapPath("~/ErrorLog/myFile.txt");
                        using (StreamWriter writer = new StreamWriter(path, true))
                        {
                            writer.WriteLine(ErrorMessage);
                        }
                    }
                    catch (System.Exception E)
                    {
                        String path = System.Web.HttpContext.Current.Server.MapPath("~/ErrorLog/myFile.txt");
                        using (StreamWriter writer = new StreamWriter(path, true))
                        {
                            writer.WriteLine("Error in Add audit trail on posting attendance:" + E.Message.ToString() + " _ " + (E.InnerException == null ? string.Empty : E.InnerException.Message));
                        }

                    }
                    #endregion
                }
                // Added by Rajas on 18 AUGUST 2017 END

                ReturnStatus = true;
            }
            catch (System.Exception ex)
            {
                ErrorMessage = "Error in POSTING due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                #region ADD AUDIT TRAIL CODE
                try
                {
                    AuditTrail action = new AuditTrail();
                    action.LogDate = DateTime.Now;

                    // Updated by Rajas on 1 AUGUST 2017 START
                    if (ErrorMessage.Length > 1024)
                    {
                        action.Action = ErrorMessage.Substring(0, 1000);
                    }
                    else
                    {
                        action.Action = ErrorMessage;
                    }
                    // Updated by Rajas on 1 AUGUST 2017 END

                    action.userid = 0; // SessionPersister.UserInfo.UserId;
                    action.UserName = "0"; // SessionPersister.UserInfo.UserName;
                    action.UserRoleNo = 0;
                    action.y_id = 0;
                    action.SoftwareVersion = "STPLSERVER";
                    action.SessionId = 0;

                    action.MachineIP = " ";
                    action.MachineNo = " ";

                    WetosDB.AuditTrails.AddObject(action);

                    WetosDB.SaveChanges();

                    String path = System.Web.HttpContext.Current.Server.MapPath("~/ErrorLog/myFile.txt");
                    using (StreamWriter writer = new StreamWriter(path, true))
                    {
                        writer.WriteLine(ErrorMessage);
                    }
                }
                catch (System.Exception E)
                {
                    String path = System.Web.HttpContext.Current.Server.MapPath("~/ErrorLog/myFile.txt");
                    using (StreamWriter writer = new StreamWriter(path, true))
                    {
                        writer.WriteLine("Error in Add audit trail on posting attendance:" + E.Message.ToString() + " _ " + (E.InnerException == null ? string.Empty : E.InnerException.Message));
                    }
                }
                #endregion
            }

            // END //

            return ReturnStatus;
        }

        /// <summary>
        ///  LATE MARK
        /// </summary>
        /// <param name="GlobalSettingObj"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="DeductionDay"></param>
        /// <param name="LateAllowed"></param>
        public static void LateMarkAsAbsent(GlobalSetting GlobalSettingObj, DailyTransaction DailyTransactionObj, int DeductionDay, int LateAllowed)
        {
            // Added by Rajas on 12 AUGUST 2017 
            // Global setting value base deduction 
            if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
            {
                if (DailyTransactionObj.LateCount % LateAllowed == 0)
                {
                    switch (DeductionDay)
                    {
                        case 0:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Late";
                            break;

                        case 1:

                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                            DailyTransactionObj.Remark = "Late";
                            break;

                        case 3:

                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Late";
                            break;

                        default:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                            }
                            DailyTransactionObj.Remark = "Late";
                            break;
                    }

                }
            }
            else   // Deduct half day after every allowed late count 
            {
                if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
                {
                    switch (DeductionDay)
                    {
                        case 0:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Late";
                            break;

                        case 1:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                            }
                            DailyTransactionObj.Remark = "Late";
                            break;

                        case 3:

                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Late";
                            break;

                        default:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                            }
                            DailyTransactionObj.Remark = "Late";
                            break;
                    }
                }
                else // Updated by Rajas on 1 SEP 2017
                {
                    if (DailyTransactionObj.LateCount % LateAllowed == 0)
                    {
                        switch (DeductionDay)
                        {
                            case 0:
                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                }
                                DailyTransactionObj.Remark = "Late";
                                break;

                            case 1:
                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                }
                                DailyTransactionObj.Remark = "Late";
                                break;

                            case 3:

                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                }
                                DailyTransactionObj.Remark = "Late";
                                break;

                            default:
                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                }
                                DailyTransactionObj.Remark = "Late";
                                break;
                        }
                    }
                }
            }
        }

        /// <summary>
        ///  LATE MARK
        /// </summary>
        /// <param name="GlobalSettingObj"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="DeductionDay"></param>
        /// <param name="LateAllowed"></param>
        public static void EarlyMarkAsAbsent(GlobalSetting GlobalSettingObj, DailyTransaction DailyTransactionObj, int DeductionDay, int EarlyAllowed)
        {
            // Added by Rajas on 12 AUGUST 2017 
            // Global setting value base deduction 
            if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
            {
                if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
                {
                    switch (DeductionDay)
                    {
                        case 0:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Early";
                            break;

                        case 1:

                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                            DailyTransactionObj.Remark = "Early";
                            break;

                        case 3:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Early";
                            break;

                        default:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                            }
                            DailyTransactionObj.Remark = "Early";
                            break;
                    }

                }
            }
            else   // Deduct half day after every allowed late count 
            {
                if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
                {
                    switch (DeductionDay)
                    {
                        case 0:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Early";
                            break;

                        case 1:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                            }
                            DailyTransactionObj.Remark = "Early";
                            break;

                        case 3:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                            }
                            DailyTransactionObj.Remark = "Early";
                            break;

                        default:
                            if (DailyTransactionObj.Status.Length > 3)
                            {
                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                            }
                            DailyTransactionObj.Remark = "Early";
                            break;
                    }
                }
                else // Updated by Rajas on 1 SEP 2017
                {
                    if (DailyTransactionObj.LateCount % EarlyAllowed == 0)
                    {
                        switch (DeductionDay)
                        {
                            case 0:
                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                }
                                DailyTransactionObj.Remark = "Early";
                                break;

                            case 1:
                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                }
                                DailyTransactionObj.Remark = "Early";
                                break;

                            case 3:
                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                }
                                DailyTransactionObj.Remark = "Early";
                                break;

                            default:
                                if (DailyTransactionObj.Status.Length > 3)
                                {
                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                }
                                DailyTransactionObj.Remark = "Early";
                                break;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="GlobalSettingObj"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="DeductionDay"></param>
        /// <param name="LateAllowed"></param>
        /// <param name="DeductLeaveCode"></param>
        /// <param name="NoOfDaysDeduct"></param>
        public static void DeductFromLeave(WetosDBEntities WetosDB, GlobalSetting GlobalSettingObj, DailyTransaction DailyTransactionObj, int DeductionDay, int EarlyLateAllowed, string DeductLeaveCode, string NoOfDaysDeduct, int IsEarlyOrLate)
        {
            bool LeaveToDeduct = false;

            // MODIFIED  BY MSJ ON 18 MARCH 2019 START

            if (IsEarlyOrLate == 1)
            {
                // A
                //LeaveToDeduct = true; // DailyTransactionObj.EarlyCount > EarlyLateAllowed ? true : false;
                LeaveToDeduct = DailyTransactionObj.EarlyCount > EarlyLateAllowed ? true : false;

            }
            else
            {
                //LeaveToDeduct = DailyTransactionObj.LateCount > EarlyLateAllowed ? true : false;
                LeaveToDeduct = DailyTransactionObj.LateCount % EarlyLateAllowed == 0 ? true : false;
            }

            //LeaveToDeduct = DailyTransactionObj.LateCount % EarlyLateAllowed == 0 ? true : false;
            // MODIFIED  BY MSJ ON 18 MARCH 2019 END

            //if (DailyTransactionObj.LateCount > LateAllowed)

            if (LeaveToDeduct == true)
            {

                string[] LeaveCodes = DeductLeaveCode.Split(',');
                int Count = LeaveCodes.Length;

                double Deduction = Convert.ToDouble(NoOfDaysDeduct);
                bool DedAtt = true;
                // Check balance for First leave type
                for (int i = 0; i <= Count; i++)
                {
                    try
                    {
                        string LeaveType = LeaveCodes[i].Trim();

                        //LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                        //    && a.LeaveType == LeaveType).FirstOrDefault();

                        SP_LeaveTableData_Result AvailableLeaveBalance = WetosDB.SP_LeaveTableData(DailyTransactionObj.EmployeeId)
                            .Where(a => a.LeaveType.Trim() == LeaveType.Trim()).FirstOrDefault();

                        if (AvailableLeaveBalance != null)
                        {
                            double LeaveApplicationDedVal = WetosDB.LeaveApplications.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                        && a.EffectiveDate == DailyTransactionObj.TranDate && a.Purpose.Contains("Deduction dated")
                                        && a.MarkedAsDelete == 0 && a.LeaveType == LeaveType).Select(a => a.TotalDeductableDays.Value).FirstOrDefault();
                            double LeaveBalAfterDucuction = AvailableLeaveBalance.CurrentBalance.Value - Deduction + LeaveApplicationDedVal;

                            //if (AvailableLeaveBalance.CurrentBalance > 0)
                            if ((LeaveBalAfterDucuction + Deduction) > 0)
                            {

                                //if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                {
                                    // Deduct balance for Leave
                                    //AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                    //AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019
                                    string DedPurpose = "";
                                    if (IsEarlyOrLate == 1)
                                    {
                                        DedPurpose = "Early Deduction";
                                    }
                                    else
                                    {
                                        DedPurpose = "Late Deduction";
                                    }

                                    LeaveApplication LeaveApplicationDed = WetosDB.LeaveApplications.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                        && a.EffectiveDate == DailyTransactionObj.TranDate && a.Purpose.Contains(DedPurpose)).FirstOrDefault();

                                    bool AddLeaveDB = false;
                                    if (LeaveApplicationDed == null)
                                    {
                                        LeaveApplicationDed = new LeaveApplication();
                                        AddLeaveDB = true;
                                    }

                                    LeaveApplicationDed.FromDate = DailyTransactionObj.TranDate;
                                    LeaveApplicationDed.ToDate = DailyTransactionObj.TranDate;
                                    LeaveApplicationDed.Status = "Sanctioned";
                                    LeaveApplicationDed.StatusId = 2;
                                    LeaveApplicationDed.LeaveType = LeaveType;
                                    LeaveApplicationDed.ToDayStatus = 1;
                                    LeaveApplicationDed.FromDayStatus = 1;
                                    LeaveApplicationDed.AppliedDays = Deduction;
                                    LeaveApplicationDed.ActualDays = Deduction;
                                    LeaveApplicationDed.TotalDeductableDays = Deduction;
                                    LeaveApplicationDed.EffectiveDate = DailyTransactionObj.TranDate;
                                    LeaveApplicationDed.EmployeeId = DailyTransactionObj.EmployeeId;
                                    LeaveApplicationDed.MarkedAsDelete = 0;
                                    LeaveApplicationDed.Purpose = DedPurpose + " dated " + DailyTransactionObj.TranDate.ToString("dd-MMM-yyyy");
                                    LeaveApplicationDed.CompanyId = DailyTransactionObj.CompanyId;  //ADDED BY NANDINI ON 22 JULY 2020
                                    LeaveApplicationDed.BranchId = DailyTransactionObj.BranchId; //ADDED BY NANDINI ON 22 JULY 2020

                                    if (AddLeaveDB == true)
                                    {
                                        WetosDB.LeaveApplications.AddObject(LeaveApplicationDed);
                                    }

                                    WetosDB.SaveChanges();

                                    //ADDED BY NANDINI ON 22 JULY 2020 START
                                    LeaveBalance LeaveBalanceObj = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId && a.LeaveType == LeaveType).FirstOrDefault();

                                    if (LeaveBalanceObj != null)
                                    {
                                        var UpdatedBalance = LeaveBalanceObj.CurrentBalance - Deduction;  // AppliedDays
                                        var LeaveUsedObj = (LeaveBalanceObj.LeaveUsed == null ? 0 : LeaveBalanceObj.LeaveUsed) + Deduction;
                                        LeaveBalanceObj.PreviousBalance = LeaveBalanceObj.CurrentBalance;
                                        LeaveBalanceObj.CurrentBalance = UpdatedBalance;
                                        LeaveBalanceObj.LeaveUsed = LeaveUsedObj;
                                        WetosDB.SaveChanges(); 
                                    }
                                    //ADDED BY NANDINI ON 22 JULY 2020 END

                                    // Update entry in DailyTransaction for Deducted leave type
                                    DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                    DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019
                                    DailyTransactionObj.Remark = LeaveApplicationDed.Purpose;
                                    DailyTransactionObj.Status = StatusConstants.FullDayPresentStatus + "^"; ; // ADDED BY MSJ ON 
                                    //WetosDB.SaveChanges();



                                }

                                DedAtt = false;
                                break; // If deduction is done then stop loop.
                            }
                            else
                            {
                                Deduction = 0 - LeaveBalAfterDucuction;
                            }
                        }

                        //
                    }
                    catch (Exception) //ADDED BY PUSHKAR ON 18 MARCH 2019
                    {

                        //throw;
                    }
                }

                // MARKED AS ABSENT // ADDED BY MSJ ON 13 MARCH 2019'
                if (Deduction > 0) // NO LEAVE CONDTION
                {

                    if (IsEarlyOrLate == 1) // MARK EARLY
                    {
                        EarlyMarkAsAbsent(GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyLateAllowed);
                    }
                    else
                    {
                        LateMarkAsAbsent(GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyLateAllowed);
                    }


                }
                //TO DEDUCT HALF DAY IF ALL LEAVES CONSUMED BY PUSHKAR ON 22 MARCH 2019
                if (DedAtt == true)
                {

                    if (IsEarlyOrLate == 1) // MARK EARLY
                    {
                        EarlyMarkAsAbsent(GlobalSettingObj, DailyTransactionObj, 99, EarlyLateAllowed);
                    }
                    else
                    {
                        LateMarkAsAbsent(GlobalSettingObj, DailyTransactionObj, 99, EarlyLateAllowed);
                    }
                }

            }
            // ADDED BY MSJ ON 22 FEB 2019 END
        }


        /// <summary>
        ///// CODE ADDED BY SHRADDHA ON 11 AUG 2017 START
        ///// TO PROCESS ATTENDANCE OF INDIVIDUAL EMPLOYEE
        ///// <param name="WetosDB"></param>
        ///// <param name="fromdate"></param>
        ///// <param name="todate"></param>
        ///// <returns></returns>
        //public static bool ProcessAttendenceForIndividualEmployee(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, int? EmployeeId, ref string ErrorMessage)
        //{
        //    bool ReturnStatus = false;
        //    try
        //    {
        //        #region COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018
        //        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
        //        // CHECK AUTO SHIFT
        //        // Check whether AUTO shift is allowed or not // 30
        //        //string IsAutoShiftAllowed = WetosDB.RuleTransactions.Where(a => a.RuleId == 30).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
        //        //bool IsAutoShiftFlag = string.IsNullOrEmpty(IsAutoShiftAllowed) == true ? false : (IsAutoShiftAllowed.ToUpper() == "TRUE" ? true : false);
        //        int RuleAttendanceBase = Convert.ToInt32(WetosDB.RuleTransactions.Where(a => a.RuleId == 33).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault());
        //        bool IsAutoShiftFlag = false;
        //        if (RuleAttendanceBase == 4)
        //        {
        //            IsAutoShiftFlag = true;
        //        }
        //        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
        //        #endregion

        //        #region MARK EMPLOYEES INACTIVE IF HAVING LEAVING DATE LESS THAN OR EQUAL TO TODAY
        //        //CODE ADDED BY SHRADDHA ON 01 NOV 2017
        //        MarkActiveInctiveEmployee(WetosDB);
        //        #endregion

        //        #region  MARK ONLY ABSENT OR PRESENT STATUS, IN, OUT, WRK HOURS, SHIFT (Default as in Employee database) USING Store procedure

        //        // mark only absent or PRESENT STATUS, IN, OUT, WRK HOURS, SHIFT (GENERAL)
        //        // UPDATE DAILY TRANSACTION BASED ON COMMAN DATA FOR SELECTED DATE IN DATE RANGE (ALL DAYS) START
        //        // Need to mark as per shift

        //        //ADDED BY SHALAKA ON 04TH DEC 2017 TO GET EMPLOYEE DETAIL
        //        Employee EmployeeObjNew = WetosDB.Employees.Where(a => a.EmployeeId == EmployeeId).FirstOrDefault();

        //        for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
        //        {
        //            //added Logic By Shraddha on 04 JAN 2017 FOR CHECKING IF DATA IS ALREADY PROCESSED OR NOT FOR PRESENT DAY

        //            // check COMMON DATA AVAIBALE FOR CURRENT DATE
        //            // MODIFIED BY SHALAKA ON 04TH DEC 2017
        //            CommanData CommanDataObj = WetosDB.CommanDatas.Where(a => a.CmnDate == CurrentDate && a.EmployeeCode ==
        //                EmployeeObjNew.EmployeeCode).FirstOrDefault();

        //            // check DAILY TRAN DATA AVAIBALE FOR CURRENT DATE
        //            DailyTransaction DailyTransactionObj = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate &&
        //                a.EmployeeId == EmployeeId).FirstOrDefault();

        //            if (CommanDataObj == null)
        //            {
        //                //For Selected Employees                       
        //                WetosDB.SPPostingprocessForAllBranchAndPrevDayForAutoShiftForSelectedEmployee(CurrentDate, EmployeeObjNew.EmployeeCode); // ADDED BY MSJ ON 15 JAN 2018
        //            }
        //            else
        //            {
        //                string SwipeFlag = WetosDB.Employees.Where(a => a.EmployeeCode == CommanDataObj.EmployeeCode).Select(a => a.SwipeFlag).FirstOrDefault();

        //                if (SwipeFlag != "N")
        //                {
        //                    //For Selected Employees                            
        //                    WetosDB.SPPostingprocessForAllBranchAndPrevDayForAutoShiftForSelectedEmployee(CurrentDate, EmployeeObjNew.EmployeeCode); // ADDED BY MSJ ON 15 JAN 2018
        //                }
        //            }
        //        }
        //        #endregion

        //        //// Added by Rajas on 5 AUGUST 2017 to Save Previous Late/Early count 
        //        //// If for today's processing late/early entry is NULL then update LateCount as previous late/early count value
        //        //int PreviousLateCount = 0;
        //        //int PrevEarlyCount = 0;

        //        #region Process attendance

        //        // Added by Rajas on 7 AUGUST 2017
        //        PostingFlagModel PostingFlagModelObj = new PostingFlagModel();

        //        List<string> ErrorInEmployee = new List<string>();  // Added by Rajas on 18 AUGUST 2017

        //        string ReturnMessage = string.Empty;
        //        string UpdatedStatus = string.Empty;
        //        string NewStatus = string.Empty;

        //        // Processing for Every dayodpr
        //        for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
        //        {
        //            #region GET ALL REQUIRED LIST

        //            List<DailyTransaction> DailyTransactionListForCurrentDayList = new List<DailyTransaction>();
        //            List<HoliDay> HolidayList = new List<HoliDay>();
        //            List<DeclaredHoliday> DeclaredHolidayList = new List<DeclaredHoliday>();
        //            List<WetosDB.ExceptionEntry> ExceptionList = new List<WetosDB.ExceptionEntry>();
        //            List<RuleTransaction> AllRuleTransactionList = new List<RuleTransaction>();
        //            List<SP_POSTINGGetRequiredEmployeeDetails_Result> RequiredEmpDetListObj = new List<SP_POSTINGGetRequiredEmployeeDetails_Result>();
        //            List<CondoneTrn> CondoneTrnList = new List<CondoneTrn>();

        //            try
        //            {
        //                // GET DAILY TRAN LIST FOR CURRENT DATE
        //                DailyTransactionListForCurrentDayList = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate
        //                    && (string.IsNullOrEmpty(a.Lock) ? false : a.Lock.ToUpper() == "N" ? false : true) == false).ToList();

        //                // GET HOLIDAY FOR ALL BRANCHES AND COMPANY
        //                HolidayList = WetosDB.HoliDays.Where(a => a.FromDate == CurrentDate && a.MarkedAsDelete == 0).ToList();

        //                // GET DECLARED HOLIDAY
        //                DeclaredHolidayList = WetosDB.DeclaredHolidays.Where(a => a.HolidayDate == CurrentDate && a.MarkASDelete != 1).ToList();

        //                // GET Exception List
        //                // Updated by Rajas on 17 AUGUST 2017 for sanctioned status only
        //                //ExceptionList = WetosDB.Exceptions.Where(a => a.ExceptionDate == CurrentDate && a.MarkedAsDelete == 0 && a.Status == "2").ToList();

        //                // Above line commented and below line added by Rajas on 26 SEP 2017
        //                // Comparison from status removed instead comparison from StatusId
        //                ExceptionList = WetosDB.ExceptionEntries.Where(a => a.ExceptionDate == CurrentDate && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

        //                // GET ALL RULES
        //                AllRuleTransactionList = WetosDB.RuleTransactions.ToList();

        //                // GET Active employe list along with required group details 
        //                // Added by Rajas on 4 AUGUST 2017
        //                List<SP_POSTINGGetRequiredEmployeeDetails_Result> TEMPRequiredEmpDetListObj = new List<SP_POSTINGGetRequiredEmployeeDetails_Result>();
        //                TEMPRequiredEmpDetListObj = WetosDB.SP_POSTINGGetRequiredEmployeeDetails().ToList();


        //                //else //ADDED BY SHALAKA ON 01ST DEC 2017 IF EMPLOYEES ARE SELECTED FOR DATA PROCESSING ***
        //                {
        //                    RequiredEmpDetListObj = TEMPRequiredEmpDetListObj.Where(a => a.EmployeeId == EmployeeId).ToList();
        //                }
        //                //ADDED BY SHALAKA ON 01ST DEC 2017 FOR SINGLE OR MULTIPLE EMPOLYEES --- END

        //                // GET CONDONE ENTRY
        //                CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
        //            }
        //            catch (System.Exception ex)
        //            {
        //                ErrorMessage = "Error in getting all List due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);

        //                return ReturnStatus = false;
        //            }

        //            #endregion GET ALL REQUIRED LIST

        //            #region PROCESS ATTENDANCE FOR EVERY DAILY TRANSACTION ENTRY

        //            foreach (DailyTransaction DailyTransactionObj in DailyTransactionListForCurrentDayList) // SP
        //            {
        //                try
        //                {
        //                    // ADDED BY MSJ ON 17 AUG 2017 START
        //                    // IS RECORD LOCKED ?
        //                    bool LockedData = string.IsNullOrEmpty(DailyTransactionObj.Lock) ? false : DailyTransactionObj.Lock.ToUpper() == "N" ? false : true;

        //                    if (!LockedData) // START OF LOCK CONDITION // ADDED BY MSJ ON 17 AUG 2017
        //                    {
        //                        // ADDED BY MSJ ON 17 AUG 2017 END

        //                        // GET EMP GROUP FOR EMP in Daily transaction
        //                        int EmployeeGroupIdObj = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
        //                            .Select(a => a.EmployeeGroupId).FirstOrDefault();

        //                        // EMP INFO
        //                        var EmployeeObj = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

        //                        // Get companyId
        //                        int EmployeeCompanyId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
        //                            .Select(a => a.CompanyId).FirstOrDefault();

        //                        // Get BranchId
        //                        int EmployeeBranchId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
        //                            .Select(a => a.BranchId).FirstOrDefault();

        //                        // GET List of all rules assigned to Employee Group
        //                        List<RuleTransaction> RuleTransactionList = AllRuleTransactionList.Where(a => a.EmployeeGroupId == EmployeeGroupIdObj).ToList();

        //                        //SHIFT, Check HoliDay, WeeklyOff, CondoneEntry,CompOff,Adjusment Or Mannual Correction

        //                        #region MARK EXCEPTION ENTRY (Why List ?)

        //                        if (ExceptionList.Count > 0)
        //                        {
        //                            // Removed List obj for exception
        //                            // Updated by Rajas on 4 AUGUST 2017
        //                            //var ExceptionListForSelectedEmployees = ExceptionList.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
        //                            List<WetosDB.ExceptionEntry> ExceptionListForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).ToList();

        //                            if (ExceptionListForSelectedEmployees.Count > 0)
        //                            {
        //                                foreach (WetosDB.ExceptionEntry ExceptionObjForSelectedEmployee in ExceptionListForSelectedEmployees)
        //                                {
        //                                    DailyTransactionObj.Login = ExceptionObjForSelectedEmployee.LoginTime;
        //                                    DailyTransactionObj.LogOut = ExceptionObjForSelectedEmployee.LogOutTime;

        //                                    //DailyTransactionObj.Status ?
        //                                    string WorkingHrsString = (ExceptionObjForSelectedEmployee.LogOutTime.TimeOfDay - ExceptionObjForSelectedEmployee.LoginTime.TimeOfDay).ToString();

        //                                    DailyTransactionObj.WorkingHrs = Convert.ToDateTime(WorkingHrsString);
        //                                    DailyTransactionObj.Status = StatusConstants.FullDayPresentStatus;
        //                                    WetosDB.SaveChanges();

        //                                    PostingFlagModelObj.IsExceptionEntry = true;
        //                                }
        //                            }
        //                        }
        //                        #endregion

        //                        #region DEFINE VARIABLES

        //                        Shift ShiftObjForCurrentEmployee = new Shift(); // ADDED BY MSJ ON 28 JAN 2018
        //                        GlobalSetting GlobalSettingObj = new GlobalSetting(); // ADDED BY MSJ ON 28 JAN 2018
        //                        bool IsHalfDay = false;  // IsSaturday
        //                        DateTime Intime = DailyTransactionObj.Login;
        //                        DateTime OutTime = DailyTransactionObj.LogOut;
        //                        // Added by Rajas on 14 JUNE 2017
        //                        string Today = Intime.DayOfWeek.ToString();

        //                        // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
        //                        RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

        //                        // Get rule whether to deduct attendance when employee is late beyond allowed limit
        //                        // Added by Rajas on 20 SEP 2017
        //                        string RuleForLateCountAttDeduction = RuleTransactionList.Where(a => a.RuleId == 14)
        //                            .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

        //                        // Get rule whether to deduct leave when employee is late beyond allowed limit
        //                        // Added by Rajas on 20 SEP 2017
        //                        string RuleForLateCountLeaveDeduction = RuleTransactionList.Where(a => a.RuleId == 13)
        //                            .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

        //                        // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
        //                        RuleTransaction RuleForEarlyCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

        //                        // Get rule whether to deduct attendance when employee is early beyond allowed limit
        //                        // Added by Rajas on 20 SEP 2017
        //                        string RuleForEarlyCountAttDeduction = RuleTransactionList.Where(a => a.RuleId == 14)
        //                            .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

        //                        // Get rule whether to deduct leave when employee is early beyond allowed limit
        //                        // Added by Rajas on 20 SEP 2017
        //                        string RuleForEarlyCountLeaveDeduction = RuleTransactionList.Where(a => a.RuleId == 13)
        //                            .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

        //                        // Get value for deduction in case of attendance or leave, if employee crossed early count limit
        //                        // Added by Rajas on 20 SEP 2017
        //                        string NoOfDaysDeduct = RuleTransactionList.Where(a => a.RuleId == 17).Select(a => a.Formula).FirstOrDefault();
        //                        int DeductionDay = 0;
        //                        if (NoOfDaysDeduct != null)
        //                        {
        //                            // Updated by Rajas on 25 SEP 2017
        //                            // Case 3 not exist so, default case will be executed.
        //                            DeductionDay = NoOfDaysDeduct == "0.5" ? 3 : Convert.ToInt32(NoOfDaysDeduct);
        //                        }

        //                        //-----------------------Added by Rajas on 28 SEP 2017 START----------------------------------

        //                        // Get ',' seperated Leave codes as value for deduction
        //                        string DeductLeaveCode = RuleTransactionList.Where(a => a.RuleId == 15).Select(a => a.Formula.Trim()).FirstOrDefault();

        //                        #region SET IsFlexiShiftAllowed BASED UPON ATTENDNACE BASED
        //                        //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 09 FEB 2018
        //                        // Check whether Flexi shift is allowed or not
        //                        //string IsFlexiShiftAllowed = RuleTransactionList.Where(a => a.RuleId == 27).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
        //                        string IsFlexiShiftAllowed = "FALSE";
        //                        if (RuleAttendanceBase == 3)
        //                        {
        //                            IsFlexiShiftAllowed = "TRUE";
        //                        }

        //                        #endregion
        //                        #endregion

        //                        #region ATTENDANCE BASE TYPE
        //                        #region  FIND NEAREST SHIFT FROM IN OUT AND MARK LATE / EARLY
        //                        RuleAttendanceBase = Convert.ToInt32(WetosDB.RuleTransactions.Where(a => a.RuleId == 33).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault());

        //                        #region POSTING SHIFT TYPES
        //                        //1 - DEFAULT SHIFT
        //                        //2 - SHIFT SCHEDULE
        //                        //3 - FLEXY SHIFT
        //                        //4 - AUTO SHIFT
        //                        #endregion

        //                        if (RuleAttendanceBase == 1)
        //                        {
        //                            #region CONSIDER SHIFT FROM DEFAULT SHIFT
        //                            ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift).FirstOrDefault();
        //                            if (ShiftObjForCurrentEmployee != null)
        //                            {
        //                                DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                                WetosDB.SaveChanges();
        //                            }
        //                            #endregion

        //                            #region LATE/EARLY Logic as per Shift time and Attendance rules

        //                            /// IsLateCountToBeIncremented YES/NO
        //                            /// Flag added by Rajas on 28 APRIL 2017
        //                            bool IsLateCountToBeIncremented = true;

        //                            /// IsEarlyCountToBeIncremented YES/NO
        //                            /// Flag added by Rajas on 28 APRIL 2017
        //                            bool IsEarlyCountToBeIncremented = true;

        //                            //bool IsUpdateStatus = false;  // Added by Rajas on 4 AUGUST 2017

        //                            // Initialise GlobalSettingObj
        //                            GlobalSettingObj = new GlobalSetting();
        //                            //GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == "Is Cont Late Deduction").FirstOrDefault();

        //                            //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
        //                            GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == GlobalSettingsConstant.IsContLateDeduction).FirstOrDefault();

        //                            #region LOGIC FOR LATE MARK AND SHIFT

        //                            ReturnMessage = string.Empty;
        //                            UpdatedStatus = string.Empty;
        //                            NewStatus = string.Empty;

        //                            // Rest all flags
        //                            PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                            // LOGIC FOR LATE MARK AND SHIFT
        //                            if (ShiftObjForCurrentEmployee == null)
        //                            {
        //                                ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
        //                            }

        //                            //DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);

        //                            // ADDED BY MSJ ON 28 JAN 2018 START
        //                            DateTime FirstInTime = ShiftObjForCurrentEmployee.FirstInTime; //OKAY CODE
        //                            //DateTime FirstInTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 
        //                            //    ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute
        //                            //    , ShiftObjForCurrentEmployee.FirstInTime.Second);


        //                            // DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);
        //                            DateTime FirstOutTime = ShiftObjForCurrentEmployee.FirstOutTime; //OKAY CODE
        //                            //DateTime FirstOutTime = new DateTime(Intime.Year, Intime.Month, Intime.Day,
        //                            //    ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
        //                            //    , ShiftObjForCurrentEmployee.FirstOutTime.Second);

        //                            // ADDED BY MSJ ON 28 JAN 2018 END

        //                            //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
        //                            //DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
        //                            DateTime? SecondInTime = ShiftObjForCurrentEmployee.SecondInTime;
        //                            // DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);
        //                            DateTime? SecondOutTime = ShiftObjForCurrentEmployee.SecondOutTime;


        //                            // LATE COMING GRACE TIME FROM RULE 5
        //                            //int LCGraceTimeMinutes = 00;

        //                            if (RuleTransactionList != null)
        //                            {
        //                                // 5 - allowed late comming min
        //                                string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

        //                                if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
        //                                {
        //                                    string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

        //                                    //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
        //                                    //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
        //                                }

        //                                /// Added by Rajas on 28 APRIL 2017 START
        //                                /// To check GraceLateAllowed limit

        //                                // 4 - Grace late allowed limit
        //                                string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

        //                                DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

        //                                TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
        //                                /// Added by Rajas on 28 APRIL 2017 END

        //                                //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
        //                                //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
        //                                // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

        //                                // LATE COMING LOGIC START
        //                                // int LateMarkCount = 1;
        //                                // Below line for FirstInTime modified by Rajas on 18 APRIL 2017

        //                                // MOVED THESE TWO VARIABLE OUT OF THE LOOP
        //                                string LateTimeString = string.Empty;
        //                                string Latestring = string.Empty;
        //                                DateTime CalculatedLateTime = DateTime.Now.Date;
        //                                DateTime LateAllowedLimit = DateTime.Now.Date;

        //                                // ADDED BY MSJ ON 29 JAN 2018 START
        //                                if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                                {
        //                                    LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                                    CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                                }
        //                                // ADDED BY MSJ ON 19 JAN 2018 END

        //                                if (Intime.TimeOfDay > FirstInTime.TimeOfDay && CalculatedLateTime.Hour < 8)  // SecondInTime.TimeOfDay
        //                                {
        //                                    //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

        //                                    // ADDED BY MSJ ON 29 JAN 2018 START
        //                                    if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                                    {
        //                                        // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
        //                                        LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                                        //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
        //                                        Latestring = Intime.ToShortDateString() + " " + LateTimeString;

        //                                        // Added by Rajas on 28 APRIL 2017 START
        //                                        // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
        //                                        LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr); // MODIFIED MSJ 
        //                                        CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                                    }

        //                                    // Save original attendance status
        //                                    // Added by Rajas on 8 AUGUST 2017
        //                                    DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                    if (CalculatedLateTime > GraceLateAllowedMin)
        //                                    {
        //                                        //// Added by Rajas on 29 APRIL 2017
        //                                        //DailyTransactionObj.Status = "PPPP^";

        //                                        // Updated by Rajas on 8 AUGUST 2017 START
        //                                        PostingFlagModelObj.IsLate = true;

        //                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                        // Updated by Rajas on 8 AUGUST 2017 END
        //                                    }

        //                                    if (CalculatedLateTime > LateAllowedLimit)  // GRACE < LATE ALLOED ? NEED TO VERIFY
        //                                    {
        //                                        //DailyTransactionObj.Status = "AAPP^";  // AAPP
        //                                        DailyTransactionObj.Remark = "Late";

        //                                        // Updated by Rajas on 8 AUGUST 2017 START
        //                                        PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming = true;

        //                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                        // Updated by Rajas on 8 AUGUST 2017 END

        //                                        /// NOTE:
        //                                        /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                        /// If Employee is late beyond late allowed limit then deduct Half day directly
        //                                        /// In this case don't update late count as action already taken for late employee.
        //                                        IsLateCountToBeIncremented = false;
        //                                    }
        //                                    // Added by Rajas on 28 APRIL 2017 END

        //                                    // late by min
        //                                    DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
        //                                    //WetosDB.SaveChanges();

        //                                    EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                                    int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                    int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                    // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                                    TimeSpan LateBy = Intime.TimeOfDay - FirstInTime.TimeOfDay; // SecondInTime.TimeOfDay;

        //                                    // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
        //                                    if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
        //                                    {
        //                                        //int TotalLateCountForEmployeeTillDate = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                        //   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.LateCount != null).Count());

        //                                        // Updated by Rajas on 24 AUGUST 2017 to fix late count issue

        //                                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
        //                                        //int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId)
        //                                        //    .Select(a => a.LateCount).Max());
        //                                        int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                        && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                                        .Select(a => a.LateCount).Max());
        //                                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
        //                                        if (RuleForLateCount != null)
        //                                        {
        //                                            int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

        //                                            if (MaxLateCountForEmployee == 0)
        //                                            {
        //                                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                                            }
        //                                            else
        //                                            {
        //                                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                                            }

        //                                            WetosDB.SaveChanges();

        //                                            #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                            // Code in this region modified by Rajas on 20 SEP 2017 START

        //                                            if (RuleForLateCountAttDeduction != null && RuleForLateCountAttDeduction == "TRUE")
        //                                            {
        //                                                // Added by Rajas on 12 AUGUST 2017 
        //                                                // Global setting value base deduction 
        //                                                if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                                                {
        //                                                    if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                                                    {
        //                                                        switch (DeductionDay)
        //                                                        {
        //                                                            case 0:
        //                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            case 1:
        //                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            default:
        //                                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;
        //                                                        }

        //                                                    }
        //                                                }
        //                                                else   // Deduct half day after every allowed late count 
        //                                                {
        //                                                    if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
        //                                                    {
        //                                                        switch (DeductionDay)
        //                                                        {
        //                                                            case 0:
        //                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            case 1:
        //                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            default:
        //                                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;
        //                                                        }
        //                                                    }
        //                                                    else // Updated by Rajas on 1 SEP 2017
        //                                                    {
        //                                                        if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            else if (RuleForLateCountLeaveDeduction != null && RuleForLateCountLeaveDeduction == "TRUE")
        //                                            {
        //                                                // Logic for deduction of Leave is pending

        //                                                // Added By MSJ on 13 March 2019 START
        //                                                DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, LateAllowed, DeductLeaveCode, NoOfDaysDeduct, 2);
        //                                                // Added By MSJ on 13 March 2019 END

        //                                                // ADDED BY MSJ ON 22 FEB 2019 START
        //                                                //string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                                                //int Count = LeaveCodes.Length;

        //                                                //// Check balance for First leave type
        //                                                //for (int i = 0; i <= Count; i++)
        //                                                //{
        //                                                //    string LeaveType = LeaveCodes[i].Trim();

        //                                                //    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                //        && a.LeaveType == LeaveType).FirstOrDefault();

        //                                                //    if (AvailableLeaveBalance != null)
        //                                                //    {
        //                                                //        if (AvailableLeaveBalance.CurrentBalance > 0)
        //                                                //        {
        //                                                //            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                                                //            //if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
        //                                                //            {
        //                                                //                // Deduct balance for Leave
        //                                                //                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
        //                                                //                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

        //                                                //                // Update entry in DailyTransaction for Deducted leave type
        //                                                //                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
        //                                                //                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

        //                                                //                //WetosDB.SaveChanges();
        //                                                //            }

        //                                                //            break; // If deduction is done then stop loop.
        //                                                //        }
        //                                                //    }

        //                                                //}
        //                                                //// ADDED BY MSJ ON 22 FEB 2019 END
        //                                            }
        //                                            else  // Late mark only. No deduction
        //                                            {
        //                                                // Updated by Rajas on 28 SEP 2017
        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                DailyTransactionObj.Remark = "Late";
        //                                            }

        //                                            // Code in this region modified by Rajas on 20 SEP 2017 END

        //                                            #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES
        //                                        }
        //                                        //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END

        //                                        WetosDB.SaveChanges();

        //                                        //  IsUpdateStatus = true; // (19 AUG 2017) At this momnet not required 

        //                                        //// Added by Rajas on 5 AUGUST 2017
        //                                        //PreviousLateCount = DailyTransactionObj.LateCount == null ? 0 : DailyTransactionObj.LateCount.Value;
        //                                    }
        //                                    else  // Added by Rajas on 5 AUGUST 2017
        //                                    {
        //                                        //// Employee is Not Late, then
        //                                        //DailyTransactionObj.LateCount = PreviousLateCount;
        //                                        //WetosDB.SaveChanges();
        //                                    }


        //                                }
        //                            }
        //                            // LATE COMING LOGIC END
        //                            #endregion

        //                            if (DailyTransactionObj.WorkingHrs != null)
        //                            {
        //                                #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

        //                                // What will happen in case of night shift

        //                                //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                                if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
        //                                {
        //                                    //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                                    //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
        //                                    if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
        //                                     && DailyTransactionObj.WorkingHrs.Value.Second == 0)
        //                                    {
        //                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
        //                                        WetosDB.SaveChanges();
        //                                    }
        //                                }
        //                                //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
        //                                #endregion

        //                                #region  EARLY GOING LOGIC
        //                                // EARLY GOING LOGIC START
        //                                //EARLY GOING 

        //                                // Logic need to be updated as per late count

        //                                // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

        //                                ReturnMessage = string.Empty;
        //                                UpdatedStatus = string.Empty;
        //                                NewStatus = string.Empty;

        //                                // Rest all flags
        //                                PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                                if (RuleTransactionList != null)
        //                                {
        //                                    // 6 - allowed Early going min
        //                                    string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

        //                                    if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
        //                                    {
        //                                        string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
        //                                    }

        //                                    /// Added by Rajas on 28 APRIL 2017 START
        //                                    /// To check GraceLateAllowed limit

        //                                    // 3 - Grace early allowed limit
        //                                    string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();

        //                                    DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

        //                                    TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
        //                                    /// Added by Rajas on 28 APRIL 2017 END

        //                                    if (OutTime.TimeOfDay < FirstOutTime.TimeOfDay)
        //                                    {
        //                                        string EarlyTimeString = (FirstOutTime.TimeOfDay - OutTime.TimeOfDay).ToString();

        //                                        string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

        //                                        // Added by Rajas on 28 APRIL 2017 START
        //                                        // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
        //                                        DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
        //                                        DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

        //                                        // Save original attendance status
        //                                        // Added by Rajas on 8 AUGUST 2017
        //                                        DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                        if (CalculatedEarlyTime > GraceEarlyAllowedMin)
        //                                        {
        //                                            // Added by Rajas on 29 APRIL 2017
        //                                            //if (!IsUpdateStatus)  (19 AUG 2017) At this momnet not required
        //                                            {
        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsLate = true;

        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Updated by Rajas on 8 AUGUST 2017 END

        //                                                DailyTransactionObj.Remark = "Early"; // Added by rajas on 19 AUGUST 2017
        //                                            }
        //                                        }

        //                                        if (CalculatedEarlyTime > EarlyAllowedLimit)
        //                                        {
        //                                            //if (!IsUpdateStatus) // (19 AUG 2017) At this momnet not required
        //                                            {
        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing = true;

        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Updated by Rajas on 8 AUGUST 2017 END
        //                                            }

        //                                            DailyTransactionObj.Remark = "Early";
        //                                            WetosDB.SaveChanges();

        //                                            /// NOTE:
        //                                            /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                            /// If Employee left early beyond early allowed limit then deduct Half day directly
        //                                            /// In this case don't update late count as action already taken for late employee.
        //                                            IsEarlyCountToBeIncremented = false;
        //                                        }
        //                                        // Added by Rajas on 28 APRIL 2017 END

        //                                        // Early by min
        //                                        DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
        //                                        //WetosDB.SaveChanges();

        //                                        EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                        // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                                        TimeSpan EarlyBy = FirstOutTime.TimeOfDay - OutTime.TimeOfDay;  // SecondInTime.TimeOfDay;

        //                                        //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added
        //                                        if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
        //                                        {
        //                                            // Updated by Rajas on 28 AUGUST 2017 to fix early count issue
        //                                            int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                                && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                                                .Select(a => a.EarlyCount).Max());

        //                                            if (RuleForEarlyCount != null)
        //                                            {
        //                                                int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

        //                                                if (MaxearlyCountForEmployee == 0)
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                else
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                WetosDB.SaveChanges();

        //                                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 START

        //                                                if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
        //                                                {
        //                                                    // Added by Rajas on 12 AUGUST 2017 
        //                                                    // Global setting value base deduction 
        //                                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                                                    {
        //                                                        if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }

        //                                                        }
        //                                                    }
        //                                                    else   // Deduct half day after every allowed late count 
        //                                                    {
        //                                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }
        //                                                        }
        //                                                        else // Updated by Rajas on 1 SEP 2017
        //                                                        {
        //                                                            if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                            {
        //                                                                switch (DeductionDay)
        //                                                                {
        //                                                                    case 0:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    case 1:
        //                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    default:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }
        //                                                else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
        //                                                {
        //                                                    // Logic for deduction of Leave is pending

        //                                                    // Added By MSJ on 13 March 2019 START
        //                                                    DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyAllowed, DeductLeaveCode, NoOfDaysDeduct, 1);
        //                                                    // Added By MSJ on 13 March 2019 END

        //                                                    //// ADDED BY MSJ ON 22 FEB 2019 START
        //                                                    //string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                                                    //int Count = LeaveCodes.Length;

        //                                                    //// Check balance for First leave type
        //                                                    //for (int i = 0; i <= Count; i++)
        //                                                    //{
        //                                                    //    string LeaveType = LeaveCodes[i].Trim();

        //                                                    //    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                    //        && a.LeaveType == LeaveType).FirstOrDefault();

        //                                                    //    if (AvailableLeaveBalance != null)
        //                                                    //    {
        //                                                    //        if (AvailableLeaveBalance.CurrentBalance > 0)
        //                                                    //        {
        //                                                    //            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                                                    //            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
        //                                                    //            {
        //                                                    //                // Deduct balance for Leave
        //                                                    //                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
        //                                                    //                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

        //                                                    //                // Update entry in DailyTransaction for Deducted leave type
        //                                                    //                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
        //                                                    //                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

        //                                                    //                //WetosDB.SaveChanges();
        //                                                    //            }

        //                                                    //            break; // If deduction is done then stop loop.
        //                                                    //        }
        //                                                    //    }

        //                                                    //}
        //                                                    //// ADDED BY MSJ ON 22 FEB 2019 END
        //                                                }
        //                                                else  // Early mark only. No deduction
        //                                                {
        //                                                    // Updated by Rajas on 28 SEP 2017
        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                    DailyTransactionObj.Remark = "Early";
        //                                                }

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 END

        //                                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                            }

        //                                            WetosDB.SaveChanges();

        //                                            //// Added by Rajas on 5 AUGUST 2017
        //                                            //PrevEarlyCount = DailyTransactionObj.EarlyCount == null ? 0 : DailyTransactionObj.EarlyCount.Value;

        //                                        }
        //                                        else  // Added by Rajas on 5 AUGUST 2017
        //                                        {
        //                                            //// Employee is Not left early, then
        //                                            //DailyTransactionObj.EarlyCount = PrevEarlyCount;
        //                                            //WetosDB.SaveChanges();
        //                                        }

        //                                        /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
        //                                        /// If employee is Late and Early beyond allowed limit then mark employee absent
        //                                        /// Added by Rajas on 18 MAY 2017
        //                                        //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
        //                                        //{
        //                                        //    DailyTransactionObj.Status = "AAAA";
        //                                        //    DailyTransactionObj.Remark = "Absent";
        //                                        //}


        //                                    }
        //                                }
        //                                // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

        //                                #endregion
        //                            }
        //                            #endregion
        //                        }
        //                        else if (RuleAttendanceBase == 2)
        //                        {
        //                            #region CONSIDER SHIFT SCHEDULE
        //                            List<ShiftSchedulePattern> ShiftSchedulePatternList = WetosDB.ShiftSchedulePatterns.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                       && a.ShiftMonth == DailyTransactionObj.TranDate.Month && a.ShiftYear == DailyTransactionObj.TranDate.Year).ToList();

        //                            // MODIFIED BY SHALAKA ON 12 DEC 2017 START
        //                            if (ShiftSchedulePatternList.Count > 0) //if (ShiftSchedulePatternList != null)
        //                            {
        //                                List<ShiftSchedulePattern> ShiftSchedulePatternListForPerticularDateRange = ShiftSchedulePatternList.Where(a => a.EffectiveStartDate <= DailyTransactionObj.TranDate
        //                                    && a.EffectiveEndDate >= DailyTransactionObj.TranDate).ToList();

        //                                if (ShiftSchedulePatternListForPerticularDateRange.Count > 0)
        //                                {
        //                                    foreach (ShiftSchedulePattern ShiftSchedulePatternObjForPerticularDateRange in ShiftSchedulePatternListForPerticularDateRange)
        //                                    {
        //                                        int y = DailyTransactionObj.TranDate.Day;

        //                                        string command = string.Format(@"select Day{0} from ShiftSchedulePattern where EmployeeId={1} and EffectiveStartDate<='{2}/{3}/{4} {5}' and EffectiveEndDate>='{2}/{3}/{4} {5}' and companyId={6} and branchid={7};"
        //                                          , y, DailyTransactionObj.EmployeeId, DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, "00:00", DailyTransactionObj.CompanyId, DailyTransactionObj.BranchId);
        //                                        string Shift = WetosDB.ExecuteStoreQuery<string>(command, "").FirstOrDefault();
        //                                        DailyTransactionObj.ShiftId = Shift;

        //                                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == Shift).FirstOrDefault();

        //                                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                            && a.BranchId == EmployeeBranchId
        //                                            //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                                             && a.FirstInTime == ShiftObjForCurrentEmployee.FirstInTime).FirstOrDefault();

        //                                        WetosDB.SaveChanges();

        //                                    }
        //                                }
        //                                else if (GlobalSettingObj != null) // Added by Rajas on 17 JUNE 2017
        //                                {
        //                                    // Get Global seeting value and saturday 
        //                                    if (GlobalSettingObj.SettingValue.Trim() == "1" && IsHalfDay == true)
        //                                    {
        //                                        // Mark Half Day shift with ShiftCode H 
        //                                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode.ToUpper().Trim() == StatusConstants.HalfDayShift).FirstOrDefault();

        //                                        DailyTransactionObj.ShiftId = StatusConstants.HalfDayShift;  // Added by Rajas on 16 AUGUST 2017
        //                                    }
        //                                    else
        //                                    {
        //                                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift).FirstOrDefault();
        //                                    }

        //                                    WetosDB.SaveChanges();  // Added by Rajas on 16 AUGUST 2017

        //                                    if (ShiftObjForCurrentEmployee != null)
        //                                    {
        //                                        DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                                        WetosDB.SaveChanges();
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    #region GET SHIFT  FROM CLOSEST TIME

        //                                    DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                        && a.BranchId == EmployeeBranchId
        //                                        //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                                        //&& a.ShiftCode == EmployeeObj.DefaultShift
        //                                        ).Select(a => a.FirstInTime).ToArray();

        //                                    long min = long.MaxValue;

        //                                    DateTime ClosestTime = new DateTime();

        //                                    foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                                    {
        //                                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
        //                                        long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
        //                                        if (TempDIff < min)
        //                                        {
        //                                            min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                                            ClosestTime = CurrentDateTime;
        //                                        }
        //                                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
        //                                    }

        //                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                        && a.BranchId == EmployeeBranchId
        //                                        //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                                         && a.FirstInTime == ClosestTime).FirstOrDefault();

        //                                    if (ShiftObjForCurrentEmployee != null)
        //                                    {
        //                                        DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                                        WetosDB.SaveChanges();
        //                                    }

        //                                    #endregion // COMMON CODE
        //                                }
        //                            }
        //                            #endregion

        //                            #region LATE/EARLY Logic as per Shift time and Attendance rules

        //                            /// IsLateCountToBeIncremented YES/NO
        //                            /// Flag added by Rajas on 28 APRIL 2017
        //                            bool IsLateCountToBeIncremented = true;

        //                            /// IsEarlyCountToBeIncremented YES/NO
        //                            /// Flag added by Rajas on 28 APRIL 2017
        //                            bool IsEarlyCountToBeIncremented = true;

        //                            //bool IsUpdateStatus = false;  // Added by Rajas on 4 AUGUST 2017

        //                            // Initialise GlobalSettingObj
        //                            GlobalSettingObj = new GlobalSetting();
        //                            //GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == "Is Cont Late Deduction").FirstOrDefault();

        //                            //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
        //                            GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == GlobalSettingsConstant.IsContLateDeduction).FirstOrDefault();

        //                            #region LOGIC FOR LATE MARK AND SHIFT

        //                            ReturnMessage = string.Empty;
        //                            UpdatedStatus = string.Empty;
        //                            NewStatus = string.Empty;

        //                            // Rest all flags
        //                            PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                            // LOGIC FOR LATE MARK AND SHIFT
        //                            if (ShiftObjForCurrentEmployee == null)
        //                            {
        //                                ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
        //                            }

        //                            //DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);

        //                            // ADDED BY MSJ ON 28 JAN 2018 START
        //                            DateTime FirstInTime = ShiftObjForCurrentEmployee.FirstInTime; //OKAY CODE
        //                            //DateTime FirstInTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 
        //                            //    ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute
        //                            //    , ShiftObjForCurrentEmployee.FirstInTime.Second);


        //                            // DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);
        //                            DateTime FirstOutTime = ShiftObjForCurrentEmployee.FirstOutTime; //OKAY CODE
        //                            //DateTime FirstOutTime = new DateTime(Intime.Year, Intime.Month, Intime.Day,
        //                            //    ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
        //                            //    , ShiftObjForCurrentEmployee.FirstOutTime.Second);

        //                            // ADDED BY MSJ ON 28 JAN 2018 END

        //                            //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
        //                            //DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
        //                            DateTime? SecondInTime = ShiftObjForCurrentEmployee.SecondInTime;
        //                            // DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);
        //                            DateTime? SecondOutTime = ShiftObjForCurrentEmployee.SecondOutTime;


        //                            // LATE COMING GRACE TIME FROM RULE 5
        //                            //int LCGraceTimeMinutes = 00;

        //                            if (RuleTransactionList != null)
        //                            {
        //                                // 5 - allowed late comming min
        //                                string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

        //                                if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
        //                                {
        //                                    string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

        //                                    //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
        //                                    //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
        //                                }

        //                                /// Added by Rajas on 28 APRIL 2017 START
        //                                /// To check GraceLateAllowed limit

        //                                // 4 - Grace late allowed limit
        //                                string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

        //                                DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

        //                                TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
        //                                /// Added by Rajas on 28 APRIL 2017 END

        //                                //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
        //                                //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
        //                                // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

        //                                // LATE COMING LOGIC START
        //                                // int LateMarkCount = 1;
        //                                // Below line for FirstInTime modified by Rajas on 18 APRIL 2017

        //                                // MOVED THESE TWO VARIABLE OUT OF THE LOOP
        //                                string LateTimeString = string.Empty;
        //                                string Latestring = string.Empty;
        //                                DateTime CalculatedLateTime = DateTime.Now.Date;
        //                                DateTime LateAllowedLimit = DateTime.Now.Date;

        //                                // ADDED BY MSJ ON 29 JAN 2018 START
        //                                if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                                {
        //                                    LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                                    CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                                }
        //                                // ADDED BY MSJ ON 19 JAN 2018 END

        //                                if (Intime.TimeOfDay > FirstInTime.TimeOfDay && CalculatedLateTime.Hour < 8)  // SecondInTime.TimeOfDay
        //                                {
        //                                    //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

        //                                    // ADDED BY MSJ ON 29 JAN 2018 START
        //                                    if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                                    {
        //                                        // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
        //                                        LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                                        //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
        //                                        Latestring = Intime.ToShortDateString() + " " + LateTimeString;

        //                                        // Added by Rajas on 28 APRIL 2017 START
        //                                        // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
        //                                        LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr); // MODIFIED MSJ 
        //                                        CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                                    }

        //                                    // Save original attendance status
        //                                    // Added by Rajas on 8 AUGUST 2017
        //                                    DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                    if (CalculatedLateTime > GraceLateAllowedMin)
        //                                    {
        //                                        //// Added by Rajas on 29 APRIL 2017
        //                                        //DailyTransactionObj.Status = "PPPP^";

        //                                        // Updated by Rajas on 8 AUGUST 2017 START
        //                                        PostingFlagModelObj.IsLate = true;

        //                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                        // Updated by Rajas on 8 AUGUST 2017 END
        //                                    }

        //                                    if (CalculatedLateTime > LateAllowedLimit)  // GRACE < LATE ALLOED ? NEED TO VERIFY
        //                                    {
        //                                        //DailyTransactionObj.Status = "AAPP^";  // AAPP
        //                                        DailyTransactionObj.Remark = "Late";

        //                                        // Updated by Rajas on 8 AUGUST 2017 START
        //                                        PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming = true;

        //                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                        // Updated by Rajas on 8 AUGUST 2017 END

        //                                        /// NOTE:
        //                                        /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                        /// If Employee is late beyond late allowed limit then deduct Half day directly
        //                                        /// In this case don't update late count as action already taken for late employee.
        //                                        IsLateCountToBeIncremented = false;
        //                                    }
        //                                    // Added by Rajas on 28 APRIL 2017 END

        //                                    // late by min
        //                                    DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
        //                                    //WetosDB.SaveChanges();

        //                                    EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                                    int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                    int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                    // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                                    TimeSpan LateBy = Intime.TimeOfDay - FirstInTime.TimeOfDay; // SecondInTime.TimeOfDay;

        //                                    // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
        //                                    if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
        //                                    {
        //                                        //int TotalLateCountForEmployeeTillDate = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                        //   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.LateCount != null).Count());

        //                                        // Updated by Rajas on 24 AUGUST 2017 to fix late count issue

        //                                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
        //                                        //int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId)
        //                                        //    .Select(a => a.LateCount).Max());
        //                                        int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                        && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                                        .Select(a => a.LateCount).Max());
        //                                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
        //                                        if (RuleForLateCount != null)
        //                                        {
        //                                            int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

        //                                            if (MaxLateCountForEmployee == 0)
        //                                            {
        //                                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                                            }
        //                                            else
        //                                            {
        //                                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                                            }

        //                                            WetosDB.SaveChanges();

        //                                            #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                            // Code in this region modified by Rajas on 20 SEP 2017 START

        //                                            if (RuleForLateCountAttDeduction != null && RuleForLateCountAttDeduction == "TRUE")
        //                                            {
        //                                                // Added by Rajas on 12 AUGUST 2017 
        //                                                // Global setting value base deduction 
        //                                                if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                                                {
        //                                                    if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                                                    {
        //                                                        switch (DeductionDay)
        //                                                        {
        //                                                            case 0:
        //                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            case 1:
        //                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            default:
        //                                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;
        //                                                        }

        //                                                    }
        //                                                }
        //                                                else   // Deduct half day after every allowed late count 
        //                                                {
        //                                                    if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
        //                                                    {
        //                                                        switch (DeductionDay)
        //                                                        {
        //                                                            case 0:
        //                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            case 1:
        //                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            default:
        //                                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;
        //                                                        }
        //                                                    }
        //                                                    else // Updated by Rajas on 1 SEP 2017
        //                                                    {
        //                                                        if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            else if (RuleForLateCountLeaveDeduction != null && RuleForLateCountLeaveDeduction == "TRUE")
        //                                            {
        //                                                // Logic for deduction of Leave is pending

        //                                                // Added By MSJ on 13 March 2019 START
        //                                                DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, LateAllowed, DeductLeaveCode, NoOfDaysDeduct, 2);
        //                                                // Added By MSJ on 13 March 2019 END

        //                                                ////// ADDED BY MSJ ON 22 FEB 2019 START
        //                                                ////string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                                                ////int Count = LeaveCodes.Length;

        //                                                ////// Check balance for First leave type
        //                                                ////for (int i = 0; i <= Count; i++)
        //                                                ////{
        //                                                ////    string LeaveType = LeaveCodes[i].Trim();

        //                                                ////    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                ////        && a.LeaveType == LeaveType).FirstOrDefault();

        //                                                ////    if (AvailableLeaveBalance != null)
        //                                                ////    {
        //                                                ////        if (AvailableLeaveBalance.CurrentBalance > 0)
        //                                                ////        {
        //                                                ////            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                                                ////            //if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
        //                                                ////            {
        //                                                ////                // Deduct balance for Leave
        //                                                ////                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
        //                                                ////                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

        //                                                ////                // Update entry in DailyTransaction for Deducted leave type
        //                                                ////                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
        //                                                ////                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

        //                                                ////                //WetosDB.SaveChanges();
        //                                                ////            }

        //                                                ////            break; // If deduction is done then stop loop.
        //                                                ////        }
        //                                                ////    }

        //                                                ////}
        //                                                ////// ADDED BY MSJ ON 22 FEB 2019 END
        //                                            }
        //                                            else  // Late mark only. No deduction
        //                                            {
        //                                                // Updated by Rajas on 28 SEP 2017
        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                DailyTransactionObj.Remark = "Late";
        //                                            }

        //                                            // Code in this region modified by Rajas on 20 SEP 2017 END

        //                                            #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES
        //                                        }
        //                                        //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END

        //                                        WetosDB.SaveChanges();

        //                                        //  IsUpdateStatus = true; // (19 AUG 2017) At this momnet not required 

        //                                        //// Added by Rajas on 5 AUGUST 2017
        //                                        //PreviousLateCount = DailyTransactionObj.LateCount == null ? 0 : DailyTransactionObj.LateCount.Value;
        //                                    }
        //                                    else  // Added by Rajas on 5 AUGUST 2017
        //                                    {
        //                                        //// Employee is Not Late, then
        //                                        //DailyTransactionObj.LateCount = PreviousLateCount;
        //                                        //WetosDB.SaveChanges();
        //                                    }


        //                                }
        //                            }
        //                            // LATE COMING LOGIC END
        //                            #endregion

        //                            if (DailyTransactionObj.WorkingHrs != null)
        //                            {
        //                                #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

        //                                // What will happen in case of night shift

        //                                //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                                if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
        //                                {
        //                                    //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                                    //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
        //                                    if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
        //                                     && DailyTransactionObj.WorkingHrs.Value.Second == 0)
        //                                    {
        //                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
        //                                        WetosDB.SaveChanges();
        //                                    }
        //                                }
        //                                //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
        //                                #endregion

        //                                #region  EARLY GOING LOGIC
        //                                // EARLY GOING LOGIC START
        //                                //EARLY GOING 

        //                                // Logic need to be updated as per late count

        //                                // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

        //                                ReturnMessage = string.Empty;
        //                                UpdatedStatus = string.Empty;
        //                                NewStatus = string.Empty;

        //                                // Rest all flags
        //                                PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                                if (RuleTransactionList != null)
        //                                {
        //                                    // 6 - allowed Early going min
        //                                    string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

        //                                    if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
        //                                    {
        //                                        string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
        //                                    }

        //                                    /// Added by Rajas on 28 APRIL 2017 START
        //                                    /// To check GraceLateAllowed limit

        //                                    // 3 - Grace early allowed limit
        //                                    string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();

        //                                    DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

        //                                    TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
        //                                    /// Added by Rajas on 28 APRIL 2017 END

        //                                    if (OutTime.TimeOfDay < FirstOutTime.TimeOfDay)
        //                                    {
        //                                        string EarlyTimeString = (FirstOutTime.TimeOfDay - OutTime.TimeOfDay).ToString();

        //                                        string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

        //                                        // Added by Rajas on 28 APRIL 2017 START
        //                                        // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
        //                                        DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
        //                                        DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

        //                                        // Save original attendance status
        //                                        // Added by Rajas on 8 AUGUST 2017
        //                                        DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                        if (CalculatedEarlyTime > GraceEarlyAllowedMin)
        //                                        {
        //                                            // Added by Rajas on 29 APRIL 2017
        //                                            //if (!IsUpdateStatus)  (19 AUG 2017) At this momnet not required
        //                                            {
        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsLate = true;

        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Updated by Rajas on 8 AUGUST 2017 END

        //                                                DailyTransactionObj.Remark = "Early"; // Added by rajas on 19 AUGUST 2017
        //                                            }
        //                                        }

        //                                        if (CalculatedEarlyTime > EarlyAllowedLimit)
        //                                        {
        //                                            //if (!IsUpdateStatus) // (19 AUG 2017) At this momnet not required
        //                                            {
        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing = true;

        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Updated by Rajas on 8 AUGUST 2017 END
        //                                            }

        //                                            DailyTransactionObj.Remark = "Early";
        //                                            WetosDB.SaveChanges();

        //                                            /// NOTE:
        //                                            /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                            /// If Employee left early beyond early allowed limit then deduct Half day directly
        //                                            /// In this case don't update late count as action already taken for late employee.
        //                                            IsEarlyCountToBeIncremented = false;
        //                                        }
        //                                        // Added by Rajas on 28 APRIL 2017 END

        //                                        // Early by min
        //                                        DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
        //                                        //WetosDB.SaveChanges();

        //                                        EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                        // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                                        TimeSpan EarlyBy = FirstOutTime.TimeOfDay - OutTime.TimeOfDay;  // SecondInTime.TimeOfDay;

        //                                        //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added
        //                                        if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
        //                                        {
        //                                            // Updated by Rajas on 28 AUGUST 2017 to fix early count issue
        //                                            int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                                && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                                                .Select(a => a.EarlyCount).Max());

        //                                            if (RuleForEarlyCount != null)
        //                                            {
        //                                                int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

        //                                                if (MaxearlyCountForEmployee == 0)
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                else
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                WetosDB.SaveChanges();

        //                                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 START

        //                                                if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
        //                                                {
        //                                                    // Added by Rajas on 12 AUGUST 2017 
        //                                                    // Global setting value base deduction 
        //                                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                                                    {
        //                                                        if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }

        //                                                        }
        //                                                    }
        //                                                    else   // Deduct half day after every allowed late count 
        //                                                    {
        //                                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }
        //                                                        }
        //                                                        else // Updated by Rajas on 1 SEP 2017
        //                                                        {
        //                                                            if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                            {
        //                                                                switch (DeductionDay)
        //                                                                {
        //                                                                    case 0:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    case 1:
        //                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    default:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }
        //                                                else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
        //                                                {
        //                                                    // Logic for deduction of Leave is pending

        //                                                    // Added By MSJ on 13 March 2019 START
        //                                                    DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyAllowed, DeductLeaveCode, NoOfDaysDeduct, 1);
        //                                                    // Added By MSJ on 13 March 2019 END

        //                                                    ////// ADDED BY MSJ ON 22 FEB 2019 START
        //                                                    ////string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                                                    ////int Count = LeaveCodes.Length;

        //                                                    ////// Check balance for First leave type
        //                                                    ////for (int i = 0; i <= Count; i++)
        //                                                    ////{
        //                                                    ////    string LeaveType = LeaveCodes[i].Trim();

        //                                                    ////    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                    ////        && a.LeaveType == LeaveType).FirstOrDefault();

        //                                                    ////    if (AvailableLeaveBalance != null)
        //                                                    ////    {
        //                                                    ////        if (AvailableLeaveBalance.CurrentBalance > 0)
        //                                                    ////        {
        //                                                    ////            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                                                    ////            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
        //                                                    ////            {
        //                                                    ////                // Deduct balance for Leave
        //                                                    ////                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
        //                                                    ////                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

        //                                                    ////                // Update entry in DailyTransaction for Deducted leave type
        //                                                    ////                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
        //                                                    ////                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

        //                                                    ////                //WetosDB.SaveChanges();
        //                                                    ////            }

        //                                                    ////            break; // If deduction is done then stop loop.
        //                                                    ////        }
        //                                                    ////    }

        //                                                    ////}
        //                                                    ////// ADDED BY MSJ ON 22 FEB 2019 END
        //                                                }
        //                                                else  // Early mark only. No deduction
        //                                                {
        //                                                    // Updated by Rajas on 28 SEP 2017
        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                    DailyTransactionObj.Remark = "Early";
        //                                                }

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 END

        //                                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                            }

        //                                            WetosDB.SaveChanges();

        //                                            //// Added by Rajas on 5 AUGUST 2017
        //                                            //PrevEarlyCount = DailyTransactionObj.EarlyCount == null ? 0 : DailyTransactionObj.EarlyCount.Value;

        //                                        }
        //                                        else  // Added by Rajas on 5 AUGUST 2017
        //                                        {
        //                                            //// Employee is Not left early, then
        //                                            //DailyTransactionObj.EarlyCount = PrevEarlyCount;
        //                                            //WetosDB.SaveChanges();
        //                                        }

        //                                        /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
        //                                        /// If employee is Late and Early beyond allowed limit then mark employee absent
        //                                        /// Added by Rajas on 18 MAY 2017
        //                                        //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
        //                                        //{
        //                                        //    DailyTransactionObj.Status = "AAAA";
        //                                        //    DailyTransactionObj.Remark = "Absent";
        //                                        //}


        //                                    }
        //                                }
        //                                // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

        //                                #endregion
        //                            }
        //                            #endregion
        //                        }
        //                        else if (RuleAttendanceBase == 3)
        //                        {
        //                            #region CONSIDER FLEXY SHIFT

        //                            string WorkingHoursAsPerShift = RuleTransactionList.Where(a => a.RuleId == 12).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
        //                            if (IsFlexiShiftAllowed == "TRUE")
        //                            {
        //                                if (WorkingHoursAsPerShift != null && WorkingHoursAsPerShift == "FALSE")
        //                                {
        //                                    string WorkHoursHalfDayLimit = RuleTransactionList.Where(a => a.RuleId == 29).Select(a => a.Formula).FirstOrDefault();
        //                                    string WorkHoursFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 28).Select(a => a.Formula).FirstOrDefault();

        //                                    if (WorkHoursHalfDayLimit != null && WorkHoursFullDayLimit != null)
        //                                    {
        //                                        DateTime HalfDayLimit = Convert.ToDateTime(WorkHoursHalfDayLimit);
        //                                        DateTime FullDayLimit = Convert.ToDateTime(WorkHoursFullDayLimit);

        //                                        if (HalfDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
        //                                        {
        //                                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                        }
        //                                        else if ((HalfDayLimit.TimeOfDay < DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
        //                                            && (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay))
        //                                        {
        //                                            DailyTransactionObj.Status = StatusConstants.SecondHalfAbsentStatus;
        //                                        }
        //                                        else if (FullDayLimit > DailyTransactionObj.WorkingHrs)
        //                                        {
        //                                            string EarlyTime = (FullDayLimit.TimeOfDay - DailyTransactionObj.WorkingHrs.Value.TimeOfDay).ToString();

        //                                            string Earlystring = DailyTransactionObj.WorkingHrs.Value.ToShortDateString() + " " + EarlyTime;

        //                                            DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);

        //                                            int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                            int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                            // Get Max early count from existing
        //                                            int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions
        //                                                .Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                       && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear
        //                                                       && a.TranDate < DailyTransactionObj.TranDate)
        //                                                       .Select(a => a.EarlyCount).Max());

        //                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;  // Update early count

        //                                            if (RuleForEarlyCount != null)
        //                                            {
        //                                                int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

        //                                                if (MaxearlyCountForEmployee == 0)
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                else
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                WetosDB.SaveChanges();

        //                                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 START

        //                                                if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "FALSE")
        //                                                {
        //                                                    // Added by Rajas on 12 AUGUST 2017 
        //                                                    // Global setting value base deduction 
        //                                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                                                    {
        //                                                        if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }

        //                                                        }
        //                                                    }
        //                                                    else   // Deduct half day after every allowed late count 
        //                                                    {
        //                                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }
        //                                                        }
        //                                                        else // Updated by Rajas on 1 SEP 2017
        //                                                        {
        //                                                            if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                            {
        //                                                                switch (DeductionDay)
        //                                                                {
        //                                                                    case 0:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    case 1:
        //                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    default:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }
        //                                                else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
        //                                                {
        //                                                    string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                                                    int Count = LeaveCodes.Length;

        //                                                    // Check balance for First leave type
        //                                                    for (int i = 0; i <= Count; i++)
        //                                                    {
        //                                                        string LeaveType = LeaveCodes[i].Trim();

        //                                                        LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                            && a.LeaveType == LeaveType).FirstOrDefault();

        //                                                        if (AvailableLeaveBalance != null)
        //                                                        {
        //                                                            if (AvailableLeaveBalance.CurrentBalance > 0)
        //                                                            {
        //                                                                double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                                                                if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                                {
        //                                                                    // Deduct balance for Leave
        //                                                                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
        //                                                                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

        //                                                                    // Update entry in DailyTransaction for Deducted leave type
        //                                                                    DailyTransactionObj.LeaveTypeDeducted = LeaveType;
        //                                                                    DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

        //                                                                    //WetosDB.SaveChanges();
        //                                                                }

        //                                                                break; // If deduction is done then stop loop.
        //                                                            }
        //                                                        }

        //                                                    }
        //                                                }
        //                                                else  // Early mark only. No deduction
        //                                                {
        //                                                    // Updated by Rajas on 28 SEP 2017
        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                    DailyTransactionObj.Remark = "Early";
        //                                                }

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 END

        //                                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                            }

        //                                            WetosDB.SaveChanges();
        //                                        }

        //                                    }
        //                                }
        //                            }
        //                            #endregion
        //                        }
        //                        else if (RuleAttendanceBase == 4)
        //                        {
        //                            #region GET SHIFT  FROM CLOSEST TIME

        //                            DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                && a.BranchId == EmployeeBranchId
        //                                //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                                //&& a.ShiftCode == EmployeeObj.DefaultShift
        //                                ).Select(a => a.FirstInTime).ToArray();

        //                            long min = long.MaxValue;

        //                            DateTime ClosestTime = new DateTime();

        //                            foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                            {
        //                                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
        //                                long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
        //                                if (TempDIff < min)
        //                                {
        //                                    min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                                    ClosestTime = CurrentDateTime;
        //                                }
        //                                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
        //                            }


        //                            DateTime NSTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 23, 00, 00);
        //                            if (Intime.TimeOfDay > NSTime.TimeOfDay)
        //                            {
        //                                // NS ISSUE FIXED BY MSJ ON 29 JAN 2018
        //                                DailyTransactionObj.ShiftId = "N1";
        //                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
        //                            }
        //                            else
        //                            {
        //                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                    && a.BranchId == EmployeeBranchId
        //                                    //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                                     && a.FirstInTime == ClosestTime).FirstOrDefault();
        //                            }

        //                            if (ShiftObjForCurrentEmployee != null)
        //                            {
        //                                DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                                WetosDB.SaveChanges();
        //                            }

        //                            #endregion // COMMON CODE

        //                            #region LATE/EARLY Logic as per Shift time and Attendance rules

        //                            /// IsLateCountToBeIncremented YES/NO
        //                            /// Flag added by Rajas on 28 APRIL 2017
        //                            bool IsLateCountToBeIncremented = true;

        //                            /// IsEarlyCountToBeIncremented YES/NO
        //                            /// Flag added by Rajas on 28 APRIL 2017
        //                            bool IsEarlyCountToBeIncremented = true;

        //                            //bool IsUpdateStatus = false;  // Added by Rajas on 4 AUGUST 2017

        //                            // Initialise GlobalSettingObj
        //                            GlobalSettingObj = new GlobalSetting();
        //                            //GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == "Is Cont Late Deduction").FirstOrDefault();

        //                            //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
        //                            GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == GlobalSettingsConstant.IsContLateDeduction).FirstOrDefault();

        //                            #region LOGIC FOR LATE MARK AND SHIFT

        //                            ReturnMessage = string.Empty;
        //                            UpdatedStatus = string.Empty;
        //                            NewStatus = string.Empty;

        //                            // Rest all flags
        //                            PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                            // LOGIC FOR LATE MARK AND SHIFT
        //                            if (ShiftObjForCurrentEmployee == null)
        //                            {
        //                                ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
        //                            }

        //                            //DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);

        //                            // ADDED BY MSJ ON 28 JAN 2018 START
        //                            DateTime FirstInTime = ShiftObjForCurrentEmployee.FirstInTime; //OKAY CODE
        //                            //DateTime FirstInTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 
        //                            //    ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute
        //                            //    , ShiftObjForCurrentEmployee.FirstInTime.Second);


        //                            // DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);
        //                            DateTime FirstOutTime = ShiftObjForCurrentEmployee.FirstOutTime; //OKAY CODE
        //                            //DateTime FirstOutTime = new DateTime(Intime.Year, Intime.Month, Intime.Day,
        //                            //    ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
        //                            //    , ShiftObjForCurrentEmployee.FirstOutTime.Second);

        //                            // ADDED BY MSJ ON 28 JAN 2018 END

        //                            //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
        //                            //DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
        //                            DateTime? SecondInTime = ShiftObjForCurrentEmployee.SecondInTime;
        //                            // DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);
        //                            DateTime? SecondOutTime = ShiftObjForCurrentEmployee.SecondOutTime;


        //                            // LATE COMING GRACE TIME FROM RULE 5
        //                            //int LCGraceTimeMinutes = 00;

        //                            if (RuleTransactionList != null)
        //                            {
        //                                // 5 - allowed late comming min
        //                                string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

        //                                if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
        //                                {
        //                                    string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

        //                                    //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
        //                                    //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
        //                                }

        //                                /// Added by Rajas on 28 APRIL 2017 START
        //                                /// To check GraceLateAllowed limit

        //                                // 4 - Grace late allowed limit
        //                                string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

        //                                DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

        //                                TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
        //                                /// Added by Rajas on 28 APRIL 2017 END

        //                                //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
        //                                //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
        //                                // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

        //                                // LATE COMING LOGIC START
        //                                // int LateMarkCount = 1;
        //                                // Below line for FirstInTime modified by Rajas on 18 APRIL 2017

        //                                // MOVED THESE TWO VARIABLE OUT OF THE LOOP
        //                                string LateTimeString = string.Empty;
        //                                string Latestring = string.Empty;
        //                                DateTime CalculatedLateTime = DateTime.Now.Date;
        //                                DateTime LateAllowedLimit = DateTime.Now.Date;

        //                                // ADDED BY MSJ ON 29 JAN 2018 START
        //                                if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                                {
        //                                    LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                                    CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                                }
        //                                // ADDED BY MSJ ON 19 JAN 2018 END

        //                                if (Intime.TimeOfDay > FirstInTime.TimeOfDay && CalculatedLateTime.Hour < 8)  // SecondInTime.TimeOfDay
        //                                {
        //                                    //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

        //                                    // ADDED BY MSJ ON 29 JAN 2018 START
        //                                    if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                                    {
        //                                        // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
        //                                        LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                                        //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
        //                                        Latestring = Intime.ToShortDateString() + " " + LateTimeString;

        //                                        // Added by Rajas on 28 APRIL 2017 START
        //                                        // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
        //                                        LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr); // MODIFIED MSJ 
        //                                        CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                                    }

        //                                    // Save original attendance status
        //                                    // Added by Rajas on 8 AUGUST 2017
        //                                    DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                    if (CalculatedLateTime > GraceLateAllowedMin)
        //                                    {
        //                                        //// Added by Rajas on 29 APRIL 2017
        //                                        //DailyTransactionObj.Status = "PPPP^";

        //                                        // Updated by Rajas on 8 AUGUST 2017 START
        //                                        PostingFlagModelObj.IsLate = true;

        //                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                        // Updated by Rajas on 8 AUGUST 2017 END
        //                                    }

        //                                    if (CalculatedLateTime > LateAllowedLimit)  // GRACE < LATE ALLOED ? NEED TO VERIFY
        //                                    {
        //                                        //DailyTransactionObj.Status = "AAPP^";  // AAPP
        //                                        DailyTransactionObj.Remark = "Late";

        //                                        // Updated by Rajas on 8 AUGUST 2017 START
        //                                        PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming = true;

        //                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                        // Updated by Rajas on 8 AUGUST 2017 END

        //                                        /// NOTE:
        //                                        /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                        /// If Employee is late beyond late allowed limit then deduct Half day directly
        //                                        /// In this case don't update late count as action already taken for late employee.
        //                                        IsLateCountToBeIncremented = false;
        //                                    }
        //                                    // Added by Rajas on 28 APRIL 2017 END

        //                                    // late by min
        //                                    DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
        //                                    //WetosDB.SaveChanges();

        //                                    EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                                    int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                    int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                    // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                                    TimeSpan LateBy = Intime.TimeOfDay - FirstInTime.TimeOfDay; // SecondInTime.TimeOfDay;

        //                                    // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
        //                                    if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
        //                                    {
        //                                        //int TotalLateCountForEmployeeTillDate = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                        //   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.LateCount != null).Count());

        //                                        // Updated by Rajas on 24 AUGUST 2017 to fix late count issue

        //                                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
        //                                        //int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId)
        //                                        //    .Select(a => a.LateCount).Max());
        //                                        int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                        && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                                        .Select(a => a.LateCount).Max());
        //                                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
        //                                        if (RuleForLateCount != null)
        //                                        {
        //                                            int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

        //                                            if (MaxLateCountForEmployee == 0)
        //                                            {
        //                                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                                            }
        //                                            else
        //                                            {
        //                                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                                            }

        //                                            WetosDB.SaveChanges();

        //                                            #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                            // Code in this region modified by Rajas on 20 SEP 2017 START

        //                                            if (RuleForLateCountAttDeduction != null && RuleForLateCountAttDeduction == "TRUE")
        //                                            {
        //                                                // Added by Rajas on 12 AUGUST 2017 
        //                                                // Global setting value base deduction 
        //                                                if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                                                {
        //                                                    if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                                                    {
        //                                                        switch (DeductionDay)
        //                                                        {
        //                                                            case 0:
        //                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            case 1:
        //                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            default:
        //                                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;
        //                                                        }

        //                                                    }
        //                                                }
        //                                                else   // Deduct half day after every allowed late count 
        //                                                {
        //                                                    if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
        //                                                    {
        //                                                        switch (DeductionDay)
        //                                                        {
        //                                                            case 0:
        //                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            case 1:
        //                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;

        //                                                            default:
        //                                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                DailyTransactionObj.Remark = "Late";
        //                                                                break;
        //                                                        }
        //                                                    }
        //                                                    else // Updated by Rajas on 1 SEP 2017
        //                                                    {
        //                                                        if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                                                                    DailyTransactionObj.Remark = "Late";
        //                                                                    break;
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            else if (RuleForLateCountLeaveDeduction != null && RuleForLateCountLeaveDeduction == "TRUE")
        //                                            {
        //                                                // Logic for deduction of Leave is pending

        //                                                // Added By MSJ on 13 March 2019 START
        //                                                DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, LateAllowed, DeductLeaveCode, NoOfDaysDeduct, 2);
        //                                                // Added By MSJ on 13 March 2019 END

        //                                                //// ADDED BY MSJ ON 22 FEB 2019 START
        //                                                //string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                                                //int Count = LeaveCodes.Length;

        //                                                //// Check balance for First leave type
        //                                                //for (int i = 0; i <= Count; i++)
        //                                                //{
        //                                                //    string LeaveType = LeaveCodes[i].Trim();

        //                                                //    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                //        && a.LeaveType == LeaveType).FirstOrDefault();

        //                                                //    if (AvailableLeaveBalance != null)
        //                                                //    {
        //                                                //        if (AvailableLeaveBalance.CurrentBalance > 0)
        //                                                //        {
        //                                                //            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                                                //            //if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
        //                                                //            {
        //                                                //                // Deduct balance for Leave
        //                                                //                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
        //                                                //                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

        //                                                //                // Update entry in DailyTransaction for Deducted leave type
        //                                                //                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
        //                                                //                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

        //                                                //                //WetosDB.SaveChanges();
        //                                                //            }

        //                                                //            break; // If deduction is done then stop loop.
        //                                                //        }
        //                                                //    }

        //                                                //}
        //                                                //// ADDED BY MSJ ON 22 FEB 2019 END
        //                                            }
        //                                            else  // Late mark only. No deduction
        //                                            {
        //                                                // Updated by Rajas on 28 SEP 2017
        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                DailyTransactionObj.Remark = "Late";
        //                                            }

        //                                            // Code in this region modified by Rajas on 20 SEP 2017 END

        //                                            #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES
        //                                        }
        //                                        //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END

        //                                        WetosDB.SaveChanges();

        //                                        //  IsUpdateStatus = true; // (19 AUG 2017) At this momnet not required 

        //                                        //// Added by Rajas on 5 AUGUST 2017
        //                                        //PreviousLateCount = DailyTransactionObj.LateCount == null ? 0 : DailyTransactionObj.LateCount.Value;
        //                                    }
        //                                    else  // Added by Rajas on 5 AUGUST 2017
        //                                    {
        //                                        //// Employee is Not Late, then
        //                                        //DailyTransactionObj.LateCount = PreviousLateCount;
        //                                        //WetosDB.SaveChanges();
        //                                    }


        //                                }
        //                            }
        //                            // LATE COMING LOGIC END
        //                            #endregion

        //                            if (DailyTransactionObj.WorkingHrs != null)
        //                            {
        //                                #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

        //                                // What will happen in case of night shift

        //                                //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                                if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
        //                                {
        //                                    //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                                    //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
        //                                    if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
        //                                     && DailyTransactionObj.WorkingHrs.Value.Second == 0)
        //                                    {
        //                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
        //                                        WetosDB.SaveChanges();
        //                                    }
        //                                }
        //                                //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
        //                                #endregion

        //                                #region  EARLY GOING LOGIC
        //                                // EARLY GOING LOGIC START
        //                                //EARLY GOING 

        //                                // Logic need to be updated as per late count

        //                                // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

        //                                ReturnMessage = string.Empty;
        //                                UpdatedStatus = string.Empty;
        //                                NewStatus = string.Empty;

        //                                // Rest all flags
        //                                PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                                if (RuleTransactionList != null)
        //                                {
        //                                    // 6 - allowed Early going min
        //                                    string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

        //                                    if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
        //                                    {
        //                                        string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
        //                                    }

        //                                    /// Added by Rajas on 28 APRIL 2017 START
        //                                    /// To check GraceLateAllowed limit

        //                                    // 3 - Grace early allowed limit
        //                                    string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();

        //                                    DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

        //                                    TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
        //                                    /// Added by Rajas on 28 APRIL 2017 END

        //                                    if (OutTime.TimeOfDay < FirstOutTime.TimeOfDay)
        //                                    {
        //                                        string EarlyTimeString = (FirstOutTime.TimeOfDay - OutTime.TimeOfDay).ToString();

        //                                        string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

        //                                        // Added by Rajas on 28 APRIL 2017 START
        //                                        // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
        //                                        DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
        //                                        DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

        //                                        // Save original attendance status
        //                                        // Added by Rajas on 8 AUGUST 2017
        //                                        DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                        if (CalculatedEarlyTime > GraceEarlyAllowedMin)
        //                                        {
        //                                            // Added by Rajas on 29 APRIL 2017
        //                                            //if (!IsUpdateStatus)  (19 AUG 2017) At this momnet not required
        //                                            {
        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsLate = true;

        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Updated by Rajas on 8 AUGUST 2017 END

        //                                                DailyTransactionObj.Remark = "Early"; // Added by rajas on 19 AUGUST 2017
        //                                            }
        //                                        }

        //                                        if (CalculatedEarlyTime > EarlyAllowedLimit)
        //                                        {
        //                                            //if (!IsUpdateStatus) // (19 AUG 2017) At this momnet not required
        //                                            {
        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing = true;

        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Updated by Rajas on 8 AUGUST 2017 END
        //                                            }

        //                                            DailyTransactionObj.Remark = "Early";
        //                                            WetosDB.SaveChanges();

        //                                            /// NOTE:
        //                                            /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                            /// If Employee left early beyond early allowed limit then deduct Half day directly
        //                                            /// In this case don't update late count as action already taken for late employee.
        //                                            IsEarlyCountToBeIncremented = false;
        //                                        }
        //                                        // Added by Rajas on 28 APRIL 2017 END

        //                                        // Early by min
        //                                        DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
        //                                        //WetosDB.SaveChanges();

        //                                        EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                        // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                                        TimeSpan EarlyBy = FirstOutTime.TimeOfDay - OutTime.TimeOfDay;  // SecondInTime.TimeOfDay;

        //                                        //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added
        //                                        if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
        //                                        {
        //                                            // Updated by Rajas on 28 AUGUST 2017 to fix early count issue
        //                                            int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                                && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                                                .Select(a => a.EarlyCount).Max());

        //                                            if (RuleForEarlyCount != null)
        //                                            {
        //                                                int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

        //                                                if (MaxearlyCountForEmployee == 0)
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                else
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                                                }

        //                                                WetosDB.SaveChanges();

        //                                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 START

        //                                                if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
        //                                                {
        //                                                    // Added by Rajas on 12 AUGUST 2017 
        //                                                    // Global setting value base deduction 
        //                                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                                                    {
        //                                                        if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }

        //                                                        }
        //                                                    }
        //                                                    else   // Deduct half day after every allowed late count 
        //                                                    {
        //                                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
        //                                                        {
        //                                                            switch (DeductionDay)
        //                                                            {
        //                                                                case 0:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                case 1:
        //                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;

        //                                                                default:
        //                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                    DailyTransactionObj.Remark = "Early";
        //                                                                    break;
        //                                                            }
        //                                                        }
        //                                                        else // Updated by Rajas on 1 SEP 2017
        //                                                        {
        //                                                            if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                                                            {
        //                                                                switch (DeductionDay)
        //                                                                {
        //                                                                    case 0:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    case 1:
        //                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;

        //                                                                    default:
        //                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                                                                        DailyTransactionObj.Remark = "Early";
        //                                                                        break;
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }
        //                                                else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
        //                                                {
        //                                                    // Logic for deduction of Leave is pending

        //                                                    // Added By MSJ on 13 March 2019 START
        //                                                    DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyAllowed, DeductLeaveCode, NoOfDaysDeduct, 1);
        //                                                    // Added By MSJ on 13 March 2019 END

        //                                                    //// ADDED BY MSJ ON 22 FEB 2019 START
        //                                                    //string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                                                    //int Count = LeaveCodes.Length;

        //                                                    //// Check balance for First leave type
        //                                                    //for (int i = 0; i <= Count; i++)
        //                                                    //{
        //                                                    //    string LeaveType = LeaveCodes[i].Trim();

        //                                                    //    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                                                    //        && a.LeaveType == LeaveType).FirstOrDefault();

        //                                                    //    if (AvailableLeaveBalance != null)
        //                                                    //    {
        //                                                    //        if (AvailableLeaveBalance.CurrentBalance > 0)
        //                                                    //        {
        //                                                    //            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                                                    //            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
        //                                                    //            {
        //                                                    //                // Deduct balance for Leave
        //                                                    //                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
        //                                                    //                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

        //                                                    //                // Update entry in DailyTransaction for Deducted leave type
        //                                                    //                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
        //                                                    //                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

        //                                                    //                //WetosDB.SaveChanges();
        //                                                    //            }

        //                                                    //            break; // If deduction is done then stop loop.
        //                                                    //        }
        //                                                    //    }

        //                                                    //}
        //                                                    //// ADDED BY MSJ ON 22 FEB 2019 END
        //                                                }
        //                                                else  // Early mark only. No deduction
        //                                                {
        //                                                    // Updated by Rajas on 28 SEP 2017
        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                                                    DailyTransactionObj.Remark = "Early";
        //                                                }

        //                                                // Code in this region modified by Rajas on 20 SEP 2017 END

        //                                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                                            }

        //                                            WetosDB.SaveChanges();

        //                                            //// Added by Rajas on 5 AUGUST 2017
        //                                            //PrevEarlyCount = DailyTransactionObj.EarlyCount == null ? 0 : DailyTransactionObj.EarlyCount.Value;

        //                                        }
        //                                        else  // Added by Rajas on 5 AUGUST 2017
        //                                        {
        //                                            //// Employee is Not left early, then
        //                                            //DailyTransactionObj.EarlyCount = PrevEarlyCount;
        //                                            //WetosDB.SaveChanges();
        //                                        }

        //                                        /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
        //                                        /// If employee is Late and Early beyond allowed limit then mark employee absent
        //                                        /// Added by Rajas on 18 MAY 2017
        //                                        //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
        //                                        //{
        //                                        //    DailyTransactionObj.Status = "AAAA";
        //                                        //    DailyTransactionObj.Remark = "Absent";
        //                                        //}


        //                                    }
        //                                }
        //                                // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

        //                                #endregion
        //                            }
        //                            #endregion
        //                        }
        //                        #endregion
        //                        #endregion

        //                        #region THIS CODE IS TO BE DELETED AFTER VERIFIED BY SIR BECAUSE IT IS ALREADY USED ABOVE IN ATTENDANCE BASED RULE CODE BY SHRADDHA
        //                        // Mark shift first
        //                        //#region  FIND NEAREST SHIFT FROM IN OUT AND MARK LATE / EARLY

        //                        //// ADDED BY MSJ ON 28 JAN 2018 
        //                        ////if (!IsAutoShiftFlag) // AUTO SHIFT
        //                        //{
        //                        //    //Added By Shraddha on 10 JAN 2017 to find the Nearest Time Shift
        //                        //    // WWWW replaced with WOWO by Rajas on 29 APRIL 2017
        //                        //    if (DailyTransactionObj.Status != StatusConstants.FullDayAbsentStatus
        //                        //        && DailyTransactionObj.Status != StatusConstants.WeeklyOffStatus
        //                        //        && DailyTransactionObj.Status != StatusConstants.HoliDayStatus) // ????
        //                        //    {
        //                        //        if (!IsAutoShiftFlag) // AUTO SHIFT
        //                        //        {
        //                        //            // Added by Rajas on 12 APRIL 2017 for Getting SHIFT
        //                        //            #region MARK SHIFT FROM SHIFT SCHEDULE Otherwise MARK FROM DEFAULT SHIFT

        //                        //            int CurrentMonth = Intime.Month;
        //                        //            int CurrentYear = Intime.Year;
        //                        //            int CurrentDay = Intime.Day;

        //                        //            // Based on Employee, Year and Month
        //                        //            ShiftSchedule ShiftScheduleObj = WetosDB.ShiftSchedules.Where(a => a.ShiftMonth == CurrentMonth && a.ShiftYear == CurrentYear
        //                        //                && a.EmployeeId == EmployeeObj.EmployeeId).FirstOrDefault();

        //                        //            //Shift ShiftObjForCurrentEmployee = new Shift();

        //                        //            // Added by Rajas on 14 JUNE 2017

        //                        //            //GlobalSetting GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == "Mark Half Day Shift").FirstOrDefault();

        //                        //            //ABOVE LINE COMMENTED BY AND BELOW ADDED BY SHALAKA ON 13TH DEC 2017
        //                        //            GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == GlobalSettingsConstant.MarkHalfDayShift).FirstOrDefault();

        //                        //            // Added by Rajas on 8 AUGUST 2017 START
        //                        //            string ShiftDay = Convert.ToString(DailyTransactionObj.TranDate.DayOfWeek).ToUpper().Trim();


        //                        //            // Added by Rajas on 16 AUGUST 2017 for marking Half Day shift as per Employee table value
        //                        //            string WeeklyHalfDay = EmployeeObj.WeeklyHalfDay == null ? string.Empty : EmployeeObj.WeeklyHalfDay.ToUpper().Trim();

        //                        //            // Updated by Rajas on 16 AUGUST 2017
        //                        //            if (ShiftDay == WeeklyHalfDay) //  WeeklyHalfDay Added in Employee table
        //                        //            {
        //                        //                IsHalfDay = true;    // IsSaturday
        //                        //            }
        //                        //            // Added by Rajas on 8 AUGUST 2017 END

        //                        //            #region CODE TO GET ASSIGNED SHIFT FOR CURRENT DAY FOR EACH EMPLOYEE
        //                        //            //CODE ADDED BY SHRADDHA ON 19 MAY 2017 TO GET ASSIGNED SHIFT PATTERNS FOR PERTICULAR EMPLOYEE IN PERTICULAR MONTH AND YEAR START

        //                        //            //GET LIST OF ASSIGNED SHIFT PATTERNS FOR PERTICULAR EMPLOYEE IN PERTICULAR MONTH AND YEAR 

        //                        //            // Shift pattern rule to assign shift data flow
        //                        //            List<ShiftSchedulePattern> ShiftSchedulePatternList = WetosDB.ShiftSchedulePatterns.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                        //                && a.ShiftMonth == DailyTransactionObj.TranDate.Month && a.ShiftYear == DailyTransactionObj.TranDate.Year).ToList();

        //                        //            // MODIFIED BY SHALAKA ON 12 DEC 2017 START
        //                        //            if (ShiftSchedulePatternList.Count > 0) //if (ShiftSchedulePatternList != null)
        //                        //            {
        //                        //                List<ShiftSchedulePattern> ShiftSchedulePatternListForPerticularDateRange = ShiftSchedulePatternList.Where(a => a.EffectiveStartDate <= DailyTransactionObj.TranDate
        //                        //                    && a.EffectiveEndDate >= DailyTransactionObj.TranDate).ToList();

        //                        //                if (ShiftSchedulePatternListForPerticularDateRange.Count > 0)
        //                        //                {
        //                        //                    foreach (ShiftSchedulePattern ShiftSchedulePatternObjForPerticularDateRange in ShiftSchedulePatternListForPerticularDateRange)
        //                        //                    {
        //                        //                        int y = DailyTransactionObj.TranDate.Day;

        //                        //                        string command = string.Format(@"select Day{0} from ShiftSchedulePattern where EmployeeId={1} and EffectiveStartDate<='{2}/{3}/{4} {5}' and EffectiveEndDate>='{2}/{3}/{4} {5}' and companyId={6} and branchid={7};"
        //                        //                          , y, DailyTransactionObj.EmployeeId, DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, "00:00", DailyTransactionObj.CompanyId, DailyTransactionObj.BranchId);
        //                        //                        string Shift = WetosDB.ExecuteStoreQuery<string>(command, "").FirstOrDefault();
        //                        //                        DailyTransactionObj.ShiftId = Shift;

        //                        //                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == Shift).FirstOrDefault();

        //                        //                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                        //                            && a.BranchId == EmployeeBranchId
        //                        //                            //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                        //                             && a.FirstInTime == ShiftObjForCurrentEmployee.FirstInTime).FirstOrDefault();

        //                        //                        WetosDB.SaveChanges();

        //                        //                    }
        //                        //                }
        //                        //                else if (GlobalSettingObj != null) // Added by Rajas on 17 JUNE 2017
        //                        //                {
        //                        //                    // Get Global seeting value and saturday 
        //                        //                    if (GlobalSettingObj.SettingValue.Trim() == "1" && IsHalfDay == true)
        //                        //                    {
        //                        //                        // Mark Half Day shift with ShiftCode H 
        //                        //                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode.ToUpper().Trim() == StatusConstants.HalfDayShift).FirstOrDefault();

        //                        //                        DailyTransactionObj.ShiftId = StatusConstants.HalfDayShift;  // Added by Rajas on 16 AUGUST 2017
        //                        //                    }
        //                        //                    else
        //                        //                    {
        //                        //                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift).FirstOrDefault();
        //                        //                    }

        //                        //                    WetosDB.SaveChanges();  // Added by Rajas on 16 AUGUST 2017

        //                        //                    if (ShiftObjForCurrentEmployee != null)
        //                        //                    {
        //                        //                        DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                        //                        WetosDB.SaveChanges();
        //                        //                    }
        //                        //                }
        //                        //                else
        //                        //                {
        //                        //                    #region GET SHIFT  FROM CLOSEST TIME

        //                        //                    DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                        //                        && a.BranchId == EmployeeBranchId
        //                        //                        //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                        //                        //&& a.ShiftCode == EmployeeObj.DefaultShift
        //                        //                        ).Select(a => a.FirstInTime).ToArray();

        //                        //                    long min = long.MaxValue;

        //                        //                    DateTime ClosestTime = new DateTime();

        //                        //                    foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                        //                    {
        //                        //                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
        //                        //                        long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
        //                        //                        if (TempDIff < min)
        //                        //                        {
        //                        //                            min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                        //                            ClosestTime = CurrentDateTime;
        //                        //                        }
        //                        //                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
        //                        //                    }

        //                        //                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                        //                        && a.BranchId == EmployeeBranchId
        //                        //                        //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                        //                         && a.FirstInTime == ClosestTime).FirstOrDefault();

        //                        //                    if (ShiftObjForCurrentEmployee != null)
        //                        //                    {
        //                        //                        DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                        //                        WetosDB.SaveChanges();
        //                        //                    }

        //                        //                    #endregion // COMMON CODE
        //                        //                }
        //                        //            }
        //                        //            //CODE ADDED BY SHRADDHA ON 07 FEB 2018 BECAUSE IT IS REQUIRED IN CASE OF SATURDAY HALF DAY SHIFT START
        //                        //            #region CODE ADDED BY SHRADDHA ON 07 FEB 2018 BECAUSE IT IS REQUIRED IN CASE OF SATURDAY HALF DAY SHIFT
        //                        //            else if (GlobalSettingObj != null) // Added by Rajas on 17 JUNE 2017
        //                        //            {
        //                        //                // Get Global seeting value and saturday 
        //                        //                if (GlobalSettingObj.SettingValue.Trim() == "1" && IsHalfDay == true)
        //                        //                {
        //                        //                    // Mark Half Day shift with ShiftCode H 
        //                        //                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode.ToUpper().Trim() == StatusConstants.HalfDayShift).FirstOrDefault();

        //                        //                    DailyTransactionObj.ShiftId = StatusConstants.HalfDayShift;  // Added by Rajas on 16 AUGUST 2017
        //                        //                }
        //                        //                else
        //                        //                {
        //                        //                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift).FirstOrDefault();
        //                        //                }

        //                        //                WetosDB.SaveChanges();  // Added by Rajas on 16 AUGUST 2017

        //                        //                if (ShiftObjForCurrentEmployee != null)
        //                        //                {
        //                        //                    DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                        //                    WetosDB.SaveChanges();
        //                        //                }
        //                        //            }


        //                        //            else if (IsAutoShiftFlag) // AUTO SHIFT //GET NEAREST SHIFT IF AUTO SHIFT IS AVAILABLE OR CONSIDER DEFAULT SHIFT ADDED BY SHRADDHA ON 08 FEB 2018
        //                        //            {
        //                        //                #region IF AUTO SHIFT AVAIALBLE
        //                        //                #region GET SHIFT  FROM CLOSEST TIME

        //                        //                DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                        //                    && a.BranchId == EmployeeBranchId
        //                        //                    //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                        //                    //&& a.ShiftCode == EmployeeObj.DefaultShift
        //                        //                    ).Select(a => a.FirstInTime).ToArray();

        //                        //                long min = long.MaxValue;

        //                        //                DateTime ClosestTime = new DateTime();

        //                        //                foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                        //                {
        //                        //                    // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
        //                        //                    long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
        //                        //                    if (TempDIff < min)
        //                        //                    {
        //                        //                        min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                        //                        ClosestTime = CurrentDateTime;
        //                        //                    }
        //                        //                    // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
        //                        //                }

        //                        //                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                        //                    && a.BranchId == EmployeeBranchId
        //                        //                    //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                        //                     && a.FirstInTime == ClosestTime).FirstOrDefault();

        //                        //                if (ShiftObjForCurrentEmployee != null)
        //                        //                {
        //                        //                    DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                        //                    WetosDB.SaveChanges();
        //                        //                }

        //                        //                #endregion
        //                        //                #endregion
        //                        //            }
        //                        //            #endregion
        //                        //            //CODE ADDED BY SHRADDHA ON 07 FEB 2018 BECAUSE IT IS REQUIRED IN CASE OF SATURDAY HALF DAY SHIFT END
        //                        //            else
        //                        //            {
        //                        //                #region CONSIDER SHIFT FROM DEFAULT SHIFT
        //                        //                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift).FirstOrDefault();
        //                        //                if (ShiftObjForCurrentEmployee != null)
        //                        //                {
        //                        //                    DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                        //                    WetosDB.SaveChanges();
        //                        //                }
        //                        //                #endregion
        //                        //            }

        //                        //            #endregion

        //                        //            #endregion
        //                        //        }
        //                        //        else // ADDED BY MSJ ON 28 JAN 2018
        //                        //        {
        //                        //            //ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();

        //                        //            #region GET SHIFT  FROM CLOSEST TIME

        //                        //            DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                        //                && a.BranchId == EmployeeBranchId
        //                        //                //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                        //                //&& a.ShiftCode == EmployeeObj.DefaultShift
        //                        //                ).Select(a => a.FirstInTime).ToArray();

        //                        //            long min = long.MaxValue;

        //                        //            DateTime ClosestTime = new DateTime();

        //                        //            foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                        //            {
        //                        //                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
        //                        //                long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
        //                        //                if (TempDIff < min)
        //                        //                {
        //                        //                    min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                        //                    ClosestTime = CurrentDateTime;
        //                        //                }
        //                        //                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
        //                        //            }

        //                        //            DateTime NSTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 23, 00, 00);
        //                        //            if (Intime.TimeOfDay > NSTime.TimeOfDay)
        //                        //            {
        //                        //                // NS ISSUE FIXED BY MSJ ON 29 JAN 2018
        //                        //                DailyTransactionObj.ShiftId = "AHD3";
        //                        //                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
        //                        //            }
        //                        //            else
        //                        //            {
        //                        //                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                        //                    && a.BranchId == EmployeeBranchId
        //                        //                    //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
        //                        //                     && a.FirstInTime == ClosestTime).FirstOrDefault();
        //                        //            }

        //                        //            WetosDB.SaveChanges();

        //                        //            #endregion
        //                        //        }



        //                        //        // Flexi shif not applicable then LATE/EARLY dedcution will take place as per Attendance rules.
        //                        //        if (IsFlexiShiftAllowed == null || IsFlexiShiftAllowed == "FALSE")
        //                        //        {
        //                        //            #region LATE/EARLY Logic as per Shift time and Attendance rules

        //                        //            /// IsLateCountToBeIncremented YES/NO
        //                        //            /// Flag added by Rajas on 28 APRIL 2017
        //                        //            bool IsLateCountToBeIncremented = true;

        //                        //            /// IsEarlyCountToBeIncremented YES/NO
        //                        //            /// Flag added by Rajas on 28 APRIL 2017
        //                        //            bool IsEarlyCountToBeIncremented = true;

        //                        //            bool IsUpdateStatus = false;  // Added by Rajas on 4 AUGUST 2017

        //                        //            // Initialise GlobalSettingObj
        //                        //            GlobalSettingObj = new GlobalSetting();
        //                        //            //GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == "Is Cont Late Deduction").FirstOrDefault();

        //                        //            //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
        //                        //            GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == GlobalSettingsConstant.IsContLateDeduction).FirstOrDefault();

        //                        //            #region LOGIC FOR LATE MARK AND SHIFT

        //                        //            ReturnMessage = string.Empty;
        //                        //            UpdatedStatus = string.Empty;
        //                        //            NewStatus = string.Empty;

        //                        //            // Rest all flags
        //                        //            PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                        //            // LOGIC FOR LATE MARK AND SHIFT
        //                        //            if (ShiftObjForCurrentEmployee == null)
        //                        //            {
        //                        //                ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
        //                        //            }

        //                        //            //DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);

        //                        //            // ADDED BY MSJ ON 28 JAN 2018 START
        //                        //            DateTime FirstInTime = ShiftObjForCurrentEmployee.FirstInTime; //OKAY CODE
        //                        //            //DateTime FirstInTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 
        //                        //            //    ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute
        //                        //            //    , ShiftObjForCurrentEmployee.FirstInTime.Second);


        //                        //            // DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);
        //                        //            DateTime FirstOutTime = ShiftObjForCurrentEmployee.FirstOutTime; //OKAY CODE
        //                        //            //DateTime FirstOutTime = new DateTime(Intime.Year, Intime.Month, Intime.Day,
        //                        //            //    ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
        //                        //            //    , ShiftObjForCurrentEmployee.FirstOutTime.Second);

        //                        //            // ADDED BY MSJ ON 28 JAN 2018 END

        //                        //            //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
        //                        //            //DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
        //                        //            DateTime? SecondInTime = ShiftObjForCurrentEmployee.SecondInTime;
        //                        //            // DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);
        //                        //            DateTime? SecondOutTime = ShiftObjForCurrentEmployee.SecondOutTime;


        //                        //            // LATE COMING GRACE TIME FROM RULE 5
        //                        //            //int LCGraceTimeMinutes = 00;

        //                        //            if (RuleTransactionList != null)
        //                        //            {
        //                        //                // 5 - allowed late comming min
        //                        //                string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

        //                        //                if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
        //                        //                {
        //                        //                    string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

        //                        //                    //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
        //                        //                    //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
        //                        //                }

        //                        //                /// Added by Rajas on 28 APRIL 2017 START
        //                        //                /// To check GraceLateAllowed limit

        //                        //                // 4 - Grace late allowed limit
        //                        //                string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

        //                        //                DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

        //                        //                TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
        //                        //                /// Added by Rajas on 28 APRIL 2017 END

        //                        //                //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
        //                        //                //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
        //                        //                // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

        //                        //                // LATE COMING LOGIC START
        //                        //                // int LateMarkCount = 1;
        //                        //                // Below line for FirstInTime modified by Rajas on 18 APRIL 2017

        //                        //                // MOVED THESE TWO VARIABLE OUT OF THE LOOP
        //                        //                string LateTimeString = string.Empty;
        //                        //                string Latestring = string.Empty;
        //                        //                DateTime CalculatedLateTime = DateTime.Now.Date;
        //                        //                DateTime LateAllowedLimit = DateTime.Now.Date;

        //                        //                // ADDED BY MSJ ON 29 JAN 2018 START
        //                        //                if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                        //                {
        //                        //                    LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                        //                    CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                        //                }
        //                        //                // ADDED BY MSJ ON 19 JAN 2018 END

        //                        //                if (Intime.TimeOfDay > FirstInTime.TimeOfDay && CalculatedLateTime.Hour < 8)  // SecondInTime.TimeOfDay
        //                        //                {
        //                        //                    //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

        //                        //                    // ADDED BY MSJ ON 29 JAN 2018 START
        //                        //                    if (Intime.TimeOfDay > FirstInTime.TimeOfDay)
        //                        //                    {
        //                        //                        // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
        //                        //                        LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                        //                        //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
        //                        //                        Latestring = Intime.ToShortDateString() + " " + LateTimeString;

        //                        //                        // Added by Rajas on 28 APRIL 2017 START
        //                        //                        // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
        //                        //                        LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr); // MODIFIED MSJ 
        //                        //                        CalculatedLateTime = Convert.ToDateTime(LateTimeString);
        //                        //                    }

        //                        //                    // Save original attendance status
        //                        //                    // Added by Rajas on 8 AUGUST 2017
        //                        //                    DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                        //                    if (CalculatedLateTime > GraceLateAllowedMin)
        //                        //                    {
        //                        //                        //// Added by Rajas on 29 APRIL 2017
        //                        //                        //DailyTransactionObj.Status = "PPPP^";

        //                        //                        // Updated by Rajas on 8 AUGUST 2017 START
        //                        //                        PostingFlagModelObj.IsLate = true;

        //                        //                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                        //                        DailyTransactionObj.Status = UpdatedStatus;
        //                        //                        // Updated by Rajas on 8 AUGUST 2017 END
        //                        //                    }

        //                        //                    if (CalculatedLateTime > LateAllowedLimit)  // GRACE < LATE ALLOED ? NEED TO VERIFY
        //                        //                    {
        //                        //                        //DailyTransactionObj.Status = "AAPP^";  // AAPP
        //                        //                        DailyTransactionObj.Remark = "Late";

        //                        //                        // Updated by Rajas on 8 AUGUST 2017 START
        //                        //                        PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming = true;

        //                        //                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                        //                        DailyTransactionObj.Status = UpdatedStatus;
        //                        //                        // Updated by Rajas on 8 AUGUST 2017 END

        //                        //                        /// NOTE:
        //                        //                        /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                        //                        /// If Employee is late beyond late allowed limit then deduct Half day directly
        //                        //                        /// In this case don't update late count as action already taken for late employee.
        //                        //                        IsLateCountToBeIncremented = false;
        //                        //                    }
        //                        //                    // Added by Rajas on 28 APRIL 2017 END

        //                        //                    // late by min
        //                        //                    DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
        //                        //                    //WetosDB.SaveChanges();

        //                        //                    int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                        //                    int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                        //                    int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                        //                    // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                        //                    TimeSpan LateBy = Intime.TimeOfDay - FirstInTime.TimeOfDay; // SecondInTime.TimeOfDay;

        //                        //                    // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
        //                        //                    if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
        //                        //                    {
        //                        //                        //int TotalLateCountForEmployeeTillDate = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                        //                        //   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.LateCount != null).Count());

        //                        //                        // Updated by Rajas on 24 AUGUST 2017 to fix late count issue

        //                        //                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
        //                        //                        //int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId)
        //                        //                        //    .Select(a => a.LateCount).Max());
        //                        //                        int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                        //                        && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                        //                        .Select(a => a.LateCount).Max());
        //                        //                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
        //                        //                        if (RuleForLateCount != null)
        //                        //                        {
        //                        //                            int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

        //                        //                            if (MaxLateCountForEmployee == 0)
        //                        //                            {
        //                        //                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                        //                            }
        //                        //                            else
        //                        //                            {
        //                        //                                DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
        //                        //                            }

        //                        //                            WetosDB.SaveChanges();

        //                        //                            #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                        //                            // Code in this region modified by Rajas on 20 SEP 2017 START

        //                        //                            if (RuleForLateCountAttDeduction != null && RuleForLateCountAttDeduction == "TRUE")
        //                        //                            {
        //                        //                                // Added by Rajas on 12 AUGUST 2017 
        //                        //                                // Global setting value base deduction 
        //                        //                                if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                        //                                {
        //                        //                                    if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                        //                                    {
        //                        //                                        switch (DeductionDay)
        //                        //                                        {
        //                        //                                            case 0:
        //                        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                DailyTransactionObj.Remark = "Late";
        //                        //                                                break;

        //                        //                                            case 1:
        //                        //                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                DailyTransactionObj.Remark = "Late";
        //                        //                                                break;

        //                        //                                            default:
        //                        //                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                        //                                                DailyTransactionObj.Remark = "Late";
        //                        //                                                break;
        //                        //                                        }

        //                        //                                    }
        //                        //                                }
        //                        //                                else   // Deduct half day after every allowed late count 
        //                        //                                {
        //                        //                                    if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
        //                        //                                    {
        //                        //                                        switch (DeductionDay)
        //                        //                                        {
        //                        //                                            case 0:
        //                        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                DailyTransactionObj.Remark = "Late";
        //                        //                                                break;

        //                        //                                            case 1:
        //                        //                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                DailyTransactionObj.Remark = "Late";
        //                        //                                                break;

        //                        //                                            default:
        //                        //                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                        //                                                DailyTransactionObj.Remark = "Late";
        //                        //                                                break;
        //                        //                                        }
        //                        //                                    }
        //                        //                                    else // Updated by Rajas on 1 SEP 2017
        //                        //                                    {
        //                        //                                        if (DailyTransactionObj.LateCount % LateAllowed == 0)
        //                        //                                        {
        //                        //                                            switch (DeductionDay)
        //                        //                                            {
        //                        //                                                case 0:
        //                        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                    DailyTransactionObj.Remark = "Late";
        //                        //                                                    break;

        //                        //                                                case 1:
        //                        //                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                    DailyTransactionObj.Remark = "Late";
        //                        //                                                    break;

        //                        //                                                default:
        //                        //                                                    DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
        //                        //                                                    DailyTransactionObj.Remark = "Late";
        //                        //                                                    break;
        //                        //                                            }
        //                        //                                        }
        //                        //                                    }
        //                        //                                }
        //                        //                            }
        //                        //                            else if (RuleForLateCountLeaveDeduction != null && RuleForLateCountLeaveDeduction == "TRUE")
        //                        //                            {
        //                        //                                // Logic for deduction of Leave is pending
        //                        //                            }
        //                        //                            else  // Late mark only. No deduction
        //                        //                            {
        //                        //                                // Updated by Rajas on 28 SEP 2017
        //                        //                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                DailyTransactionObj.Remark = "Late";
        //                        //                            }

        //                        //                            // Code in this region modified by Rajas on 20 SEP 2017 END

        //                        //                            #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES
        //                        //                        }
        //                        //                        //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END

        //                        //                        WetosDB.SaveChanges();

        //                        //                        //  IsUpdateStatus = true; // (19 AUG 2017) At this momnet not required 

        //                        //                        //// Added by Rajas on 5 AUGUST 2017
        //                        //                        //PreviousLateCount = DailyTransactionObj.LateCount == null ? 0 : DailyTransactionObj.LateCount.Value;
        //                        //                    }
        //                        //                    else  // Added by Rajas on 5 AUGUST 2017
        //                        //                    {
        //                        //                        //// Employee is Not Late, then
        //                        //                        //DailyTransactionObj.LateCount = PreviousLateCount;
        //                        //                        //WetosDB.SaveChanges();
        //                        //                    }


        //                        //                }
        //                        //            }
        //                        //            // LATE COMING LOGIC END
        //                        //            #endregion

        //                        //            if (DailyTransactionObj.WorkingHrs != null)
        //                        //            {
        //                        //                #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

        //                        //                // What will happen in case of night shift

        //                        //                //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                        //                if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
        //                        //                {
        //                        //                    //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                        //                    //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
        //                        //                    if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
        //                        //                     && DailyTransactionObj.WorkingHrs.Value.Second == 0)
        //                        //                    {
        //                        //                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
        //                        //                        WetosDB.SaveChanges();
        //                        //                    }
        //                        //                }
        //                        //                //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
        //                        //                #endregion

        //                        //                #region  EARLY GOING LOGIC
        //                        //                // EARLY GOING LOGIC START
        //                        //                //EARLY GOING 

        //                        //                // Logic need to be updated as per late count

        //                        //                // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

        //                        //                ReturnMessage = string.Empty;
        //                        //                UpdatedStatus = string.Empty;
        //                        //                NewStatus = string.Empty;

        //                        //                // Rest all flags
        //                        //                PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

        //                        //                if (RuleTransactionList != null)
        //                        //                {
        //                        //                    // 6 - allowed Early going min
        //                        //                    string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

        //                        //                    if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
        //                        //                    {
        //                        //                        string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
        //                        //                    }

        //                        //                    /// Added by Rajas on 28 APRIL 2017 START
        //                        //                    /// To check GraceLateAllowed limit

        //                        //                    // 3 - Grace early allowed limit
        //                        //                    string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();

        //                        //                    DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

        //                        //                    TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
        //                        //                    /// Added by Rajas on 28 APRIL 2017 END

        //                        //                    if (OutTime.TimeOfDay < FirstOutTime.TimeOfDay)
        //                        //                    {
        //                        //                        string EarlyTimeString = (FirstOutTime.TimeOfDay - OutTime.TimeOfDay).ToString();

        //                        //                        string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

        //                        //                        // Added by Rajas on 28 APRIL 2017 START
        //                        //                        // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
        //                        //                        DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
        //                        //                        DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

        //                        //                        // Save original attendance status
        //                        //                        // Added by Rajas on 8 AUGUST 2017
        //                        //                        DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                        //                        if (CalculatedEarlyTime > GraceEarlyAllowedMin)
        //                        //                        {
        //                        //                            // Added by Rajas on 29 APRIL 2017
        //                        //                            //if (!IsUpdateStatus)  (19 AUG 2017) At this momnet not required
        //                        //                            {
        //                        //                                // Updated by Rajas on 8 AUGUST 2017 START
        //                        //                                PostingFlagModelObj.IsLate = true;

        //                        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                        //                                DailyTransactionObj.Status = UpdatedStatus;
        //                        //                                // Updated by Rajas on 8 AUGUST 2017 END

        //                        //                                DailyTransactionObj.Remark = "Early"; // Added by rajas on 19 AUGUST 2017
        //                        //                            }
        //                        //                        }

        //                        //                        if (CalculatedEarlyTime > EarlyAllowedLimit)
        //                        //                        {
        //                        //                            //if (!IsUpdateStatus) // (19 AUG 2017) At this momnet not required
        //                        //                            {
        //                        //                                // Updated by Rajas on 8 AUGUST 2017 START
        //                        //                                PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing = true;

        //                        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                        //                                DailyTransactionObj.Status = UpdatedStatus;
        //                        //                                // Updated by Rajas on 8 AUGUST 2017 END
        //                        //                            }

        //                        //                            DailyTransactionObj.Remark = "Early";
        //                        //                            WetosDB.SaveChanges();

        //                        //                            /// NOTE:
        //                        //                            /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                        //                            /// If Employee left early beyond early allowed limit then deduct Half day directly
        //                        //                            /// In this case don't update late count as action already taken for late employee.
        //                        //                            IsEarlyCountToBeIncremented = false;
        //                        //                        }
        //                        //                        // Added by Rajas on 28 APRIL 2017 END

        //                        //                        // Early by min
        //                        //                        DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
        //                        //                        //WetosDB.SaveChanges();

        //                        //                        int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                        //                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                        //                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                        //                        // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                        //                        TimeSpan EarlyBy = FirstOutTime.TimeOfDay - OutTime.TimeOfDay;  // SecondInTime.TimeOfDay;

        //                        //                        //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added
        //                        //                        if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
        //                        //                        {
        //                        //                            // Updated by Rajas on 28 AUGUST 2017 to fix early count issue
        //                        //                            int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                        //                                && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
        //                        //                                .Select(a => a.EarlyCount).Max());

        //                        //                            if (RuleForEarlyCount != null)
        //                        //                            {
        //                        //                                int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

        //                        //                                if (MaxearlyCountForEmployee == 0)
        //                        //                                {
        //                        //                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                        //                                }

        //                        //                                else
        //                        //                                {
        //                        //                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                        //                                }

        //                        //                                WetosDB.SaveChanges();

        //                        //                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                        //                                // Code in this region modified by Rajas on 20 SEP 2017 START

        //                        //                                if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
        //                        //                                {
        //                        //                                    // Added by Rajas on 12 AUGUST 2017 
        //                        //                                    // Global setting value base deduction 
        //                        //                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                        //                                    {
        //                        //                                        if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                        //                                        {
        //                        //                                            switch (DeductionDay)
        //                        //                                            {
        //                        //                                                case 0:
        //                        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;

        //                        //                                                case 1:
        //                        //                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;

        //                        //                                                default:
        //                        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;
        //                        //                                            }

        //                        //                                        }
        //                        //                                    }
        //                        //                                    else   // Deduct half day after every allowed late count 
        //                        //                                    {
        //                        //                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
        //                        //                                        {
        //                        //                                            switch (DeductionDay)
        //                        //                                            {
        //                        //                                                case 0:
        //                        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;

        //                        //                                                case 1:
        //                        //                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;

        //                        //                                                default:
        //                        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;
        //                        //                                            }
        //                        //                                        }
        //                        //                                        else // Updated by Rajas on 1 SEP 2017
        //                        //                                        {
        //                        //                                            if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                        //                                            {
        //                        //                                                switch (DeductionDay)
        //                        //                                                {
        //                        //                                                    case 0:
        //                        //                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                        DailyTransactionObj.Remark = "Early";
        //                        //                                                        break;

        //                        //                                                    case 1:
        //                        //                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                        DailyTransactionObj.Remark = "Early";
        //                        //                                                        break;

        //                        //                                                    default:
        //                        //                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                        //                                                        DailyTransactionObj.Remark = "Early";
        //                        //                                                        break;
        //                        //                                                }
        //                        //                                            }
        //                        //                                        }
        //                        //                                    }
        //                        //                                }
        //                        //                                else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
        //                        //                                {
        //                        //                                    // Logic for deduction of Leave is pending
        //                        //                                }
        //                        //                                else  // Early mark only. No deduction
        //                        //                                {
        //                        //                                    // Updated by Rajas on 28 SEP 2017
        //                        //                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                    DailyTransactionObj.Remark = "Early";
        //                        //                                }

        //                        //                                // Code in this region modified by Rajas on 20 SEP 2017 END

        //                        //                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                        //                            }

        //                        //                            WetosDB.SaveChanges();

        //                        //                            //// Added by Rajas on 5 AUGUST 2017
        //                        //                            //PrevEarlyCount = DailyTransactionObj.EarlyCount == null ? 0 : DailyTransactionObj.EarlyCount.Value;

        //                        //                        }
        //                        //                        else  // Added by Rajas on 5 AUGUST 2017
        //                        //                        {
        //                        //                            //// Employee is Not left early, then
        //                        //                            //DailyTransactionObj.EarlyCount = PrevEarlyCount;
        //                        //                            //WetosDB.SaveChanges();
        //                        //                        }

        //                        //                        /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
        //                        //                        /// If employee is Late and Early beyond allowed limit then mark employee absent
        //                        //                        /// Added by Rajas on 18 MAY 2017
        //                        //                        //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
        //                        //                        //{
        //                        //                        //    DailyTransactionObj.Status = "AAAA";
        //                        //                        //    DailyTransactionObj.Remark = "Absent";
        //                        //                        //}


        //                        //                    }
        //                        //                }
        //                        //                // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

        //                        //                #endregion
        //                        //            }
        //                        //            #endregion
        //                        //        }
        //                        //        else
        //                        //        {
        //                        //            /// Mark working hours as per shift Yes/No
        //                        //            /// If No then, use sub-rules as WorkHoursHalfDayLimit and WorkHoursFullDayLimit
        //                        //            string WorkingHoursAsPerShift = RuleTransactionList.Where(a => a.RuleId == 12).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

        //                        //            if (WorkingHoursAsPerShift != null && WorkingHoursAsPerShift == "FALSE")
        //                        //            {
        //                        //                string WorkHoursHalfDayLimit = RuleTransactionList.Where(a => a.RuleId == 29).Select(a => a.Formula).FirstOrDefault();
        //                        //                string WorkHoursFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 28).Select(a => a.Formula).FirstOrDefault();

        //                        //                if (WorkHoursHalfDayLimit != null && WorkHoursFullDayLimit != null)
        //                        //                {
        //                        //                    DateTime HalfDayLimit = Convert.ToDateTime(WorkHoursHalfDayLimit);
        //                        //                    DateTime FullDayLimit = Convert.ToDateTime(WorkHoursFullDayLimit);

        //                        //                    if (HalfDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
        //                        //                    {
        //                        //                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                    }
        //                        //                    else if ((HalfDayLimit.TimeOfDay < DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
        //                        //                        && (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay))
        //                        //                    {
        //                        //                        DailyTransactionObj.Status = StatusConstants.SecondHalfAbsentStatus;
        //                        //                    }
        //                        //                    else if (FullDayLimit > DailyTransactionObj.WorkingHrs)
        //                        //                    {
        //                        //                        string EarlyTime = (FullDayLimit.TimeOfDay - DailyTransactionObj.WorkingHrs.Value.TimeOfDay).ToString();

        //                        //                        string Earlystring = DailyTransactionObj.WorkingHrs.Value.ToShortDateString() + " " + EarlyTime;

        //                        //                        DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);

        //                        //                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                        //                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                        //                        // Get Max early count from existing
        //                        //                        int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions
        //                        //                            .Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                        //                                   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear
        //                        //                                   && a.TranDate < DailyTransactionObj.TranDate)
        //                        //                                   .Select(a => a.EarlyCount).Max());

        //                        //                        DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;  // Update early count

        //                        //                        if (RuleForEarlyCount != null)
        //                        //                        {
        //                        //                            int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

        //                        //                            if (MaxearlyCountForEmployee == 0)
        //                        //                            {
        //                        //                                DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                        //                            }

        //                        //                            else
        //                        //                            {
        //                        //                                DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
        //                        //                            }

        //                        //                            WetosDB.SaveChanges();

        //                        //                            #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                        //                            // Code in this region modified by Rajas on 20 SEP 2017 START

        //                        //                            if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "FALSE")
        //                        //                            {
        //                        //                                // Added by Rajas on 12 AUGUST 2017 
        //                        //                                // Global setting value base deduction 
        //                        //                                if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
        //                        //                                {
        //                        //                                    if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                        //                                    {
        //                        //                                        switch (DeductionDay)
        //                        //                                        {
        //                        //                                            case 0:
        //                        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                DailyTransactionObj.Remark = "Early";
        //                        //                                                break;

        //                        //                                            case 1:
        //                        //                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                DailyTransactionObj.Remark = "Early";
        //                        //                                                break;

        //                        //                                            default:
        //                        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                        //                                                DailyTransactionObj.Remark = "Early";
        //                        //                                                break;
        //                        //                                        }

        //                        //                                    }
        //                        //                                }
        //                        //                                else   // Deduct half day after every allowed late count 
        //                        //                                {
        //                        //                                    if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
        //                        //                                    {
        //                        //                                        switch (DeductionDay)
        //                        //                                        {
        //                        //                                            case 0:
        //                        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                DailyTransactionObj.Remark = "Early";
        //                        //                                                break;

        //                        //                                            case 1:
        //                        //                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                DailyTransactionObj.Remark = "Early";
        //                        //                                                break;

        //                        //                                            default:
        //                        //                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                        //                                                DailyTransactionObj.Remark = "Early";
        //                        //                                                break;
        //                        //                                        }
        //                        //                                    }
        //                        //                                    else // Updated by Rajas on 1 SEP 2017
        //                        //                                    {
        //                        //                                        if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                        //                                        {
        //                        //                                            switch (DeductionDay)
        //                        //                                            {
        //                        //                                                case 0:
        //                        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;

        //                        //                                                case 1:
        //                        //                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;

        //                        //                                                default:
        //                        //                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
        //                        //                                                    DailyTransactionObj.Remark = "Early";
        //                        //                                                    break;
        //                        //                                            }
        //                        //                                        }
        //                        //                                    }
        //                        //                                }
        //                        //                            }
        //                        //                            else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
        //                        //                            {
        //                        //                                string[] LeaveCodes = DeductLeaveCode.Split(',');
        //                        //                                int Count = LeaveCodes.Length;

        //                        //                                // Check balance for First leave type
        //                        //                                for (int i = 0; i <= Count; i++)
        //                        //                                {
        //                        //                                    string LeaveType = LeaveCodes[i].Trim();

        //                        //                                    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
        //                        //                                        && a.LeaveType == LeaveType).FirstOrDefault();

        //                        //                                    if (AvailableLeaveBalance != null)
        //                        //                                    {
        //                        //                                        if (AvailableLeaveBalance.CurrentBalance > 0)
        //                        //                                        {
        //                        //                                            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
        //                        //                                            if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
        //                        //                                            {
        //                        //                                                // Deduct balance for Leave
        //                        //                                                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;

        //                        //                                                // Update entry in DailyTransaction for Deducted leave type
        //                        //                                                DailyTransactionObj.LeaveTypeDeducted = LeaveType;

        //                        //                                                //WetosDB.SaveChanges();
        //                        //                                            }

        //                        //                                            break; // If deduction is done then stop loop.
        //                        //                                        }
        //                        //                                    }

        //                        //                                }
        //                        //                            }
        //                        //                            else  // Early mark only. No deduction
        //                        //                            {
        //                        //                                // Updated by Rajas on 28 SEP 2017
        //                        //                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
        //                        //                                DailyTransactionObj.Remark = "Early";
        //                        //                            }

        //                        //                            // Code in this region modified by Rajas on 20 SEP 2017 END

        //                        //                            #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

        //                        //                        }

        //                        //                        WetosDB.SaveChanges();
        //                        //                    }

        //                        //                }
        //                        //            }
        //                        //        }
        //                        //        //---------------------------------Added by Rajas on 28 SEP 2017 END------------------------------------
        //                        //    }
        //                        //}
        //                        //#endregion
        //                        #endregion

        //                        #region CODE TO CONSIDER CONDONE TRN TABLE ENTRY

        //                        ReturnMessage = string.Empty;
        //                        UpdatedStatus = string.Empty;
        //                        NewStatus = string.Empty;
        //                        PostingFlagModelObj = new PostingFlagModel();

        //                        //List<CondoneTrn> CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
        //                        if (CondoneTrnList.Count > 0)
        //                        {
        //                            CondoneTrn CondoneTrnObj = CondoneTrnList.Where(a => a.Company.CompanyId == EmployeeCompanyId && a.Branch.BranchId == EmployeeBranchId).FirstOrDefault();

        //                            if (CondoneTrnObj != null)
        //                            {
        //                                int LateEarlyAllowedTimeHour = 0;
        //                                int LateEarlyAllowedTimeMinute = 0;
        //                                int LateEarlyAllowedTimeSecond = 0;
        //                                int LateEarlyAllowedTotalTimeInMinutes = 0;

        //                                if (!string.IsNullOrEmpty(CondoneTrnObj.LateEarly.Trim()) || !string.IsNullOrWhiteSpace(CondoneTrnObj.LateEarly.Trim()))
        //                                {
        //                                    string[] LateEarlyAllowedTimeValue = CondoneTrnObj.LateEarly.Split(':');
        //                                    LateEarlyAllowedTimeHour = Convert.ToInt32(LateEarlyAllowedTimeValue[0]);
        //                                    LateEarlyAllowedTimeMinute = Convert.ToInt32(LateEarlyAllowedTimeValue[1]);
        //                                    LateEarlyAllowedTimeSecond = Convert.ToInt32(LateEarlyAllowedTimeValue[2]);

        //                                    LateEarlyAllowedTotalTimeInMinutes = (LateEarlyAllowedTimeHour * 60) + LateEarlyAllowedTimeMinute;
        //                                }

        //                                // List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).ToList();

        //                                DailyTransaction DailyTransactionASCondoneTrn = DailyTransactionObj;

        //                                //foreach (DailyTransaction DailyTransactionASCondoneTrn in DailyTransactionListForCurrentDate)
        //                                {
        //                                    //COMPARE COMPANY ID AND BRACH ID WITH CONDONE ENTRY
        //                                    //if (DailyTransactionASCondoneTrn.CompanyId == CondoneTrnObj.CompanyId && DailyTransactionASCondoneTrn.BranchId == CondoneTrnObj.BranchId)
        //                                    {
        //                                        //check for late entry based on status AAPP, LateCount,PPPP, Late, Early

        //                                        if (CondoneTrnObj.Status.Trim().ToUpper() == "LATE" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Late.ToString()))
        //                                        {
        //                                            string[] DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToString().Split(' ');
        //                                            //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
        //                                            string[] LateComingTimeValue = DailyTransactionASCondoneTrnLateString[1].Split(':');
        //                                            int LateComingTimeValueHour = Convert.ToInt32(LateComingTimeValue[0]);
        //                                            int LateComingTimeValueMinute = Convert.ToInt32(LateComingTimeValue[1]);
        //                                            int LateComingTimeValueSecond = Convert.ToInt32(LateComingTimeValue[2]);

        //                                            int LateComingTotalTimeInMinutes = (LateComingTimeValueHour * 60) + LateComingTimeValueMinute;

        //                                            if (LateComingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
        //                                            {
        //                                                //// Updated by Rajas on 29 APRIL 2017
        //                                                //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsCondone = true;

        //                                                // UPDATE STATUS 
        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                // Updated by Rajas on 8 AUGUST 2017 END

        //                                                // Added by Rajas on 1 SEP 2017 START
        //                                                //if (LateComingTotalTimeInMinutes >= 240)
        //                                                //{
        //                                                UpdatedStatus = StatusConstants.Present + UpdatedStatus.Substring(2, 2) + UpdatedStatus.Substring(4, 1);
        //                                                //}
        //                                                // Added by Rajas on 1 SEP 2017 END

        //                                                // Added by Rajas on 28 AUGUST 2017 START
        //                                                DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Added by Rajas on 28 AUGUST 2017 END
        //                                            }


        //                                            #region CODE TO DEDUCT ALREADY MARKED LATE COUNT

        //                                            // Added by Rajas on 28 AUGUST 2017 START

        //                                            NewStatus = string.Empty;
        //                                            UpdatedStatus = string.Empty;
        //                                            ReturnMessage = string.Empty;

        //                                            int EmployeeGroupId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();
        //                                            RuleForLateCount = AllRuleTransactionList.Where(a => a.RuleId == 16 && a.EmployeeGroupId == EmployeeGroupId).FirstOrDefault();

        //                                            if (RuleForLateCount != null)
        //                                            {
        //                                                if (DailyTransactionObj.LateCount >= 1)
        //                                                {

        //                                                    DailyTransactionObj.LateCount = DailyTransactionObj.LateCount - 1;
        //                                                    WetosDB.SaveChanges();


        //                                                    PostingFlagModelObj.IsLateCountReduced = true;

        //                                                    if (DailyTransactionObj.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
        //                                                    {
        //                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                        DailyTransactionObj.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
        //                                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                                        WetosDB.SaveChanges();
        //                                                    }

        //                                                    else if (DailyTransactionObj.LateCount > Convert.ToInt32(RuleForLateCount.Formula))
        //                                                    {
        //                                                        //abcd.Status = "AAPP^";
        //                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                        DailyTransactionObj.Remark = "Late";
        //                                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                                        WetosDB.SaveChanges();
        //                                                    }
        //                                                }
        //                                                // > 2 ABSENT
        //                                                // ==2 PRESENT 

        //                                                // Initialise flags
        //                                                PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
        //                                            }

        //                                            // Added by Rajas on 28 AUGUST 2017 START

        //                                            #endregion
        //                                        }
        //                                        else if (CondoneTrnObj.Status.Trim().ToUpper() == "EARLY" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Early.ToString()))
        //                                        {
        //                                            string[] DailyTransactionASCondoneTrnEarlyString = DailyTransactionASCondoneTrn.Early.Value.ToString().Split(' ');
        //                                            //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
        //                                            string[] EarlyGoingTimeValue = DailyTransactionASCondoneTrnEarlyString[1].Split(':');

        //                                            int EarlyGoingTimeValueHour = Convert.ToInt32(EarlyGoingTimeValue[0]);
        //                                            int EarlyGoingTimeValueMinute = Convert.ToInt32(EarlyGoingTimeValue[1]);
        //                                            int EarlyGoingTimeValueSecond = Convert.ToInt32(EarlyGoingTimeValue[2]);

        //                                            int EarlyGoingTotalTimeInMinutes = (EarlyGoingTimeValueHour * 60) + EarlyGoingTimeValueMinute;

        //                                            if (EarlyGoingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
        //                                            {
        //                                                //// Updated by Rajas on 29 APRIL 2017
        //                                                //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

        //                                                // Updated by Rajas on 8 AUGUST 2017 START
        //                                                PostingFlagModelObj.IsCondone = true;

        //                                                // UPDATE STATUS 
        //                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                // Updated by Rajas on 8 AUGUST 2017 END

        //                                                // Added by Rajas on 1 SEP 2017 START
        //                                                //if (EarlyGoingTotalTimeInMinutes >= 240)
        //                                                //{
        //                                                UpdatedStatus = UpdatedStatus.Substring(0, 2) + StatusConstants.Present + UpdatedStatus.Substring(4, 1);
        //                                                //}
        //                                                // Added by Rajas on 1 SEP 2017 END

        //                                                // Added by Rajas on 28 AUGUST 2017 START
        //                                                DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

        //                                                DailyTransactionObj.Status = UpdatedStatus;
        //                                                // Added by Rajas on 28 AUGUST 2017 END
        //                                            }

        //                                            #region CODE TO DEDUCT ALREADY MARKED EARLY COUNT

        //                                            // Added by Rajas on 28 AUGUST 2017 START

        //                                            NewStatus = string.Empty;
        //                                            UpdatedStatus = string.Empty;
        //                                            ReturnMessage = string.Empty;

        //                                            int EmployeeGroupId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();
        //                                            RuleForLateCount = AllRuleTransactionList.Where(a => a.RuleId == 16 && a.EmployeeGroupId == EmployeeGroupId).FirstOrDefault();

        //                                            if (RuleForLateCount != null)
        //                                            {
        //                                                if (DailyTransactionObj.EarlyCount >= 1)
        //                                                {
        //                                                    DailyTransactionObj.EarlyCount = DailyTransactionObj.EarlyCount - 1;
        //                                                    WetosDB.SaveChanges();

        //                                                    PostingFlagModelObj.IsLateCountReduced = true;

        //                                                    if (DailyTransactionObj.EarlyCount <= Convert.ToInt32(RuleForLateCount.Formula))
        //                                                    {
        //                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                        DailyTransactionObj.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
        //                                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                                        WetosDB.SaveChanges();
        //                                                    }

        //                                                    else if (DailyTransactionObj.EarlyCount > Convert.ToInt32(RuleForLateCount.Formula))
        //                                                    {
        //                                                        //abcd.Status = "AAPP^";
        //                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                                        DailyTransactionObj.Remark = "Late";
        //                                                        DailyTransactionObj.Status = UpdatedStatus;
        //                                                        WetosDB.SaveChanges();
        //                                                    }
        //                                                }
        //                                                // > 2 ABSENT
        //                                                // ==2 PRESENT 

        //                                                // Initialise flags
        //                                                PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
        //                                            }

        //                                            // Added by Rajas on 28 AUGUST 2017 END

        //                                            #endregion
        //                                        }
        //                                        WetosDB.SaveChanges();
        //                                    }
        //                                }

        //                            }
        //                        }


        //                        #endregion

        //                        #region MARK HOLIDAY

        //                        // Split first half, second half and 5th character
        //                        // Check Holiday present rules???
        //                        // On Holiday shift is marked

        //                        ReturnMessage = string.Empty;
        //                        UpdatedStatus = string.Empty;
        //                        NewStatus = string.Empty;
        //                        bool IsWO = false;
        //                        PostingFlagModelObj = new PostingFlagModel();

        //                        if (HolidayList.Count > 0)
        //                        {
        //                            // ADDED BY MSJ ON 08 AUG 2017 START
        //                            if (HolidayList.Where(a => a.CompanyId == EmployeeCompanyId && a.Branchid == EmployeeBranchId).FirstOrDefault() != null)
        //                            {
        //                                PostingFlagModelObj.IsHoliDay = true;  // Added by Rajas on 5 SEP 2017

        //                                // Updated by Rajas on 5 SEP 2017 START
        //                                // Half day holiday
        //                                if (HolidayList.Where(a => a.DayStatus == 2).FirstOrDefault() != null)
        //                                {
        //                                    DailyTransactionObj.Status = StatusConstants.HolidayShift + DailyTransactionObj.Status.Substring(2, 3);
        //                                    WetosDB.SaveChanges();
        //                                }
        //                                else if (HolidayList.Where(a => a.DayStatus == 3).FirstOrDefault() != null)
        //                                {
        //                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.HolidayShift;
        //                                    WetosDB.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    // Comman function call for status check and update
        //                                    // Added by Rajas on 19 AUGUST 2017
        //                                    CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                    /// Mark Holiday shift in DailyTransaction
        //                                    /// Added by Rajas on 4 JULY 2017
        //                                    DailyTransactionObj.ShiftId = StatusConstants.HolidayShift;

        //                                    WetosDB.SaveChanges(); //?????
        //                                }
        //                                // Updated by Rajas on 5 SEP 2017 END
        //                            }
        //                            // ADDED BY MSJ ON 08 AUG 2017 END
        //                        }

        //                        #endregion

        //                        #region MARK DECLARED HOLIDAY

        //                        ReturnMessage = string.Empty;
        //                        UpdatedStatus = string.Empty;
        //                        NewStatus = string.Empty;
        //                        PostingFlagModelObj = new PostingFlagModel();

        //                        if (DeclaredHolidayList.Count > 0)
        //                        {
        //                            // Added by Rajas on 8 AUGUST 2017 START
        //                            // Declared holiday table does not have CompanyId reference in table
        //                            if (DeclaredHolidayList.Where(a => a.Branch.BranchId == EmployeeBranchId).FirstOrDefault() != null)
        //                            {
        //                                PostingFlagModelObj.IsHoliDay = true;  // Added by Rajas on 26 SEP 2017

        //                                // Comman function call for status check and update
        //                                // Added by Rajas on 19 AUGUST 2017
        //                                CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                // Updated by Rajas on 3 OCT 2017 START
        //                                if (DailyTransactionObj.Status.Contains(DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent))
        //                                {
        //                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.HolidayShift;
        //                                }
        //                                else if (DailyTransactionObj.Status.Contains(StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2)))
        //                                {
        //                                    DailyTransactionObj.Status = StatusConstants.HolidayShift + DailyTransactionObj.Status.Substring(2, 2);
        //                                }
        //                                // Updated by Rajas on 3 OCT 2017 END

        //                                /// Mark Holiday shift in DailyTransaction
        //                                /// Added by Rajas on 4 JULY 2017
        //                                DailyTransactionObj.ShiftId = StatusConstants.HolidayShift;

        //                                WetosDB.SaveChanges(); //?????
        //                            }
        //                            // Added by Rajas on 8 AUGUST 2017 END
        //                        }
        //                        #endregion

        //                        #region MARK WeeklyOff1 AND WEEKOFF2 DAY FROM DATABASE (FIRST, SECOND, THIRD, FOURTH, FIFTH) AND MARK AS WEEKOFF

        //                        // ADDED  BY MSJ ON 31 JAN 2018 
        //                        if (EmployeeObj != null)  // ADDED  BY MSJ ON 31 JAN 2018 
        //                        {
        //                            string currentDayStr = CurrentDate.DayOfWeek.ToString();
        //                            //CODE UNCOMMENTED BY SHRADDHA ON 07 MARCH 2017 START

        //                            bool IsWeeklyOff = false;  // Added by Rajas on 4 KULY 2017


        //                            ReturnMessage = string.Empty;
        //                            UpdatedStatus = string.Empty;
        //                            NewStatus = string.Empty;
        //                            PostingFlagModelObj = new PostingFlagModel();
        //                            IsWO = true;
        //                            PostingFlagModelObj.IsWeekOff = true;

        //                            if (EmployeeObj.WeeklyOff1.ToUpper() == currentDayStr.ToUpper())
        //                            {
        //                                // Comman function call for status check and update
        //                                // Added by Rajas on 19 AUGUST 2017
        //                                CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionObj.ShiftId = StatusConstants.WeekOffShift;  // Updated by Rajas on 19 AUGUST 2017

        //                                WetosDB.SaveChanges();
        //                            }
        //                            else if (!string.IsNullOrEmpty(EmployeeObj.WeeklyOff2)) // #region MARK WeeklyOff2 AS WEEKOFF
        //                            {
        //                                #region WEEKLY OFF 2

        //                                if (EmployeeObj.WeeklyOff2.ToUpper() == currentDayStr.ToUpper())
        //                                {
        //                                    string ReturnStatusMsg = string.Empty;

        //                                    int WeekNumber = GetWeekOfMonth(CurrentDate);

        //                                    if (EmployeeObj.First == true && WeekNumber == 1)
        //                                    {
        //                                        #region WO1

        //                                        // Comman function call for status check and update
        //                                        // Added by Rajas on 19 AUGUST 2017
        //                                        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                        IsWeeklyOff = true;

        //                                        #endregion
        //                                    }
        //                                    else if (EmployeeObj.Second == true && WeekNumber == 2)
        //                                    {
        //                                        #region WO2

        //                                        // Comman function call for status check and update
        //                                        // Added by Rajas on 19 AUGUST 2017
        //                                        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                        IsWeeklyOff = true;

        //                                        #endregion
        //                                    }
        //                                    else if (EmployeeObj.Third == true && WeekNumber == 3)
        //                                    {
        //                                        #region WO3

        //                                        // Comman function call for status check and update
        //                                        // Added by Rajas on 19 AUGUST 2017
        //                                        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                        IsWeeklyOff = true;

        //                                        #endregion
        //                                    }
        //                                    else if (EmployeeObj.Fourth == true && WeekNumber == 4)
        //                                    {
        //                                        #region WO4

        //                                        // Comman function call for status check and update
        //                                        // Added by Rajas on 19 AUGUST 2017
        //                                        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                        IsWeeklyOff = true;

        //                                        #endregion
        //                                    }
        //                                    else if (EmployeeObj.Fifth == true && WeekNumber == 5)
        //                                    {
        //                                        #region WO5

        //                                        // Comman function call for status check and update
        //                                        // Added by Rajas on 19 AUGUST 2017
        //                                        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                        IsWeeklyOff = true;

        //                                        #endregion
        //                                    }

        //                                    /// Mark WO shift in DailyTransaction
        //                                    /// Added by Rajas on 4 JULY 2017
        //                                    if (IsWeeklyOff == true)
        //                                    {
        //                                        DailyTransactionObj.ShiftId = StatusConstants.WeekOffShift;
        //                                    }

        //                                    WetosDB.SaveChanges();
        //                                }

        //                                #endregion
        //                            }

        //                            WetosDB.SaveChanges();
        //                        }  // ADDED  BY MSJ ON 31 JAN 2018 


        //                        #endregion

        //                        #region CODE FOR COMP OFF ADD INTO COMP OFF TABLE FOR EXTRA HOURS BASED ON RULE

        //                        RuleTransaction RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == 9).FirstOrDefault(); // 9 - COMP ALLOWED ?
        //                        RuleTransaction RTObjForCompOffFullDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault(); // IF COMPOFF ALLOWED FULL DAY LIMIT

        //                        RuleTransaction RTObjForCompOffHalfDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 11).FirstOrDefault(); // IF COMPOFF ALLOWED HALF DAY LIMIT


        //                        RuleTransaction RTObjForIsAutoCompOffavailable = RuleTransactionList.Where(a => a.RuleId == 32).FirstOrDefault(); // Is Auto Comp Off available?

        //                        int FullDayRuleHourInt = 0;
        //                        int HalfDayRuleHourInt = 0;

        //                        if (RuleTransactionObj != null && RTObjForIsAutoCompOffavailable != null) // RULE 9 & 32 PRESENT //RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
        //                        {
        //                            if (RuleTransactionObj.Formula.ToUpper().Trim() == "TRUE" && RTObjForIsAutoCompOffavailable.Formula.ToUpper().Trim() == "TRUE")//RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
        //                            {
        //                                string ReturnStatusMsg = string.Empty;

        //                                // MIN TIME FOR FULL DAY COMP OFF
        //                                if (RTObjForCompOffFullDayLimitValue != null)
        //                                {
        //                                    // 08:00:00
        //                                    string[] FullDayRuleSplitValue = RTObjForCompOffFullDayLimitValue.Formula.Split(':');
        //                                    FullDayRuleHourInt = Convert.ToInt32(FullDayRuleSplitValue[0]); // Minutes missing

        //                                }

        //                                // MIN TIME FOR HALF DAY COMP OFF
        //                                if (RTObjForCompOffHalfDayLimitValue != null)
        //                                {
        //                                    string[] HalfDayRuleSplitValue = RTObjForCompOffHalfDayLimitValue.Formula.Split(':');
        //                                    HalfDayRuleHourInt = Convert.ToInt32(HalfDayRuleSplitValue[0]); // Minutes missing
        //                                }

        //                                if (FullDayRuleHourInt > 0 && HalfDayRuleHourInt > 0)
        //                                {
        //                                    // STATIC FUNCTION
        //                                    MarkCompOffForExtraHrsEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
        //                                }
        //                            }
        //                            //else
        //                            //{
        //                            //    Error("Comp Off is not Allowed for Employee Group : " + EmployeeGroupName);

        //                            //}

        //                        }
        //                        #endregion

        //                        WetosDB.SaveChanges(); //?????

        //                    }  // END OF LOCK CONDITION // ADDED BY MSJ ON 17 AUG 2017
        //                }
        //                catch
        //                {

        //                    // Added by Rajas on 18 AUGUST 2017
        //                    // Process will continue ? How to track actual save and update audit trail entry?
        //                    ErrorInEmployee.Add(DailyTransactionObj.EmployeeId.ToString());
        //                }

        //            }

        //            #endregion

        //            #region CODE TO MARK FOR LEAVE APPLICATION STATUS IF ANY SANCTIONED LEAVE IS AVAILABLE

        //            //ADDED BY SHRADDHA ON 04 JAN 2017 FOR LEAVE APPLICATION STAUS
        //            // Updated by Rajas on 10 AUGUST 2017 for Delete and StatusId
        //            List<LeaveApplication> LeaveApplicationObj = WetosDB.LeaveApplications.Where(a => a.FromDate == CurrentDate
        //                && a.StatusId == 2 && a.MarkedAsDelete == 0).ToList();

        //            if (LeaveApplicationObj.Count > 0)
        //            {
        //                ReturnMessage = string.Empty;
        //                UpdatedStatus = string.Empty;
        //                NewStatus = string.Empty;
        //                PostingFlagModelObj = new PostingFlagModel();

        //                // Added by Rajas on 7 AUGUST 2017
        //                PostingFlagModelObj.IsOnLeave = true;

        //                foreach (LeaveApplication LeaveApplicationCurrentDayObj in LeaveApplicationObj)
        //                {
        //                    for (DateTime CurrentLeaveDate = LeaveApplicationCurrentDayObj.FromDate; CurrentLeaveDate.Date <= LeaveApplicationCurrentDayObj.ToDate;
        //                        CurrentLeaveDate = CurrentLeaveDate.AddDays(1))
        //                    {
        //                        //ADDED BY 
        //                        List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentLeaveDate
        //                            && a.EmployeeId == LeaveApplicationCurrentDayObj.EmployeeId
        //                            && (string.IsNullOrEmpty(a.Lock) ? false : a.Lock.ToUpper() == "N" ? false : true) == false).ToList();

        //                        foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
        //                        {

        //                            DailyTransactionAsLeave.ActualStatus = DailyTransactionAsLeave.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
        //                            WetosDB.SaveChanges();
        //                            //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS START

        //                            // Updated by Rajas on 18 AUGUST 2017 START
        //                            if (DailyTransactionAsLeave.Status.Contains(StatusConstants.Present))  // Need to split status 
        //                            {
        //                                // Pending need to Verify (TEST , generate case and update code)
        //                                #region SENT BACK LEAVE AS "RETURNED" TO EMPLOYEE, IF EMPLOYEE PRESENT ON ALREADY SANCTIONED DAY



        //                                if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate)
        //                                {
        //                                    NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

        //                                    switch (LeaveApplicationCurrentDayObj.FromDayStatus)
        //                                    {
        //                                        case 1:
        //                                            if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
        //                                            {
        //                                                // No change in status
        //                                            }
        //                                            break;

        //                                        case 2:
        //                                            if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
        //                                            {
        //                                                DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
        //                                            }

        //                                            break;

        //                                        case 3:

        //                                            if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
        //                                            {
        //                                                DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
        //                                            }
        //                                            break;

        //                                        default:

        //                                            break;
        //                                    }

        //                                    WetosDB.SaveChanges();
        //                                }
        //                                else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate)
        //                                {
        //                                    switch (LeaveApplicationCurrentDayObj.ToDayStatus)
        //                                    {
        //                                        case 1:
        //                                            if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
        //                                            {
        //                                                // No change in status
        //                                            }
        //                                            break;

        //                                        case 2:
        //                                            if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
        //                                            {
        //                                                DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
        //                                            }
        //                                            break;

        //                                        case 3:
        //                                            if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
        //                                            {
        //                                                DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
        //                                            }
        //                                            break;

        //                                        default:

        //                                            break;
        //                                    }

        //                                    WetosDB.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
        //                                    {
        //                                        DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
        //                                    }
        //                                    else if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
        //                                    {
        //                                        DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
        //                                    }
        //                                    else
        //                                    {
        //                                        // No change in status
        //                                    }

        //                                    WetosDB.SaveChanges();
        //                                }
        //                                #endregion

        //                            } // Updated by Rajas on 18 AUGUST 2017 END
        //                            else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate
        //                                && LeaveApplicationCurrentDayObj.StatusId == 2) // From Day sanction
        //                            {
        //                                if (LeaveApplicationCurrentDayObj.FromDayStatus == 2)  // First half
        //                                {
        //                                    PostingFlagModelObj.IsFirstHalfLeave = true;
        //                                }
        //                                else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3) // Second half
        //                                {
        //                                    PostingFlagModelObj.IsSecondHalfLeave = true;
        //                                }
        //                                else
        //                                {
        //                                    PostingFlagModelObj.IsFullDayLeave = true;
        //                                }

        //                                NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionAsLeave.Status = UpdatedStatus;
        //                            }
        //                            else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate
        //                                && LeaveApplicationCurrentDayObj.StatusId == 2)  // To Day sanction
        //                            {
        //                                if (LeaveApplicationCurrentDayObj.FromDayStatus == 2) // First half
        //                                {
        //                                    PostingFlagModelObj.IsFirstHalfLeave = true;
        //                                }
        //                                else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3) // Second half
        //                                {
        //                                    PostingFlagModelObj.IsSecondHalfLeave = true;
        //                                }
        //                                else
        //                                {
        //                                    PostingFlagModelObj.IsFullDayLeave = true;
        //                                }

        //                                NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionAsLeave.Status = UpdatedStatus;
        //                            }
        //                            else if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayAbsentStatus
        //                                && LeaveApplicationCurrentDayObj.StatusId == 2)  // Added by Rajas on 18 AUGUST 2017
        //                            {
        //                                NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

        //                                PostingFlagModelObj.IsFullDayLeave = true;

        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionAsLeave.Status = UpdatedStatus;
        //                            }
        //                            //else if (DailyTransactionAsLeave.Status.Trim() == "AAAA" && LeaveApplicationCurrentDayObj.StatusId != 2)
        //                            //{
        //                            //    DailyTransactionAsLeave.Status = "AAAA";
        //                            //}
        //                            //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS END
        //                        }

        //                    }

        //                    WetosDB.SaveChanges();
        //                }
        //            }
        //            #endregion

        //            #region CODE TO MARK OD

        //            //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL START
        //            // Update by Rajas on 10 AUGUST 2017 for Delete and StatusId
        //            List<ODTour> ODTourList = WetosDB.ODTours.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
        //                && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

        //            if (ODTourList.Count > 0)
        //            {
        //                PostingFlagModelObj = new PostingFlagModel();

        //                foreach (ODTour ODTourCurrentDayObj in ODTourList)
        //                {
        //                    // Code updated by Rajas on 9 JULY 2017 for Status START
        //                    for (DateTime CurrentODDate = Convert.ToDateTime(ODTourCurrentDayObj.FromDate); CurrentODDate.Date <= ODTourCurrentDayObj.ToDate; CurrentODDate = CurrentODDate.AddDays(1))
        //                    {
        //                        // Status as per selection of ODTourType
        //                        // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
        //                        // Updated by Rajas on 5 AUGUST 2017
        //                        UpdatedStatus = string.Empty;
        //                        NewStatus = string.Empty;
        //                        PostingFlagModelObj.IsOdTour = true;   // Added by Rajas on 7 AUGUST 2017

        //                        if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "TOUR")
        //                        {
        //                            NewStatus = "TO";
        //                        }
        //                        else if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "OD")
        //                        {
        //                            NewStatus = "OD";
        //                        }
        //                        else
        //                        {
        //                            NewStatus = "PP";
        //                        }

        //                        List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentODDate && a.EmployeeId == ODTourCurrentDayObj.EmployeeId).ToList();
        //                        foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
        //                        {
        //                            DailyTransactionAsLeave.ActualStatus = DailyTransactionAsLeave.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
        //                            WetosDB.SaveChanges();



        //                            //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE START
        //                            CalculateODWorkingHours(WetosDB, DailyTransactionAsLeave, ODTourCurrentDayObj, PostingFlagModelObj, CurrentODDate,
        //                                UpdatedStatus, NewStatus, ref ReturnMessage);
        //                            //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE END

        //                            // Added by Rajas on 29 AUGUST 2017 START
        //                            int EmployeeGroupIdObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == DailyTransactionAsLeave.EmployeeId).Select(a => a.EmployeeGroup.EmployeeGroupId).FirstOrDefault();
        //                            List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.CompanyId == DailyTransactionAsLeave.CompanyId
        //                                && a.BranchId == DailyTransactionAsLeave.BranchId && a.EmployeeGroupId == EmployeeGroupIdObj).ToList();
        //                            RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

        //                            //Code Added By Shraddha on 06 JUNE 2017 To Get LateCount from Rules end

        //                            #region CODE TO DEDUCT ALREADY MARKED LATE COUNT

        //                            NewStatus = string.Empty;
        //                            UpdatedStatus = string.Empty;
        //                            ReturnMessage = string.Empty;

        //                            if (RuleForLateCount != null)
        //                            {
        //                                if (DailyTransactionAsLeave.LateCount >= 1)
        //                                {
        //                                    DailyTransactionAsLeave.LateCount = DailyTransactionAsLeave.LateCount - 1;
        //                                    WetosDB.SaveChanges();

        //                                    PostingFlagModelObj.IsLateCountReduced = true;

        //                                    if (DailyTransactionAsLeave.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
        //                                    {
        //                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionAsLeave.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
        //                                        DailyTransactionAsLeave.Status = UpdatedStatus;
        //                                        WetosDB.SaveChanges();
        //                                    }

        //                                    else if (DailyTransactionAsLeave.LateCount > Convert.ToInt32(RuleForLateCount.Formula))
        //                                    {
        //                                        WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionAsLeave.Remark = "Late";
        //                                        WetosDB.SaveChanges();
        //                                    }
        //                                }
        //                                // > 2 ABSENT
        //                                // ==2 PRESENT 

        //                                // Initialise flags
        //                                PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
        //                                // }
        //                            }
        //                            // Updated by Rajas on 5 AUGUST 2017 END

        //                            #endregion

        //                            #region CODE TO DEDUCT ALREADY MARKED EARLY COUNT

        //                            NewStatus = string.Empty;
        //                            UpdatedStatus = string.Empty;
        //                            ReturnMessage = string.Empty;

        //                            // Updated by Rajas on 5 AUGUST 2017 START
        //                            //foreach (DailyTransaction DailyTransObj in AllEmpEarlyData)
        //                            //{
        //                            if (RuleForLateCount != null)
        //                            {
        //                                if (DailyTransactionAsLeave.EarlyCount >= 1)
        //                                {
        //                                    DailyTransactionAsLeave.EarlyCount = DailyTransactionAsLeave.EarlyCount - 1;
        //                                    WetosDB.SaveChanges();

        //                                    PostingFlagModelObj.IsLateCountReduced = true;

        //                                    if (DailyTransactionAsLeave.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
        //                                    {
        //                                        WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionAsLeave.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
        //                                        DailyTransactionAsLeave.Status = UpdatedStatus;
        //                                        WetosDB.SaveChanges();
        //                                    }

        //                                    else if (DailyTransactionAsLeave.EarlyCount > Convert.ToInt32(RuleForLateCount.Formula))
        //                                    {
        //                                        //abcd.Status = "AAPP^";
        //                                        WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
        //                                        DailyTransactionAsLeave.Remark = "Early";
        //                                        WetosDB.SaveChanges();
        //                                    }
        //                                }
        //                                // > 2 ABSENT
        //                                // ==2 PRESENT 

        //                                // Initialise flags
        //                                PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
        //                            }
        //                            //}
        //                            // Updated by Rajas on 5 AUGUST 2017 END

        //                            #endregion

        //                            // Added by Rajas on 29 AUGUST 2017 END
        //                        }

        //                    }

        //                    WetosDB.SaveChanges();
        //                }
        //            }


        //            //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL END
        //            #endregion

        //            #region CODE TO MARK COMPOFF

        //            // Added by Rajas on 12 AUGUST 2017 START

        //            List<CompOffApplication> COObj = WetosDB.CompOffApplications.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
        //                && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

        //            if (COObj.Count > 0)
        //            {
        //                PostingFlagModelObj = new PostingFlagModel();

        //                PostingFlagModelObj.IsCO = true;   // Added by Rajas on 7 AUGUST 2017

        //                foreach (CompOffApplication COCurrentDayObj in COObj)
        //                {
        //                    // Status as per selection of ODTourType
        //                    // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
        //                    // Updated by Rajas on 5 AUGUST 2017
        //                    UpdatedStatus = string.Empty;
        //                    NewStatus = StatusConstants.CO;

        //                    // Code updated by Rajas on 9 JULY 2017 for Status START
        //                    for (DateTime CurrentCODate = Convert.ToDateTime(COCurrentDayObj.FromDate); CurrentCODate.Date <= COCurrentDayObj.ToDate; CurrentCODate = CurrentCODate.AddDays(1))
        //                    {
        //                        List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentCODate && a.EmployeeId == COCurrentDayObj.EmployeeId).ToList();
        //                        foreach (DailyTransaction DailyTransactionAsCO in DailyTransactionListForCurrentDate)
        //                        {
        //                            DailyTransactionAsCO.ActualStatus = DailyTransactionAsCO.Status; // CODE ADDED BY SHRADDHA ON 21 SEP 2017 TO SAVE STATUS AS ACTUAL STATUS
        //                            WetosDB.SaveChanges();
        //                            if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayPresentStatus)  // need to verify
        //                            {
        //                                DailyTransactionAsCO.Status = StatusConstants.FullDayPresentStatus;
        //                            }
        //                            else if (CurrentCODate == COCurrentDayObj.FromDate && COCurrentDayObj.StatusId == 2)
        //                            {
        //                                if (COCurrentDayObj.FromDateStatus == 2)
        //                                {
        //                                    PostingFlagModelObj.IsFirstHalfCOff = true;
        //                                }
        //                                else if (COCurrentDayObj.FromDateStatus == 3)
        //                                {
        //                                    PostingFlagModelObj.IsSecondHalfCOff = true;
        //                                }
        //                                else
        //                                {
        //                                    PostingFlagModelObj.IsFullDayCOff = true;
        //                                }

        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionAsCO.Status = UpdatedStatus;
        //                            }
        //                            else if (CurrentCODate == COCurrentDayObj.ToDate && COCurrentDayObj.StatusId == 2)
        //                            {
        //                                if (COCurrentDayObj.FromDateStatus == 2) // WHY NOT INT
        //                                {
        //                                    PostingFlagModelObj.IsFirstHalfCOff = true;
        //                                }
        //                                else if (COCurrentDayObj.ToDateStatus == 3)
        //                                {
        //                                    PostingFlagModelObj.IsSecondHalfCOff = true;
        //                                }
        //                                else
        //                                {
        //                                    PostingFlagModelObj.IsFullDayCOff = true;
        //                                }

        //                                //
        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionAsCO.Status = UpdatedStatus;
        //                            }
        //                            else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus
        //                            && COCurrentDayObj.StatusId == 2)  // Added by Rajas on 21 SEP 2017 START
        //                            {
        //                                PostingFlagModelObj.IsFullDayCOff = true;

        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionAsCO.Status = UpdatedStatus;
        //                            }
        //                            else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus && COCurrentDayObj.StatusId != 2) // Pending need to Verify (TEST , generate case and update code)
        //                            {
        //                                DailyTransactionAsCO.Status = StatusConstants.FullDayAbsentStatus;
        //                            }
        //                            else
        //                            {
        //                                PostingFlagModelObj.IsFullDayCOff = true;

        //                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

        //                                DailyTransactionAsCO.Status = UpdatedStatus;
        //                            }
        //                            // Added by Rajas on 21 SEP 2017 END

        //                            WetosDB.SaveChanges();
        //                        }

        //                    }

        //                    WetosDB.SaveChanges();
        //                }
        //            }

        //            // Added by Rajas on 12 AUGUST 2017 END
        //            #endregion
        //        }
        //        #endregion

        //        // Added by Rajas on 18 AUGUST 2017 START
        //        // Generate error string to indicate error occured for processing data for employeeid
        //        if (ErrorInEmployee.Count > 0)
        //        {
        //            ErrorMessage = "Error in data processing for EmployeeId : " + string.Join(", ", ErrorInEmployee);
        //        }
        //        // Added by Rajas on 18 AUGUST 2017 END

        //        ReturnStatus = true;
        //    }
        //    catch (System.Exception ex)
        //    {
        //        ErrorMessage = "Error in POSTING due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
        //    }

        //    // END //

        //    return ReturnStatus;
        //}


        /// <summary>
        /// Data constants
        /// Added by Rajas on 7 AUGUST 2017
        /// </summary>
        public static class StatusConstants
        {
            #region PostingStatus
            public static readonly string NoSwape = "N";
            public static readonly string FullDayPresentStatus = "PPPP";
            public static readonly string CondoneFullDayPresentStatus = "PPPP#";
            public static readonly string FullDayAbsentStatus = "AAAA";
            public static readonly string FirstHalfAbsentStatus = "AAPP";
            public static readonly string SecondHalfAbsentStatus = "PPAA";
            public static readonly string WeeklyOffStatus = "WOWO";
            public static readonly string PresentOnWeeklyOffStatus = "WPWP";
            public static readonly string HoliDayStatus = "HHHH";
            public static readonly string PresentOnHoliDayStatus = "HPHP";
            public static readonly string ODStatus = "ODOD";
            public static readonly string TourStatus = "TOTO";
            public static readonly string CompOffStatus = "COCO";
            public static readonly string SingleSwape = "S";
            public static readonly string DoubleSwape = "D";
            public static readonly string FullDayStatus = "Full Day";
            public static readonly string HalfDayStatus = "Half Day";

            public static readonly string FirstHalfDayStatus = "FIRST HALF";
            public static readonly string SecondHalfDayStatus = "SECOND HALF";

            public static readonly string Tour = "TOUR";
            public static readonly string OD = "OD";
            public static readonly string Present = "PP";
            public static readonly string PresentOnHoliday = "HP";  // Added by Rajas on 5 SEP 2017
            public static readonly string PresentOnWeekOff = "WP";  // Added by Rajas on 19 AUGUST 2017
            public static readonly string Absent = "AA";
            public static readonly string CO = "CO"; //ADDED BY SHRADDHA ON 11 AUG 2017
            public static readonly string DeclaredHoliDayStatus = "UHUH";// CODE ADDED BY SHRADDHA ON 14 MAR 2018
            #endregion end Posting Status

            #region Shift Codes and Names
            public static readonly string HalfDayShift = "H";
            public static readonly string WeekOffShift = "WO";
            public static readonly string HolidayShift = "HH";
            public static readonly string DeclaredHolidayShift = "UH"; // CODE ADDED BY SHRADDHA ON 14 MAR 2018
            #endregion
        }

        /// <summary>
        /// Common Function to mark status 
        /// Added by Rajas on 19 AUGUST 2017
        /// </summary>
        /// <param name="PostingFlagModelObj"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="NewStatus"></param>
        /// <param name="UpdatedStatus"></param>
        /// <param name="ReturnMessage"></param>
        /// <returns></returns>
        public static bool CommonFuncToMarkStatusChanges(WetosDBEntities WetosDB, PostingFlagModel PostingFlagModelObj, DailyTransaction DailyTransactionObj, bool IsWO
            , string NewStatus, ref string UpdatedStatus, ref string ReturnMessage)
        {
            bool ReturnState = false;

            try
            {
                // Updated by Rajas on 19 AUGUST 2017 START
                if (DailyTransactionObj.Status.Substring(0, 4) == StatusConstants.FullDayAbsentStatus)  // AAAA
                {
                    if (IsWO == true)
                    {
                        PostingFlagModelObj.IsWeekOff = true;
                    }
                    else
                    {
                        PostingFlagModelObj.IsHoliDay = true;
                    }

                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                    DailyTransactionObj.Status = UpdatedStatus;
                }
                else if (DailyTransactionObj.Status.Substring(0, 4) == StatusConstants.FullDayPresentStatus)  // PPPP
                {
                    if (IsWO == true)
                    {
                        PostingFlagModelObj.IsFullDayPresentOnWO = true;
                    }
                    else
                    {
                        PostingFlagModelObj.IsFullDayPresentOnHoliday = true;
                    }

                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                    DailyTransactionObj.Status = UpdatedStatus;
                }
                else if (DailyTransactionObj.Status.Substring(0, 4) == StatusConstants.FirstHalfAbsentStatus) // AAPP
                {
                    if (IsWO == true)
                    {
                        PostingFlagModelObj.IsSecondHalfPresentOnWO = true;
                    }
                    else
                    {
                        PostingFlagModelObj.IsSecondHalfPresentOnHolidDay = true;
                    }

                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                    DailyTransactionObj.Status = UpdatedStatus;
                }
                else if (DailyTransactionObj.Status.Contains(StatusConstants.SecondHalfAbsentStatus)) // PPAA
                {
                    if (IsWO == true)
                    {
                        PostingFlagModelObj.IsFirstHalfPresentOnWO = true;
                    }
                    else
                    {
                        PostingFlagModelObj.IsFirstHalfPresentOnHolidDay = true;
                    }

                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                    DailyTransactionObj.Status = UpdatedStatus;
                }
                // Updated by Rajas on 19 AUGUST 2017 END

                WetosDB.SaveChanges();

                return ReturnState = true;
            }
            catch
            {
                return ReturnState;
            }
        }

        /// <summary>
        /// Get actual DailyTransactionStatus 
        /// Added by Rajas on 7 JULY 2017
        /// </summary>
        /// <param name="OriginalStatus"></param>
        /// <param name="FirstHalfStatus"></param>
        /// <param name="SecondHalfStatus"></param>
        /// <param name="ReturnMessage"></param>
        /// <returns></returns>
        public static bool GetActualDailyTransactionStatus(PostingFlagModel PostingFlagModelObj, string OriginalStatus,
            string NewStatus, ref string UpdatedStatus, ref string ReturnMessage)
        {
            bool ReturnStatus = false;
            UpdatedStatus = OriginalStatus; //CODE ADDED BY SHRADDHA ON 29 MAR 2018
            try
            {
                string ReturnState = string.Empty;

                if (PostingFlagModelObj.IsHoliDay == true)
                {
                    #region HOLIDAY

                    // Updated by Rajas on 19 AUGUST 2017 START
                    if (PostingFlagModelObj.IsFullDayPresentOnHoliday)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, StatusConstants.PresentOnHoliDayStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsFirstHalfPresentOnHolidDay)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 1, StatusConstants.PresentOnHoliday, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsSecondHalfPresentOnHolidDay)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 2, StatusConstants.PresentOnHoliday, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else
                    {
                        UpdatedStatus = StatusConstants.HoliDayStatus;
                    }
                    // Updated by Rajas on 19 AUGUST 2017 ENDS


                    #endregion
                }
                else if (PostingFlagModelObj.IsWeekOff == true)
                {
                    #region WEEK OFF

                    // Updated by Rajas on 5 SEP 2017 START
                    if (PostingFlagModelObj.IsFullDayPresentOnWO)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, StatusConstants.PresentOnWeeklyOffStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsFirstHalfPresentOnWO)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 1, StatusConstants.PresentOnWeekOff, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsSecondHalfPresentOnWO)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 2, StatusConstants.PresentOnWeekOff, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else
                    {
                        UpdatedStatus = StatusConstants.WeeklyOffStatus;
                    }
                    // Updated by Rajas on 5 SEP 2017 END


                    #endregion
                }

                else if (PostingFlagModelObj.DeclaredHoliDayStatus == true)
                {
                    #region CODE ADDED BY SHRADDHA ON 14 MAR 2018 FOR DECLARED HOLIDAY
                    #region DECLARED HOLIDAY

                    // Updated by Rajas on 5 SEP 2017 START
                    if (PostingFlagModelObj.IsFullDayPresentOnWO)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, StatusConstants.DeclaredHoliDayStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsFirstHalfPresentOnWO)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 1, StatusConstants.DeclaredHoliDayStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsSecondHalfPresentOnWO)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 2, StatusConstants.DeclaredHoliDayStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else
                    {
                        UpdatedStatus = StatusConstants.DeclaredHoliDayStatus;
                    }
                    // Updated by Rajas on 5 SEP 2017 END


                    #endregion
                    #endregion
                }

                else if (PostingFlagModelObj.IsLate == true)
                {
                    #region MARK LATE/EARLY STATUS

                    // Sequence of deduction changed. Late count append moved to last
                    // Updated by Rajas on 28 AUGUST 2017
                    if (PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 1, StatusConstants.Absent, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 2, StatusConstants.Absent, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 3, "^", ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }

                    #endregion
                }
                else if (PostingFlagModelObj.IsOnLeave == true)
                {
                    #region LEAVE

                    if (PostingFlagModelObj.IsFullDayLeave == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, (NewStatus + NewStatus), ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsFirstHalfLeave == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 1, NewStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsSecondHalfLeave == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 2, NewStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, (NewStatus + NewStatus), ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }

                    #endregion
                }
                else if (PostingFlagModelObj.IsCO == true) // Added by Rajas on 11 AUGUST 2017
                {
                    #region COMPOFF
                    if (PostingFlagModelObj.IsFullDayCOff == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, (NewStatus + NewStatus), ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsFirstHalfCOff == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 1, NewStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsSecondHalfCOff == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 2, NewStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, (NewStatus + NewStatus), ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }

                    #endregion
                }
                else if (PostingFlagModelObj.IsOdTour == true)
                {
                    #region OD/TRAVEL
                    if (PostingFlagModelObj.IsFullDayOD == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, (NewStatus + NewStatus), ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsFirstHalfOD == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 1, NewStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else if (PostingFlagModelObj.IsSecondHalfOD == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 2, NewStatus, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }
                    else
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 4, (NewStatus + NewStatus), ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }

                    // Remove ^ sign from status, as late count is deducted.
                    if (PostingFlagModelObj.IsLateCountReduced == true)
                    {
                        if (UpdateDailyTransStatus(OriginalStatus, 3, string.Empty, ref ReturnState) == true)
                        {
                            UpdatedStatus = ReturnState;
                        }
                    }

                    #endregion
                }
                else if (PostingFlagModelObj.IsCondone == true)
                {
                    #region CONDONE

                    if (UpdateDailyTransStatus(OriginalStatus, 3, "#", ref ReturnState) == true)
                    {
                        UpdatedStatus = ReturnState;
                    }

                    #endregion
                }
                else if (PostingFlagModelObj.IsLateCountReduced == true)  // Updated by Rajas on 29 AUGUST 2017
                {
                    #region LATE/EARLY COUNT REDUCED

                    if (UpdateDailyTransStatus(OriginalStatus, 3, string.Empty, ref ReturnState) == true)
                    {
                        UpdatedStatus = ReturnState;
                    }

                    #endregion
                }
                else
                {
                    UpdatedStatus = OriginalStatus; //CODE ADDED BY SHRADDHA ON 29 MAR 2018
                }
                return ReturnStatus = true;
            }
            catch
            {

                return ReturnStatus;
            }
        }

        /// <summary>
        /// Added by Rajas on 4 AUGUST 2017
        /// </summary>
        /// <param name="OriginalStatus"></param>
        /// <param name="Condition"></param>
        /// <param name="Status"></param>
        /// <param name="ReturnState"></param>
        /// <returns></returns>
        public static bool UpdateDailyTransStatus(string OriginalStatus, int Condition, string Status, ref string ReturnState)
        {
            bool ReturnStatus = false;
            try
            {
                string FirstSecond = OriginalStatus.Substring(0, 2);
                string SecondThird = OriginalStatus.Substring(2, 2);
                string Fifth = string.Empty;
                if (OriginalStatus.Length > 4)
                {
                    Fifth = OriginalStatus.Substring(4, 1);
                }

                switch (Condition)
                {
                    case 0: // Replace all characters

                        ReturnState = Status;
                        break;

                    case 1: // Replace (0,1) characters

                        ReturnState = Status + SecondThird + Fifth;
                        break;

                    case 2: // Replace (2,3) characters

                        ReturnState = FirstSecond + Status + Fifth;
                        break;

                    case 3: // Replace (4) character

                        ReturnState = FirstSecond + SecondThird + Status;
                        break;

                    case 4: // Replace (0,1,2,3) characters

                        ReturnState = Status + Fifth;
                        break;
                }

                return ReturnStatus = true;
            }
            catch (System.Exception ex)
            {
                ReturnState = ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnStatus;
            }
        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        /// Updated by Rajas on 29 SEP 2017
        public static bool MarkCompOffForExtraHrsEx(WetosDBEntities WetosDB, DailyTransaction DailyTransactionObj, int FullDayRuleHourInt, int HalfDayRuleHourInt, ref string ReturnStatusMsg)
        {
            bool ReturnStatus = false;
            try
            {
                if (DailyTransactionObj.ExtraHrs != null)
                {
                    string RetMessage = string.Empty;
                    double TotalExtraHoursTimeForWeekDays = (60 * DailyTransactionObj.ExtraHrs.Value.Hour) + DailyTransactionObj.ExtraHrs.Value.Minute;


                    if (DailyTransactionObj.ExtraHrs.Value.Hour >= FullDayRuleHourInt) // FULL DAY
                    {
                        double CompOffBalance = 1;
                        #region CODE CHANGED BY SHRADDHA DUE TO CUMULATIVE COMP OFF CHANGES ON 20 FEB 2018
                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 START
                        //UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffBalance, ref RetMessage);
                        DateTime CompOffHours = Convert.ToDateTime(DailyTransactionObj.ExtraHrs);

                        int TotalExtraMinutesForWeekDays = Convert.ToInt32(TotalExtraHoursTimeForWeekDays % 60);
                        int TotalExtraHoursForWeekDays = Convert.ToInt32((TotalExtraHoursTimeForWeekDays - TotalExtraMinutesForWeekDays) / 60);
                        CompOffHours = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, TotalExtraHoursForWeekDays, TotalExtraMinutesForWeekDays, 0);

                        bool IsWeekOff = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true ? true : false;
                        bool IsHoliday = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true ? true : false;
                        bool IsWeekDay = true;
                        if (DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true || DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true)
                        {
                            IsWeekDay = false;
                        }
                        UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffHours, IsWeekDay, IsWeekOff, IsHoliday, CompOffBalance, ref RetMessage);
                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 END
                        #endregion
                    }
                    else if (DailyTransactionObj.ExtraHrs.Value.Hour >= HalfDayRuleHourInt) // HALF DAY
                    {
                        double CompOffBalance = 1;
                        #region CODE CHANGED BY SHRADDHA DUE TO CUMULATIVE COMP OFF CHANGES ON 20 FEB 2018
                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 START
                        //UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffBalance, ref RetMessage);
                        DateTime CompOffHours = Convert.ToDateTime(DailyTransactionObj.ExtraHrs);

                        int TotalExtraMinutesForWeekDays = Convert.ToInt32(TotalExtraHoursTimeForWeekDays % 60);
                        int TotalExtraHoursForWeekDays = Convert.ToInt32((TotalExtraHoursTimeForWeekDays - TotalExtraMinutesForWeekDays) / 60);
                        CompOffHours = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, TotalExtraHoursForWeekDays, TotalExtraMinutesForWeekDays, 0);

                        bool IsWeekOff = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true ? true : false;
                        bool IsHoliday = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true ? true : false;
                        bool IsWeekDay = true;
                        if (DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true || DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true)
                        {
                            IsWeekDay = false;
                        }
                        UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffHours, IsWeekDay, IsWeekOff, IsHoliday, CompOffBalance, ref RetMessage);
                        //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 END
                        #endregion
                    }
                       

                }
                ReturnStatus = true;
                return ReturnStatus;
            }
            catch (System.Exception E)
            {
                ReturnStatus = false;
                ReturnStatusMsg = E.Message + "_" + (E.InnerException == null ? string.Empty : E.InnerException.Message);
                return ReturnStatus;
            }
        }

        /// <summary>
        /// Comman Function for Update ManualCompOff table
        /// Added by Rajas on 29 SEP 2017
        /// </summary>
        /// <param name="WetosDB"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="RetMessage"></param>
        /// <returns></returns>
        public static bool UpdateManualCompOffTbl(WetosDBEntities WetosDB, DailyTransaction DailyTransactionObj, DateTime CompOffHours, bool IsWeekDay, bool IsWeekOff, bool IsPaidHoliday, double COBalance, ref string RetMessage) // DATETIME COMP OFF HOURS, BOOL (IsWeekDay,IsWeekOff,IsPaidHoliday) ADDED IN INPUT PARAMETERS BY SHRADDHA ON 20 FEB 2018
        {

            bool ReturnFlag = false;
            try
            {
                //ADDED BY PUSHKAR ON 05 OCT 2018 FOR SYSTEM GENERATED ENTRY FOR ONLY WEEKOFF and HOLIDAY
                //if (IsWeekOff == true || IsPaidHoliday == true)
                //{

                    bool IsNew = false;
                    ManualCompOff NewCompOffObj = WetosDB.ManualCompOffs.Where(a => a.FromDate == DailyTransactionObj.TranDate
                        && a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                    if (NewCompOffObj == null)
                    {
                        NewCompOffObj = new ManualCompOff();
                        IsNew = true;
                    }

                    NewCompOffObj.EmployeeId = DailyTransactionObj.EmployeeId;
                    NewCompOffObj.FromDate = DailyTransactionObj.TranDate;
                    NewCompOffObj.ExtraWorkingHrs = DailyTransactionObj.ExtraHrs.Value;
                    NewCompOffObj.CompOffPurpose = "System Generated";
                    NewCompOffObj.StatusId = 1;
                    NewCompOffObj.CompOffBalance = COBalance;
                    NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                    NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                    NewCompOffObj.RejectReason = string.Empty;
                    NewCompOffObj.MarkedAsDelete = 0;
                    NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                    NewCompOffObj.LogoutTime = DailyTransactionObj.LogOut;
                    NewCompOffObj.IsAutoEntry = 1;

                    //CODE ADDED BY SHRADDHA ON 20 FEB 2018 START
                    NewCompOffObj.CompOffHours = CompOffHours;
                    NewCompOffObj.IsWeekDay = IsWeekDay;
                    NewCompOffObj.IsWeekOff = IsWeekOff;
                    NewCompOffObj.IsPaidHoliday = IsPaidHoliday;
                    //CODE ADDED BY SHRADDHA ON 20 FEB 2018 END


                    if (IsNew == true)
                    {
                        WetosDB.ManualCompOffs.AddObject(NewCompOffObj);
                    }

                    WetosDB.SaveChanges();

                    return ReturnFlag = true;
                //}
                //return ReturnFlag;
            }

            catch (System.Exception ex)
            {
                RetMessage = ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnFlag;
            }

        }



        /// <summary>
        /// Comman Function for Update ManualCompOff table
        /// Added by SHRADDHA ON 21 MAR 2018
        /// </summary>
        /// <param name="WetosDB"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="RetMessage"></param>
        /// <returns></returns>
        public static bool UpdateCumulativeManualCompOffTbl(WetosDBEntities WetosDB, DailyTransaction DailyTransactionObj, int CompOffHours, bool IsWeekDay, bool IsWeekOff, bool IsPaidHoliday, double COBalance, ref string RetMessage) // DATETIME COMP OFF HOURS, BOOL (IsWeekDay,IsWeekOff,IsPaidHoliday) ADDED IN INPUT PARAMETERS BY SHRADDHA ON 20 FEB 2018
        {
            bool ReturnFlag = false;
            try
            {
                Employee EmpType = WetosDB.Employees.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                //ADDED BY PUSHKAR ON 21 FEB 2019 FOR SHIFT OUT TIME
                Shift ShiftObj = WetosDB.Shifts.Where(a => a.ShiftCode == EmpType.DefaultShift && a.BranchId == EmpType.BranchId).FirstOrDefault();
                if (EmpType.EmployeeTypeId == 3 || EmpType.EmployeeTypeId == 4)
                {

                    bool IsNew = false;
                    //CumulativeManualCompOff NewCompOffObj = WetosDB.CumulativeManualCompOffs.Where(a => a.FromDate == DailyTransactionObj.TranDate
                    //    && a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                    OtHr NewOTHr = WetosDB.OtHrs.Where(a => a.OtTranDate == DailyTransactionObj.TranDate && a.OtEmpId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                    //if (NewCompOffObj == null)
                    //{
                    //    NewCompOffObj = new CumulativeManualCompOff();
                    //    IsNew = true;
                    //}
                    if (NewOTHr == null)
                    {
                        NewOTHr = new OtHr();
                        IsNew = true;
                    }

                    //NewCompOffObj.EmployeeId = DailyTransactionObj.EmployeeId;
                    //NewCompOffObj.FromDate = DailyTransactionObj.TranDate;
                    //NewCompOffObj.ExtraWorkingHrs = DailyTransactionObj.ExtraHrs.Value;
                    //NewCompOffObj.CompOffPurpose = "System Generated";
                    //NewCompOffObj.StatusId = 1;
                    //NewCompOffObj.CompOffBalance = COBalance;
                    //NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                    //NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                    //NewCompOffObj.RejectReason = string.Empty;
                    //NewCompOffObj.MarkedAsDelete = 0;
                    //NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                    //NewCompOffObj.LogoutTime = DailyTransactionObj.LogOut;
                    //NewCompOffObj.IsAutoEntry = 1;

                    ////CODE ADDED BY SHRADDHA ON 20 FEB 2018 START
                    //NewCompOffObj.CompOffHours = CompOffHours;
                    //NewCompOffObj.IsWeekDay = IsWeekDay;
                    //NewCompOffObj.IsWeekOff = IsWeekOff;
                    //NewCompOffObj.IsPaidHoliday = IsPaidHoliday;
                    //CODE ADDED BY SHRADDHA ON 20 FEB 2018 END

                    //ADDED BY PUSHKAR FOR OT HRS CALCULATION
                    NewOTHr.OtEmpId = DailyTransactionObj.EmployeeId;
                    NewOTHr.OtTranDate = DailyTransactionObj.TranDate;

                    TimeSpan StartInTime = new TimeSpan(7, 00, 00);
                    TimeSpan StartOutTime = new TimeSpan(20, 00, 00);
                    TimeSpan ForSplTime = new TimeSpan(19, 00, 00);
                    TimeSpan LogOutExtraHrs = ShiftObj.FirstOutTime.AddMinutes(30).TimeOfDay;//ADDED BY PUSHKAR ON 21 FEB 2019 FOR SHIFT OUT TIME
                    TimeSpan OutTimeExtraHrs = DailyTransactionObj.LogOut.TimeOfDay - LogOutExtraHrs;//ADDED BY PUSHKAR ON 21 FEB 2019 FOR SHIFT OUT TIME

                    if (DailyTransactionObj.ExtraHrs.Value.Hour >= 2 && (IsWeekOff == true || IsPaidHoliday == true))
                    {
                        NewOTHr.OtExtraHrs = DailyTransactionObj.ExtraHrs.Value;

                        int AccumulationMinuteInt = Convert.ToInt32(DailyTransactionObj.ExtraHrs.Value.Minute);

                        NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(-AccumulationMinuteInt);

                        if (AccumulationMinuteInt <= 15)
                        {

                        }
                        else if (AccumulationMinuteInt > 15 && AccumulationMinuteInt < 30)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else if (AccumulationMinuteInt >= 30 && AccumulationMinuteInt < 45)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(60);
                        }
                    }
                    else if (DailyTransactionObj.ExtraHrs.Value.Hour >= 2 && DailyTransactionObj.Login.TimeOfDay <= StartInTime)
                    {
                        NewOTHr.OtExtraHrs = DailyTransactionObj.ExtraHrs.Value;

                        int AccumulationMinuteInt = Convert.ToInt32(DailyTransactionObj.ExtraHrs.Value.Minute);

                        NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(-AccumulationMinuteInt);

                        if (AccumulationMinuteInt <= 15)
                        {

                        }
                        else if (AccumulationMinuteInt > 15 && AccumulationMinuteInt <= 30)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else if (AccumulationMinuteInt >= 30 && AccumulationMinuteInt <= 45)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(60);
                        }

                    }
                    else if (OutTimeExtraHrs.Hours >= 2 && DailyTransactionObj.LogOut.TimeOfDay >= StartOutTime)
                    {
                        //MODIFIED BY PUSHKAR ON 21 FEB 2019 FOR CALC OT 
                        NewOTHr.OtExtraHrs = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, OutTimeExtraHrs.Hours
                            , OutTimeExtraHrs.Minutes, OutTimeExtraHrs.Seconds);//DailyTransactionObj.ExtraHrs.Value.AddMinutes(-30);

                        int AccumulationMinuteInt = Convert.ToInt32(OutTimeExtraHrs.Minutes);//MODIFIED BY PUSHKAR ON 21 FEB 2019 FOR CALC OT 

                        NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(-AccumulationMinuteInt);

                        if (AccumulationMinuteInt <= 15)
                        {

                        }
                        else if (AccumulationMinuteInt > 15 && AccumulationMinuteInt <= 30)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else if (AccumulationMinuteInt >= 30 && AccumulationMinuteInt <= 45)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(60);
                        }


                    }

                    //ONLY FOR EMPLOYEE TYPE 4 EXTRA HRS THANE BRANCH
                    if (DailyTransactionObj.LogOut.TimeOfDay >= ForSplTime && EmpType.EmployeeTypeId == 4)
                    {
                        //MODIFIED BY PUSHKAR ON 08 MARCH 2019
                        TimeSpan OutTimeThane = DailyTransactionObj.LogOut.TimeOfDay - ForSplTime;
                        NewOTHr.OtExtraHrs = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, OutTimeThane.Hours
                            , OutTimeThane.Minutes, OutTimeThane.Seconds);

                        //NewOTHr.OtExtraHrs = DailyTransactionObj.ExtraHrs.Value; //COMMENTED BY PUSHKAR ON 08 MARCH 2019

                        //int AccumulationHourInt = Convert.ToInt32(DailyTransactionObj.ExtraHrs.Value.Hour);
                        int AccumulationMinuteIntEx = Convert.ToInt32(NewOTHr.OtExtraHrs.Value.Minute);
                        //int TotalInMin = (60 * AccumulationHourInt) + AccumulationMinuteIntEx;

                        NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(-AccumulationMinuteIntEx);

                        if (AccumulationMinuteIntEx <= 15)
                        {

                        }
                        else if (AccumulationMinuteIntEx > 15 && AccumulationMinuteIntEx <= 30)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else if (AccumulationMinuteIntEx >= 30 && AccumulationMinuteIntEx <= 45)
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(30);
                        }
                        else
                        {
                            NewOTHr.OtExtraHrs = NewOTHr.OtExtraHrs.Value.AddMinutes(60);

                        }
                    }

                    //MODIFIED BY PUSHKAR ON 08 MARCH 2019
                    if (NewOTHr.OtStatusId == null)
                    {
                        NewOTHr.OtStatusId = 1;
                    }

                    NewOTHr.OtCompanyId = DailyTransactionObj.CompanyId;
                    NewOTHr.OtBranchId = DailyTransactionObj.BranchId;
                    NewOTHr.LoginTime = DailyTransactionObj.Login;
                    NewOTHr.LogOutTime = DailyTransactionObj.LogOut;

                    //if (IsNew == true)
                    //{
                    //    WetosDB.CumulativeManualCompOffs.AddObject(NewCompOffObj);
                    //}

                    if (IsNew == true && NewOTHr.OtExtraHrs != null)
                    {
                        WetosDB.OtHrs.AddObject(NewOTHr);
                    }

                    WetosDB.SaveChanges();

                    //NewCompOffObj.StatusId = 2;
                    //NewCompOffObj.RejectReason = string.Empty;
                    WetosDB.SaveChanges();

                    //CumulativeCompOff NewCompOffObjSanc = WetosDB.CumulativeCompOffs.Where(a => a.ManualCompOffId == NewCompOffObj.CMCompOffId).FirstOrDefault();//new CumulativeCompOff();


                    //if (NewCompOffObjSanc == null)
                    //{
                    //    NewCompOffObjSanc = new CumulativeCompOff();

                    //    DailyTransaction DailyTransactionObjSanc = WetosDB.DailyTransactions.Where(a => a.TranDate == NewCompOffObj.FromDate && a.EmployeeId == NewCompOffObj.EmployeeId).FirstOrDefault();

                    //    //IF ATTENDANCE DATA IS AVAILABLE FOR COMP OFF DATE THEN MARK SHIFT FROM DT TABLE
                    //    #region IF ATTENDANCE DATA IS AVAILABLE FOR COMP OFF DATE THEN MARK SHIFT FROM DT TABLE
                    //    if (DailyTransactionObjSanc != null)
                    //    {
                    //        NewCompOffObjSanc.ShiftId = DailyTransactionObjSanc.ShiftId;
                    //    }
                    //    #endregion

                    //    //IF ATTENDANCE DATA IS NOT AVAILABLE FOR COMP OFF DATE THEN MARK GEN SHIFT
                    //    #region IF ATTENDANCE DATA IS NOT AVAILABLE FOR COMP OFF DATE THEN MARK GEN SHIFT
                    //    else
                    //    {
                    //        NewCompOffObjSanc.ShiftId = "GEN";  // Verify??
                    //    }
                    //    #endregion

                    //    NewCompOffObjSanc.EmployeeId = Convert.ToInt32(NewCompOffObj.EmployeeId);
                    //    NewCompOffObjSanc.WoDate = NewCompOffObj.FromDate;
                    //    //IF COMP OFF BALANCE IS 0.5 THEN ADD DAYSTATUS IN COMP OFF TABLE IS 'Half Day'
                    //    #region IF COMP OFF BALANCE IS 0.5 THEN ADD DAYSTATUS IN COMP OFF TABLE IS 'Half Day'
                    //    if (NewCompOffObj.CompOffBalance == 0.5)
                    //    {
                    //        NewCompOffObjSanc.DayStatus = "Half Day";   // Mapp with Id ?
                    //        //NewCompOffObj.CoHours = ManualCOObj.ExtraWorkingHrs;
                    //        NewCompOffObjSanc.CoHours = NewCompOffObj.ExtraWorkingHrs == null ? 0 :
                    //            ((NewCompOffObj.ExtraWorkingHrs.Hour * 60) + NewCompOffObj.ExtraWorkingHrs.Minute);// COMMNETED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 20 MAR 2018 
                    //    }
                    //    #endregion

                    //    //IF COMP OFF BALANCE IS 1 THEN ADD DAYSTATUS IN COMP OFF TABLE IS 'Full Day'
                    //    #region IF COMP OFF BALANCE IS 1 THEN ADD DAYSTATUS IN COMP OFF TABLE IS 'Full Day'
                    //    else if (NewCompOffObj.CompOffBalance == 1)
                    //    {
                    //        NewCompOffObjSanc.DayStatus = "Full Day";
                    //        //NewCompOffObj.CoHours = ManualCOObj.ExtraWorkingHrs;
                    //        NewCompOffObjSanc.CoHours = NewCompOffObj.ExtraWorkingHrs == null ? 0 :
                    //            ((NewCompOffObj.ExtraWorkingHrs.Hour * 60) + NewCompOffObj.ExtraWorkingHrs.Minute);// COMMNETED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 20 MAR 2018 
                    //    }

                    //    //CODE ADDED BY SHRADDHA ON 20 FEB 2018 START
                    //    else
                    //    {
                    //        NewCompOffObjSanc.CoHours = NewCompOffObj.CompOffHours;
                    //    }
                    //    //CODE ADDED BY SHRADDHA ON 20 FEB 2018 END
                    //    #endregion

                    //    NewCompOffObjSanc.BalanceCoHours = NewCompOffObjSanc.CoHours; //CODE ADDED BY SHRADDHA ON 21 FEB 2018

                    //    NewCompOffObjSanc.CompanyId = NewCompOffObj.CompanyId;
                    //    NewCompOffObjSanc.BranchId = NewCompOffObj.BranchId;


                    //    // Updated by Rajas on 29 SEP 2017 START
                    //    //DateTime.Now modified
                    //    int CurrentYearInt = DateTime.Now.Year; // ADDED BY MSJ ON 02 JAN 2018
                    //    NewCompOffObjSanc.LoginTime = NewCompOffObj.LoginTime == null ? new DateTime(CurrentYearInt, 01, 01, 00, 00, 00) : NewCompOffObj.LoginTime.Value;
                    //    NewCompOffObjSanc.LogOutTime = NewCompOffObj.LogoutTime == null ? new DateTime(CurrentYearInt, 01, 01, 00, 00, 00) : NewCompOffObj.LogoutTime.Value;
                    //    // Updated by Rajas on 29 SEP 2017 END

                    //    NewCompOffObjSanc.ManualCompOffId = NewCompOffObj.CMCompOffId;

                    //    WetosDB.CumulativeCompOffs.AddObject(NewCompOffObjSanc);

                    //    WetosDB.SaveChanges();
                    //}

                }
                return ReturnFlag = true;

            }
            catch (System.Exception ex)
            {
                RetMessage = ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnFlag;
            }
        }




        /// <summary>
        /// 
        /// </summary>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="FullDayRuleHourInt"></param>
        /// <param name="HalfDayRuleHourInt"></param>
        /// <param name="ReturnStatusMsg"></param>
        /// <returns></returns>
        public static bool MarkWeekOff2DayPresentEx(WetosDBEntities WetosDB, DailyTransaction DailyTransactionObj, int FullDayRuleHourInt, int HalfDayRuleHourInt, ref string ReturnStatusMsg)
        {
            bool ReturnStatus = false;
            try
            {
                if (DailyTransactionObj.Status == "AAAA")
                {
                    // Updated by Rajas on 29 APRIL 2017
                    DailyTransactionObj.Status = "WOWO"; // WWWW

                    WetosDB.SaveChanges();
                }
                else if (DailyTransactionObj.Status != "AAAA")
                {
                    DailyTransactionObj.Status = "WPWP";  // WOWO

                    //CODE ADDED BY SHRADDHA ON 06 MARCH 2017 FOR ADDING WEEK OFF DAY IN COMP OFF TABLE START
                    if (DailyTransactionObj.WorkingHrs != null)
                    {

                        if (DailyTransactionObj.WorkingHrs.Value.Hour >= HalfDayRuleHourInt && DailyTransactionObj.WorkingHrs.Value.Hour < FullDayRuleHourInt) // NEED TO REPLACE WITH RULE CVALUES ????
                        {

                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table Start
                            CompOff NewCompOffObj = new CompOff();
                            NewCompOffObj.EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                            NewCompOffObj.WoDate = DailyTransactionObj.TranDate;
                            NewCompOffObj.WrkDayStatus = DailyTransactionObj.Status;
                            NewCompOffObj.DayStatus = "Half Day";
                            NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                            NewCompOffObj.LogOutTime = DailyTransactionObj.LogOut;
                            NewCompOffObj.ShiftId = DailyTransactionObj.ShiftId;
                            NewCompOffObj.TotalHrs = DailyTransactionObj.WorkingHrs;
                            NewCompOffObj.CoHours = DailyTransactionObj.ExtraHrs;
                            WetosDB.CompOffs.AddObject(NewCompOffObj);
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table End

                            //Commented By Shraddha on 10 JAN 2017
                            //DailyTransactionObj.ActualStatus = "COCO*";
                            WetosDB.SaveChanges();
                        }
                        else if (DailyTransactionObj.WorkingHrs.Value.Hour >= FullDayRuleHourInt)
                        {
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table start
                            CompOff NewCompOffObj = new CompOff();
                            NewCompOffObj.EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                            NewCompOffObj.WoDate = DailyTransactionObj.TranDate;
                            NewCompOffObj.WrkDayStatus = DailyTransactionObj.Status;
                            NewCompOffObj.DayStatus = "Full Day";
                            NewCompOffObj.CompanyId = DailyTransactionObj.CompanyId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.BranchId = DailyTransactionObj.BranchId;
                            NewCompOffObj.LoginTime = DailyTransactionObj.Login;
                            NewCompOffObj.LogOutTime = DailyTransactionObj.LogOut;
                            NewCompOffObj.ShiftId = DailyTransactionObj.ShiftId;
                            NewCompOffObj.TotalHrs = DailyTransactionObj.WorkingHrs;
                            NewCompOffObj.CoHours = DailyTransactionObj.ExtraHrs;
                            WetosDB.CompOffs.AddObject(NewCompOffObj);
                            //Modified By Shraddha on 10 JAN 2017 to save CompOff details in CompOff Table END

                            //Commented By Shraddha on 10 JAN 2017
                            //DailyTransactionObj.ActualStatus = "COCO**";
                            WetosDB.SaveChanges();
                        }

                        //CODE ADDED BY SHRADDHA ON 06 MARCH 2017 FOR ADDING WEEK OFF DAY IN COMP OFF TABLE END

                        // DailyTransaction DailyTransactionObj = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).FirstOrDefault();

                    }

                    WetosDB.SaveChanges();

                }
                ReturnStatus = true;
                return ReturnStatus;
            }
            catch (System.Exception E)
            {
                ReturnStatus = false;
                ReturnStatusMsg = E.Message + "_" + (E.InnerException == null ? string.Empty : E.InnerException.Message);
                return ReturnStatus;
            }
        }


        // LEAVE

        /// <summary>
        /// 
        /// </summary>
        /// <param name="WetosDB"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="EmployeeId"></param>
        /// <returns></returns>
        /// UPDATED by Rajas on 16 AUGUST 2017
        public static bool LeaveProcessingEx(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, int EmployeeId, ref string ReturnMessage)
        {
            bool ReturnStatus = false;

            #region CODE TO MARK FOR LEAVE APPLICATION STAUS IF ANY SANCTIONED LEAVE IS AVAILABLE

            PostingFlagModel PostingFlagModelObj = new PostingFlagModel();

            try
            {
                for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
                {
                    #region CODE TO MARK FOR LEAVE APPLICATION STAUS IF ANY SANCTIONED LEAVE IS AVAILABLE

                    //ADDED BY SHRADDHA ON 04 JAN 2017 FOR LEAVE APPLICATION STAUS
                    // Updated by Rajas on 10 AUGUST 2017 for Delete and StatusId
                    //List<LeaveApplication> LeaveApplicationObj = WetosDB.LeaveApplications.Where(a => a.FromDate == CurrentDate
                    //    && a.StatusId == 2 && a.MarkedAsDelete == 0).ToList();

                    List<LeaveApplication> LeaveApplicationObj = WetosDB.LeaveApplications.Where(a => a.FromDate == CurrentDate
                  && a.StatusId == 2 && a.MarkedAsDelete == 0 && a.EmployeeId == EmployeeId).ToList();
                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 08TH DEC TO GET ONLY CURRENT EMPLOYEE DATA FOR WHICH LEAVE IS BEING PROCESSED END
                    if (LeaveApplicationObj.Count > 0)
                    {
                        ReturnMessage = string.Empty;
                        string UpdatedStatus = string.Empty;
                        string NewStatus = string.Empty;
                        PostingFlagModelObj = new PostingFlagModel();

                        // Added by Rajas on 7 AUGUST 2017
                        PostingFlagModelObj.IsOnLeave = true;

                        foreach (LeaveApplication LeaveApplicationCurrentDayObj in LeaveApplicationObj)
                        {
                            for (DateTime CurrentLeaveDate = LeaveApplicationCurrentDayObj.FromDate; CurrentLeaveDate.Date <= LeaveApplicationCurrentDayObj.ToDate; CurrentLeaveDate = CurrentLeaveDate.AddDays(1))
                            {
                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentLeaveDate && a.EmployeeId == LeaveApplicationCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
                                {
                                    DailyTransactionAsLeave.ActualStatus = DailyTransactionAsLeave.Status;//CODE ADDED BY SHRADDHA ON 16 SEPT 2017 TO SAVE DAILYTRANSACTION STATUS AS ACTUAL STATUS
                                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS START

                                    // Updated by Rajas on 18 AUGUST 2017 START
                                    if (DailyTransactionAsLeave.Status.Contains(StatusConstants.Present))  // Need to split status 
                                    {
                                        // Pending need to Verify (TEST , generate case and update code)
                                        #region SENT BACK LEAVE AS "RETURNED" TO EMPLOYEE, IF EMPLOYEE PRESENT ON ALREADY SANCTIONED DAY

                                        /// CODE ADDED BY RAJAS ON 18 APRIL 2017
                                        /// AS IF EMPLOYEE IS PRESENT ON ALREADY SANACTIONED DAY STATUS WILL BE UPDATED AS "RETURNED"
                                        /// FOLLOWING STEPS WILL BE TAKEN :
                                        /// 1. TO UPDATE THIS STATUS OF REVERT THE LEAVE BALANCE EMPLOYEE NEED TO EDIT OR MODIFY LEAVE
                                        /// 2. THEN SANCTIONER OR APPROVER WILL TAKE ACTION ON THE SAME.

                                        //if ((DailyTransactionAsLeave.Status.Trim() == "PPPP")) // || (DailyTransactionAsLeave.Status.Trim() == "AAPP") || (DailyTransactionAsLeave.Status.Trim() == "PPAA"))
                                        //{
                                        //    if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate && LeaveApplicationCurrentDayObj.StatusId == 2)
                                        //    {
                                        //        if (DailyTransactionAsLeave.Status.Trim() == "PPPP")
                                        //        {
                                        //            if (LeaveApplicationCurrentDayObj.FromDayStatus == 1)
                                        //            {
                                        //                DailyTransactionAsLeave.Status = "PPPP";

                                        //                LeaveApplicationCurrentDayObj.StatusId = 5;
                                        //            }
                                        //            else if (LeaveApplicationCurrentDayObj.FromDayStatus == 2)
                                        //            {
                                        //                DailyTransactionAsLeave.Status = "PPPP";

                                        //                LeaveApplicationCurrentDayObj.StatusId = 5;
                                        //            }
                                        //            else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3)
                                        //            {
                                        //                DailyTransactionAsLeave.Status = "PPPP";

                                        //                LeaveApplicationCurrentDayObj.StatusId = 5;
                                        //            }
                                        //        }

                                        //    }
                                        //}

                                        if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate)
                                        {
                                            NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                            switch (LeaveApplicationCurrentDayObj.FromDayStatus)
                                            {
                                                case 1:
                                                    if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
                                                    {
                                                        // No change in status
                                                    }
                                                    break;

                                                case 2:
                                                    if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                                    }
                                                    break;

                                                case 3:
                                                    if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                                    }
                                                    break;

                                                default:

                                                    break;
                                            }

                                            WetosDB.SaveChanges();
                                        }
                                        else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate)
                                        {
                                            switch (LeaveApplicationCurrentDayObj.ToDayStatus)
                                            {
                                                case 1:
                                                    if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
                                                    {
                                                        // No change in status
                                                    }
                                                    break;

                                                case 2:
                                                    if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                                    }
                                                    break;

                                                case 3:
                                                    if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                                    {
                                                        DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                                    }
                                                    break;

                                                default:

                                                    break;
                                            }

                                            WetosDB.SaveChanges();
                                        }
                                        else
                                        {
                                            if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                            {
                                                DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                            }
                                            else if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                            {
                                                DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                            }
                                            else
                                            {
                                                // No change in status
                                            }

                                            WetosDB.SaveChanges();
                                        }
                                        #endregion

                                    } // Updated by Rajas on 18 AUGUST 2017 END
                                    else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate && LeaveApplicationCurrentDayObj.StatusId == 2)
                                    {
                                        if (LeaveApplicationCurrentDayObj.FromDayStatus == 2)
                                        {
                                            PostingFlagModelObj.IsFirstHalfLeave = true;
                                        }
                                        else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfLeave = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayLeave = true;
                                        }

                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                    }

                                    else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate && LeaveApplicationCurrentDayObj.StatusId == 2)
                                    {
                                        if (LeaveApplicationCurrentDayObj.FromDayStatus == 2)
                                        {
                                            PostingFlagModelObj.IsFirstHalfLeave = true;
                                        }
                                        else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfLeave = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayLeave = true;
                                        }

                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                        && LeaveApplicationCurrentDayObj.StatusId == 2) // Added by Rajas on 18 AUGUST 2017
                                    {
                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                        PostingFlagModelObj.IsFullDayLeave = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                    }
                                    //else if (DailyTransactionAsLeave.Status.Trim() == "AAAA" && LeaveApplicationCurrentDayObj.StatusId != 2)
                                    //{
                                    //    DailyTransactionAsLeave.Status = "AAAA";
                                    //}
                                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS END
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }
                    #endregion
                }

                return ReturnStatus = true;
            }
            catch (System.Exception ex)
            {
                ReturnMessage = "Error in_LeaveProcess : " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnStatus;
            }

            #endregion
        }

        // OD
        /// <summary>
        /// 
        /// </summary>
        /// <param name="WetosDB"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="EmployeeId"></param>
        /// <returns></returns>
        /// Updated by Rajas on 7 AUGUST 2017
        public static bool ODOTProcessingEx(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, int EmployeeId, ref string ReturnMessage)
        {
            bool ReturnStatus = false;

            try
            {
                for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
                {
                    #region CODE TO MARK OD

                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL START
                    List<ODTour> ODTourObj = WetosDB.ODTours.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate && a.EmployeeId == EmployeeId).ToList();

                    // Added by Rajas on 7 AUGUST 2017
                    PostingFlagModel PostingFlagModelObj = new PostingFlagModel();

                    if (ODTourObj.Count > 0)
                    {
                        foreach (ODTour ODTourCurrentDayObj in ODTourObj)
                        {
                            // Status as per selection of ODTourType
                            // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                            // Updated by Rajas on 5 AUGUST 2017
                            string UpdatedStatus = string.Empty;
                            string NewStatus = string.Empty;

                            // Initialise flags
                            PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017

                            PostingFlagModelObj.IsOdTour = true;   // Added by Rajas on 7 AUGUST 2017

                            if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "TOUR")
                            {
                                NewStatus = "TO";
                            }
                            else if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "OD")
                            {
                                NewStatus = "OD";
                            }
                            else
                            {
                                NewStatus = "PP";
                            }

                            // Code updated by Rajas on 9 JULY 2017 for Status START
                            for (DateTime CurrentODDate = Convert.ToDateTime(ODTourCurrentDayObj.FromDate); CurrentODDate.Date <= ODTourCurrentDayObj.ToDate; CurrentODDate = CurrentODDate.AddDays(1))
                            {
                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentODDate && a.EmployeeId == ODTourCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
                                {
                                    #region COMMENTED CODE BY SHRADDHA AND CALLED GENERIC FUNCTION ON 22 NOV 2017 NEED TO TEST
                                    //if (DailyTransactionAsLeave.Status.Trim() == "PPPP")  // need to verify
                                    //{
                                    //    DailyTransactionAsLeave.Status = "PPPP";
                                    //}
                                    //else if (CurrentODDate == ODTourCurrentDayObj.FromDate && ODTourCurrentDayObj.StatusId == 2)
                                    //{
                                    //    if (ODTourCurrentDayObj.ODDayStatus == 2)
                                    //    {
                                    //        PostingFlagModelObj.IsFirstHalfOD = true;
                                    //    }
                                    //    else if (ODTourCurrentDayObj.ODDayStatus == 3)
                                    //    {
                                    //        PostingFlagModelObj.IsSecondHalfOD = true;
                                    //    }
                                    //    else
                                    //    {
                                    //        PostingFlagModelObj.IsFullDayOD = true;
                                    //    }

                                    //    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                    //    DailyTransactionAsLeave.Status = UpdatedStatus;
                                    //}
                                    //else if (CurrentODDate == ODTourCurrentDayObj.ToDate && ODTourCurrentDayObj.StatusId == 2)
                                    //{
                                    //    if (ODTourCurrentDayObj.ODDayStatus1 == 2)
                                    //    {
                                    //        PostingFlagModelObj.IsFirstHalfOD = true;
                                    //    }
                                    //    else if (ODTourCurrentDayObj.ODDayStatus1 == 3)
                                    //    {
                                    //        PostingFlagModelObj.IsSecondHalfOD = true;
                                    //    }
                                    //    else
                                    //    {
                                    //        PostingFlagModelObj.IsFullDayOD = true;
                                    //    }

                                    //    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                    //    DailyTransactionAsLeave.Status = UpdatedStatus;
                                    //}
                                    //else if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                    //    && ODTourCurrentDayObj.StatusId == 2)  // Added by Rajas on 28 AUGUST 2017
                                    //{
                                    //    PostingFlagModelObj.IsFullDayOD = true;

                                    //    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                    //    DailyTransactionAsLeave.Status = UpdatedStatus;
                                    //}
                                    //else if (DailyTransactionAsLeave.Status.Trim() == "AAAA" && ODTourCurrentDayObj.StatusId != 2)
                                    //{
                                    //    DailyTransactionAsLeave.Status = "AAAA";
                                    //}
                                    #endregion
                                    //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE START
                                    // CalculateODWorkingHours(WetosDB, DailyTransactionAsLeave, ODTourCurrentDayObj, PostingFlagModelObj, CurrentODDate,
                                    // UpdatedStatus, NewStatus, ref ReturnMessage);
                                    //EARLIER CODE COMMENTED BY SHRADDHA AND ADDED NEW FUNCTION CalculateODWorkingHours ON 22 NOV 2017 TO GET GENERIC CODE END
                                }


                            }

                            WetosDB.SaveChanges();
                        }
                    }
                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL END
                    #endregion

                    ReturnStatus = true;
                }
            }
            catch (System.Exception ex)
            {

                ReturnMessage = "Error in ODTravel_Processing : " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
            }

            return ReturnStatus;
        }

        #region COMMENTED EXCEPTION PROCESS CODE

        //// EXCEPTION

        ///// <summary>
        ///// 
        ///// </summary>
        ///// <param name="WetosDB"></param>
        ///// <param name="fromdate"></param>
        ///// <param name="todate"></param>
        ///// <param name="EmployeeId"></param>
        ///// <returns></returns>
        //public static bool ExceptionProcessingEx(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, int EmployeeId)
        //{
        //    bool ReturnStatus = false;

        //    try
        //    {
        //        for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
        //        {
        //            //GET DAILY TRAN LIST FOR CURRENT DATE
        //            List<DailyTransaction> DailyTransactionListForCurrentDayList = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate && a.EmployeeId == EmployeeId).ToList();


        //            // GET Exception List
        //            List<WetosDB.Exception> ExceptionList = WetosDB.Exceptions.Where(a => a.ExceptionDate == CurrentDate && a.Employee.EmployeeId == EmployeeId).ToList();

        //            // GET ALL RULES
        //            List<RuleTransaction> AllRuleTransactionList = WetosDB.RuleTransactions.ToList();


        //            foreach (DailyTransaction DailyTransactionObj in DailyTransactionListForCurrentDayList) // SP
        //            {
        //                // GET EMP GROUP FOR EMP in Daily tran
        //                int EmployeeGroupIdObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();

        //                // EMP INFO
        //                Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

        //                int EmployeeCompanyId = EmployeeObj.CompanyId;
        //                int EmployeeBranchId = EmployeeObj.BranchId;

        //                string EmployeeGroupName = WetosDB.EmployeeGroups.Where(a => a.EmployeeGroupId == EmployeeGroupIdObj).Select(a => a.EmployeeGroupName).FirstOrDefault();
        //                string CompanyName = WetosDB.Companies.Where(a => a.CompanyId == EmployeeCompanyId).Select(a => a.CompanyName).FirstOrDefault();
        //                string BranchName = WetosDB.Branches.Where(a => a.BranchId == EmployeeBranchId).Select(a => a.BranchName).FirstOrDefault();

        //                //List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.CompanyId == EmployeeCompanyId && a.BranchId == EmployeeBranchId && a.EmployeeGroupId == EmployeeGroupIdObj).ToList();
        //                List<RuleTransaction> RuleTransactionList = AllRuleTransactionList.Where(a => a.CompanyId == EmployeeCompanyId && a.BranchId == EmployeeBranchId && a.EmployeeGroupId == EmployeeGroupIdObj).ToList();


        //                #region MARK EXCEPTION ENTRY

        //                if (ExceptionList.Count > 0)
        //                {
        //                    List<WetosDB.Exception> ExceptionListForSelectedEmployees = ExceptionList.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId).ToList();

        //                    if (ExceptionListForSelectedEmployees.Count > 0)
        //                    {
        //                        foreach (WetosDB.Exception ExceptionObjForSelectedEmployee in ExceptionListForSelectedEmployees)
        //                        {
        //                            DailyTransactionObj.Login = ExceptionObjForSelectedEmployee.LoginTime;
        //                            DailyTransactionObj.LogOut = ExceptionObjForSelectedEmployee.LogOutTime;

        //                            string WorkingHrsString = (ExceptionObjForSelectedEmployee.LogOutTime.TimeOfDay - ExceptionObjForSelectedEmployee.LoginTime.TimeOfDay).ToString();

        //                            DailyTransactionObj.WorkingHrs = Convert.ToDateTime(WorkingHrsString);
        //                            WetosDB.SaveChanges();
        //                        }
        //                    }
        //                }
        //                #endregion

        //                #region  FIND NEAREST SHIFT FROM IN OUT AND MARK LATE / EARLY
        //                // FIND NEAREST SHIFT FROM IN OUT AND MARK LATE / EARLY

        //                DateTime Intime = DailyTransactionObj.Login;
        //                DateTime OutTime = DailyTransactionObj.LogOut;

        //                //Added By Shraddha on 10 JAN 2017 to find the Nearest Time Shift
        //                // WWWW replaced with WOWO by Rajas on 29 APRIL 2017
        //                if (DailyTransactionObj.Status != "AAAA" && DailyTransactionObj.Status != "WOWO" && DailyTransactionObj.Status != "HHHH") // ????
        //                {
        //                    // Added by Rajas on 12 APRIL 2017 for Getting SHIFT
        //                    #region MARK SHIFT FROM SHIFT SCHEDULE Otherwise MARK FROM DEFAULT SHIFT

        //                    int CurrentMonth = Intime.Month;

        //                    int CurrentYear = Intime.Year;

        //                    int CurrentDay = Intime.Day;

        //                    ShiftSchedule ShiftScheduleObj = WetosDB.ShiftSchedules.Where(a => a.ShiftMonth == CurrentMonth && a.ShiftYear == CurrentYear
        //                        && a.EmployeeId == EmployeeObj.EmployeeId).FirstOrDefault();

        //                    Shift ShiftObjForCurrentEmployee = new Shift();

        //                    #region CODE TO GET ASSIGNED SHIFT FOR CURRENT DAY FOR EACH EMPLOYEE
        //                    //CODE ADDED BY SHRADDHA ON 19 MAY 2017 TO GET ASSIGNED SHIFT PATTERNS FOR PERTICULAR EMPLOYEE IN PERTICULAR MONTH AND YEAR START

        //                    //GET LIST OF ASSIGNED SHIFT PATTERNS FOR PERTICULAR EMPLOYEE IN PERTICULAR MONTH AND YEAR 
        //                    List<ShiftSchedulePattern> ShiftSchedulePatternList = WetosDB.ShiftSchedulePatterns.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId && a.ShiftMonth == DailyTransactionObj.TranDate.Month && a.ShiftYear == DailyTransactionObj.TranDate.Year).ToList();

        //                    if (ShiftSchedulePatternList != null)
        //                    {
        //                        List<ShiftSchedulePattern> ShiftSchedulePatternListForPerticularDateRange = ShiftSchedulePatternList.Where(a => a.EffectiveStartDate <= DailyTransactionObj.TranDate && a.EffectiveEndDate >= DailyTransactionObj.TranDate).ToList();

        //                        if (ShiftSchedulePatternListForPerticularDateRange.Count > 0)
        //                        {
        //                            foreach (ShiftSchedulePattern ShiftSchedulePatternObjForPerticularDateRange in ShiftSchedulePatternListForPerticularDateRange)
        //                            {
        //                                int y = DailyTransactionObj.TranDate.Day;

        //                                string command = string.Format(@"select Day{0} from ShiftSchedulePattern where EmployeeId={1} and EffectiveStartDate<='{2}/{3}/{4} {5}' and EffectiveEndDate>='{2}/{3}/{4} {5}' and companyId={6} and branchid={7};"
        //                                  , y, DailyTransactionObj.EmployeeId, DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, "00:00", DailyTransactionObj.CompanyId, DailyTransactionObj.BranchId);
        //                                string Shift = WetosDB.ExecuteStoreQuery<string>(command, "").FirstOrDefault();
        //                                DailyTransactionObj.ShiftId = Shift;

        //                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == Shift).FirstOrDefault();

        //                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                    && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                                     && a.FirstInTime == ShiftObjForCurrentEmployee.FirstInTime).FirstOrDefault();

        //                                WetosDB.SaveChanges();

        //                            }
        //                        }
        //                        else
        //                        {
        //                            #region GET SHIFT  FROM CLOSEST TIME
        //                            DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                                && a.ShiftCode == EmployeeObj.DefaultShift).Select(a => a.FirstInTime).ToArray();

        //                            long min = long.MaxValue;

        //                            DateTime ClosestTime = new DateTime();

        //                            foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                            {
        //                                if (Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks) < min)
        //                                {
        //                                    min = CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                                    ClosestTime = CurrentDateTime;
        //                                }
        //                            }

        //                            ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                                && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                                 && a.FirstInTime == ClosestTime).FirstOrDefault();

        //                            if (ShiftObjForCurrentEmployee != null)
        //                            {
        //                                DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                                WetosDB.SaveChanges();
        //                            }

        //                            #endregion
        //                        }
        //                    }

        //                    else
        //                    {
        //                        #region GET SHIFT  FROM CLOSEST TIME
        //                        DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                            && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                            && a.ShiftCode == EmployeeObj.DefaultShift).Select(a => a.FirstInTime).ToArray();

        //                        long min = long.MaxValue;

        //                        DateTime ClosestTime = new DateTime();

        //                        foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                        {
        //                            if (Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks) < min)
        //                            {
        //                                min = CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                                ClosestTime = CurrentDateTime;
        //                            }
        //                        }

        //                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
        //                            && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                             && a.FirstInTime == ClosestTime).FirstOrDefault();

        //                        if (ShiftObjForCurrentEmployee != null)
        //                        {
        //                            DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                            WetosDB.SaveChanges();
        //                        }

        //                        #endregion
        //                    }

        //                    #endregion



        //                    //if (ShiftScheduleObj == null)
        //                    //{
        //                    //    #region GET SHIFT  FROM CLOSEST TIME
        //                    //    DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.CompanyId == EmployeeCompanyId
        //                    //        && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                    //        && a.ShiftCode == EmployeeObj.DefaultShift).Select(a => a.FirstInTime).ToArray();

        //                    //    long min = long.MaxValue;

        //                    //    DateTime ClosestTime = new DateTime();

        //                    //    foreach (DateTime CurrentDateTime in FirstInTimeArray)
        //                    //    {
        //                    //        if (Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks) < min)
        //                    //        {
        //                    //            min = CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
        //                    //            ClosestTime = CurrentDateTime;
        //                    //        }
        //                    //    }

        //                    //    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.CompanyId == EmployeeCompanyId
        //                    //        && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                    //         && a.FirstInTime == ClosestTime).FirstOrDefault();

        //                    //    if (ShiftObjForCurrentEmployee != null)
        //                    //    {
        //                    //        DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

        //                    //        WetosDB.SaveChanges();
        //                    //    }

        //                    //    #endregion
        //                    //}

        //                    //else
        //                    //{
        //                    //    // ADDED BY MSJ ON 12 APRIL 2017 START
        //                    //    string CurrentDayColumn = "Day" + CurrentDay;

        //                    //    string command = string.Format(@"select {0} from ShiftSchedule where ShiftMonth = {1} AND ShiftYear = {2} AND EmployeeId = {3};"
        //                    //        , CurrentDayColumn, CurrentMonth, CurrentYear, EmployeeObj.EmployeeId);

        //                    //    string CurrentShift = WetosDB.ExecuteStoreQuery<string>(command, "").First();
        //                    //    // ADDED BY MSJ ON 12 APRIL 2017 END

        //                    //    //string CurrentShift = ShiftScheduleObj.Day1.Trim();

        //                    //    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == CurrentShift).FirstOrDefault();

        //                    //    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.CompanyId == EmployeeCompanyId
        //                    //        && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
        //                    //         && a.FirstInTime == ShiftObjForCurrentEmployee.FirstInTime).FirstOrDefault();

        //                    //    DailyTransactionObj.ShiftId = CurrentShift;

        //                    //    WetosDB.SaveChanges();
        //                    //}

        //                    #endregion

        //                    /// IsLateCountToBeIncremented YES/NO
        //                    /// Flag added by Rajas on 28 APRIL 2017
        //                    bool IsLateCountToBeIncremented = true;

        //                    /// IsEarlyCountToBeIncremented YES/NO
        //                    /// Flag added by Rajas on 28 APRIL 2017
        //                    bool IsEarlyCountToBeIncremented = true;

        //                    #region LOGIC FOR LATE MARK AND SHIFT
        //                    // LOGIC FOR LATE MARK AND SHIFT
        //                    if (ShiftObjForCurrentEmployee == null)
        //                    {
        //                        ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
        //                    }
        //                    DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
        //                    DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);
        //                    DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);
        //                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
        //                    DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);

        //                    // LATE COMING GRACE TIME FROM RULE 5
        //                    //int LCGraceTimeMinutes = 00;

        //                    if (RuleTransactionList != null)
        //                    {
        //                        // 5 - allowed late comming min
        //                        string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

        //                        if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
        //                        {
        //                            string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

        //                            //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
        //                            //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
        //                        }

        //                        /// Added by Rajas on 28 APRIL 2017 START
        //                        /// To check GraceLateAllowed limit

        //                        // 4 - Grace late allowed limit
        //                        string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

        //                        DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

        //                        TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
        //                        /// Added by Rajas on 28 APRIL 2017 END

        //                        //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
        //                        //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
        //                        // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

        //                        // LATE COMING LOGIC START
        //                        // int LateMarkCount = 1;
        //                        // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
        //                        if (Intime.TimeOfDay > FirstInTime.TimeOfDay)  // SecondInTime.TimeOfDay
        //                        {
        //                            //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

        //                            // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
        //                            string LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
        //                            //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
        //                            string Latestring = Intime.ToShortDateString() + " " + LateTimeString;

        //                            // Added by Rajas on 28 APRIL 2017 START
        //                            // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
        //                            DateTime LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr);
        //                            DateTime CalculatedLateTime = Convert.ToDateTime(LateTimeString);

        //                            if (CalculatedLateTime > GraceLateAllowedMin)
        //                            {
        //                                // Added by Rajas on 29 APRIL 2017
        //                                DailyTransactionObj.Status = "PPPP^";
        //                            }

        //                            if (CalculatedLateTime > LateAllowedLimit)
        //                            {
        //                                DailyTransactionObj.Status = "AAPP^";  // AAPP
        //                                DailyTransactionObj.Remark = "Late";

        //                                /// NOTE:
        //                                /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                /// If Employee is late beyond late allowed limit then deduct Half day directly
        //                                /// In this case don't update late count as action already taken for late employee.
        //                                IsLateCountToBeIncremented = false;
        //                            }
        //                            // Added by Rajas on 28 APRIL 2017 END

        //                            // late by min
        //                            DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
        //                            //WetosDB.SaveChanges();


        //                            int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                            int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                            // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                            TimeSpan LateBy = Intime.TimeOfDay - FirstInTime.TimeOfDay; // SecondInTime.TimeOfDay;

        //                            // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
        //                            if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
        //                            {
        //                                int IntLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                    && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear).Select(a => a.LateCount).Max());

        //                                //int IntLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId 
        //                                //    && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear 
        //                                //    && (a.Late != null && ((a.Late.Value.Hour * 60) + a.Late.Value.Minute)>30)).Select(a => a.LateCount).Max());

        //                                DailyTransactionObj.LateCount = IntLateCountForEmployee + 1;

        //                                //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS START

        //                                // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
        //                                RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

        //                                if (RuleForLateCount != null)
        //                                {
        //                                    int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

        //                                    // Check allowed late counts in a month
        //                                    if (DailyTransactionObj.LateCount > LateAllowed)  // (DailyTransactionObj.LateCount > 2)
        //                                    {
        //                                        DailyTransactionObj.Status = "AAPP^";
        //                                        DailyTransactionObj.Remark = "Late";
        //                                    }
        //                                }
        //                                //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END
        //                            }
        //                            WetosDB.SaveChanges();
        //                        }
        //                    }
        //                    // LATE COMING LOGIC END
        //                    #endregion

        //                    if (DailyTransactionObj.WorkingHrs != null)
        //                    {
        //                        #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

        //                        //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                        if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
        //                        {
        //                            //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
        //                            //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
        //                            if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
        //                             && DailyTransactionObj.WorkingHrs.Value.Second == 0)
        //                            {
        //                                DailyTransactionObj.Status = "AAAA";
        //                                WetosDB.SaveChanges();
        //                            }
        //                        }
        //                        //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
        //                        #endregion

        //                        #region  EARLY GOING LOGIC
        //                        // EARLY GOING LOGIC START
        //                        //EARLY GOING 

        //                        // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

        //                        if (RuleTransactionList != null)
        //                        {
        //                            // 6 - allowed Early going min
        //                            string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

        //                            if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
        //                            {
        //                                string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
        //                            }

        //                            /// Added by Rajas on 28 APRIL 2017 START
        //                            /// To check GraceLateAllowed limit

        //                            // 3 - Grace early allowed limit
        //                            string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();

        //                            DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

        //                            TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
        //                            /// Added by Rajas on 28 APRIL 2017 END

        //                            if (OutTime.TimeOfDay < FirstOutTime.TimeOfDay)
        //                            {
        //                                string EarlyTimeString = (FirstOutTime.TimeOfDay - OutTime.TimeOfDay).ToString();

        //                                string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

        //                                // Added by Rajas on 28 APRIL 2017 START
        //                                // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
        //                                DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
        //                                DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

        //                                if (CalculatedEarlyTime > GraceEarlyAllowedMin)
        //                                {
        //                                    // Added by Rajas on 29 APRIL 2017
        //                                    DailyTransactionObj.Status = "PPPP^";
        //                                }

        //                                if (CalculatedEarlyTime > EarlyAllowedLimit)
        //                                {
        //                                    DailyTransactionObj.Status = "PPAA^"; // PPAA
        //                                    DailyTransactionObj.Remark = "Early";

        //                                    /// NOTE:
        //                                    /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
        //                                    /// If Employee left early beyond early allowed limit then deduct Half day directly
        //                                    /// In this case don't update late count as action already taken for late employee.
        //                                    IsEarlyCountToBeIncremented = false;
        //                                }
        //                                // Added by Rajas on 28 APRIL 2017 END

        //                                // Early by min
        //                                DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
        //                                //WetosDB.SaveChanges();

        //                                //int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
        //                                int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
        //                                int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

        //                                // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
        //                                TimeSpan EarlyBy = FirstOutTime.TimeOfDay - OutTime.TimeOfDay;  // SecondInTime.TimeOfDay;

        //                                //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added
        //                                if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
        //                                {
        //                                    // EarlyCount Updated by Rajas on 18 MAY 2017
        //                                    int IntCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
        //                                        && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear).Select(a => a.EarlyCount).Max());

        //                                    DailyTransactionObj.EarlyCount = IntCountForEmployee + 1;

        //                                    // Same as Allowed late count. 
        //                                    // Modified by Rajas on 28 APRIL 2017 for getting allowed Early count in a month from rule
        //                                    RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

        //                                    if (RuleForLateCount != null)
        //                                    {
        //                                        int EarlyAllowed = Convert.ToInt32(RuleForLateCount.Formula);

        //                                        // Check allowed late counts in a month
        //                                        // DailyTransactionObj.LateCount Updated by Rajas on 18 MAY 2017
        //                                        if (DailyTransactionObj.EarlyCount > EarlyAllowed)  // (DailyTransactionObj.LateCount > 2)
        //                                        {
        //                                            DailyTransactionObj.Status = "PPAA^";
        //                                            DailyTransactionObj.Remark = "Early";
        //                                        }
        //                                    }

        //                                }

        //                                /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
        //                                /// If employee is Late and Early beyond allowed limit then mark employee absent
        //                                /// Added by Rajas on 18 MAY 2017
        //                                //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
        //                                //{
        //                                //    DailyTransactionObj.Status = "AAAA";
        //                                //    DailyTransactionObj.Remark = "Absent";
        //                                //}
        //                                WetosDB.SaveChanges();
        //                            }
        //                        }
        //                        // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

        //                        #region COMMENTED OLD EARLY GO CODE
        //                        // COMMENTED BY RAJAS ON 28 APRIL 2017

        //                        //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME INSTEAD OF FIRST OUT TIME
        //                        //if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay < ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay
        //                        //   && OutTime.TimeOfDay < FirstOutTime.TimeOfDay) // SecondOutTime.TimeOfDay
        //                        //{
        //                        //    string EarlyTimeString = (FirstOutTime.TimeOfDay - OutTime.TimeOfDay).ToString();  //  SecondOutTime.TimeOfDay
        //                        //    string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

        //                        //    DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
        //                        //    //DailyTransactionObj.Status = "PPAA";
        //                        //    WetosDB.SaveChanges();

        //                        //    //
        //                        //    //WetosDB.SaveChanges();

        //                        //}
        //                        // EARLY GOING LOGIC END
        //                        #endregion
        //                        #endregion
        //                    }

        //                }
        //                #endregion ////
        //            }
        //        }

        //    }
        //    catch (System.Exception)
        //    {

        //        throw;
        //    }


        //    return ReturnStatus;
        //}

        #endregion

        // CO


        /// <summary>
        /// 
        /// </summary>
        /// CODE UPDATED BY SHRADDHA ON 11 AUG 2017
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="EmployeeId"></param>
        /// <returns></returns>
        public static bool COProcessingEx(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, int EmployeeId, ref string ReturnMessage)
        {
            bool ReturnStatus = false;

            #region CODE TO MARK FOR COMP OFF APPLICATION STAUS IF ANY SANCTIONED  COMP OFF IS AVAILABLE

            PostingFlagModel PostingFlagModelObj = new PostingFlagModel();

            try
            {
                for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
                {
                    #region CODE TO MARK COMPOFF

                    // Added by Rajas on 12 AUGUST 2017 START

                    List<CompOffApplication> COObj = WetosDB.CompOffApplications.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                        && a.MarkedAsDelete == 0 && a.StatusId <= 2 && a.EmployeeId == EmployeeId).ToList();

                    if (COObj.Count > 0)
                    {
                        PostingFlagModelObj = new PostingFlagModel();

                        string UpdatedStatus = string.Empty;
                        string NewStatus = string.Empty;
                        PostingFlagModelObj.IsCO = true;   // Added by Rajas on 7 AUGUST 2017

                        foreach (CompOffApplication COCurrentDayObj in COObj)
                        {
                            // Status as per selection of ODTourType
                            // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                            // Updated by Rajas on 5 AUGUST 2017
                            UpdatedStatus = string.Empty;
                            NewStatus = StatusConstants.CO;

                            // Code updated by Rajas on 9 JULY 2017 for Status START
                            for (DateTime CurrentCODate = Convert.ToDateTime(COCurrentDayObj.FromDate); CurrentCODate.Date <= COCurrentDayObj.ToDate; CurrentCODate = CurrentCODate.AddDays(1))
                            {
                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentCODate && a.EmployeeId == COCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsCO in DailyTransactionListForCurrentDate)
                                {

                                    if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayPresentStatus)  // need to verify
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayPresentStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.FromDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2)
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.FromDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.ToDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2) // WHY NOT INT
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.ToDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        //
                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                    && COCurrentDayObj.StatusId == 2)  // Added by Rajas on 21 SEP 2017 START
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus && COCurrentDayObj.StatusId != 2) // Pending need to Verify (TEST , generate case and update code)
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayAbsentStatus;
                                    }
                                    else
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    // Added by Rajas on 21 SEP 2017 END

                                    WetosDB.SaveChanges();
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }

                    // Added by Rajas on 12 AUGUST 2017 END
                    #endregion
                }

                return ReturnStatus = true;
            }
            catch (System.Exception ex)
            {
                ReturnMessage = "Error in_CompOffProcess : " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnStatus;
            }

            #endregion
        }

        /// <summary>
        /// 
        /// </summary>
        /// CODE UPDATED BY SHRADDHA ON 11 AUG 2017
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="EmployeeId"></param>
        /// <returns></returns>
        public static bool CumulativeCOProcessingEx(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, int EmployeeId, ref string ReturnMessage)
        {
            bool ReturnStatus = false;

            #region CODE TO MARK FOR COMP OFF APPLICATION STAUS IF ANY SANCTIONED  COMP OFF IS AVAILABLE

            PostingFlagModel PostingFlagModelObj = new PostingFlagModel();

            try
            {
                for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
                {
                    #region CODE TO MARK COMPOFF

                    // Added by Rajas on 12 AUGUST 2017 START

                    List<CumulativeCompOffApplication> COObj = WetosDB.CumulativeCompOffApplications.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                        && a.MarkedAsDelete == 0 && a.StatusId <= 2 && a.EmployeeId == EmployeeId).ToList();

                    if (COObj.Count > 0)
                    {
                        PostingFlagModelObj = new PostingFlagModel();

                        string UpdatedStatus = string.Empty;
                        string NewStatus = string.Empty;
                        PostingFlagModelObj.IsCO = true;   // Added by Rajas on 7 AUGUST 2017

                        foreach (CumulativeCompOffApplication COCurrentDayObj in COObj)
                        {
                            // Status as per selection of ODTourType
                            // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                            // Updated by Rajas on 5 AUGUST 2017
                            UpdatedStatus = string.Empty;
                            NewStatus = StatusConstants.CO;

                            // Code updated by Rajas on 9 JULY 2017 for Status START
                            for (DateTime CurrentCODate = Convert.ToDateTime(COCurrentDayObj.FromDate); CurrentCODate.Date <= COCurrentDayObj.ToDate; CurrentCODate = CurrentCODate.AddDays(1))
                            {
                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentCODate && a.EmployeeId == COCurrentDayObj.EmployeeId).ToList();
                                foreach (DailyTransaction DailyTransactionAsCO in DailyTransactionListForCurrentDate)
                                {

                                    if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayPresentStatus)  // need to verify
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayPresentStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.FromDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2)
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.FromDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (CurrentCODate == COCurrentDayObj.ToDate && COCurrentDayObj.StatusId == 2)
                                    {
                                        if (COCurrentDayObj.FromDateStatus == 2) // WHY NOT INT
                                        {
                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                        }
                                        else if (COCurrentDayObj.ToDateStatus == 3)
                                        {
                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                        }
                                        else
                                        {
                                            PostingFlagModelObj.IsFullDayCOff = true;
                                        }

                                        //
                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                    && COCurrentDayObj.StatusId == 2)  // Added by Rajas on 21 SEP 2017 START
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    else if (DailyTransactionAsCO.Status.Trim() == StatusConstants.FullDayAbsentStatus && COCurrentDayObj.StatusId != 2) // Pending need to Verify (TEST , generate case and update code)
                                    {
                                        DailyTransactionAsCO.Status = StatusConstants.FullDayAbsentStatus;
                                    }
                                    else
                                    {
                                        PostingFlagModelObj.IsFullDayCOff = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                    }
                                    // Added by Rajas on 21 SEP 2017 END

                                    WetosDB.SaveChanges();
                                }

                            }

                            WetosDB.SaveChanges();
                        }
                    }

                    // Added by Rajas on 12 AUGUST 2017 END
                    #endregion
                }

                return ReturnStatus = true;
            }
            catch (System.Exception ex)
            {
                ReturnMessage = "Error in_CompOffProcess : " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnStatus;
            }

            #endregion
        }


        //CONDONE

        /// <summary>
        /// 
        /// </summary>
        /// <param name="WetosDB"></param>
        /// <param name="fromdate"></param>
        /// <param name="todate"></param>
        /// <param name="EmployeeId"></param>
        /// <returns></returns>
        public static bool CondoneTRNProcessingEx(WetosDBEntities WetosDB, DateTime fromdate, DateTime todate, int EmployeeId)
        {
            bool ReturnStatus = false;

            try
            {
                for (DateTime CurrentDate = fromdate; CurrentDate.Date <= todate; CurrentDate = CurrentDate.AddDays(1))
                {
                    //GET DAILY TRAN LIST FOR CURRENT DATE
                    List<DailyTransaction> DailyTransactionListForCurrentDayList = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate
                        && a.EmployeeId == EmployeeId).ToList();


                    // GET Exception List
                    List<WetosDB.ExceptionEntry> ExceptionList = WetosDB.ExceptionEntries.Where(a => a.ExceptionDate == CurrentDate
                        && a.EmployeeId == EmployeeId).ToList();

                    // GET ALL RULES
                    List<RuleTransaction> AllRuleTransactionList = WetosDB.RuleTransactions.ToList();


                    foreach (DailyTransaction DailyTransactionObj in DailyTransactionListForCurrentDayList) // SP
                    {
                        #region CODE TO CONSIDER CONDONE TRN TABLE ENTRY

                        List<CondoneTrn> CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
                        if (CondoneTrnList.Count > 0)
                        {
                            foreach (CondoneTrn CondoneTrnObj in CondoneTrnList)
                            {
                                int LateEarlyAllowedTimeHour = 0;
                                int LateEarlyAllowedTimeMinute = 0;
                                int LateEarlyAllowedTimeSecond = 0;
                                int LateEarlyAllowedTotalTimeInMinutes = 0;
                                if (!string.IsNullOrEmpty(CondoneTrnObj.LateEarly.Trim()) || !string.IsNullOrWhiteSpace(CondoneTrnObj.LateEarly.Trim()))
                                {
                                    string[] LateEarlyAllowedTimeValue = CondoneTrnObj.LateEarly.Split(':');
                                    LateEarlyAllowedTimeHour = Convert.ToInt32(LateEarlyAllowedTimeValue[0]);
                                    LateEarlyAllowedTimeMinute = Convert.ToInt32(LateEarlyAllowedTimeValue[1]);
                                    LateEarlyAllowedTimeSecond = Convert.ToInt32(LateEarlyAllowedTimeValue[2]);

                                    LateEarlyAllowedTotalTimeInMinutes = (LateEarlyAllowedTimeHour * 60) + LateEarlyAllowedTimeMinute;
                                }


                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).ToList();

                                foreach (DailyTransaction DailyTransactionASCondoneTrn in DailyTransactionListForCurrentDate)
                                {
                                    //COMPARE COMPANY ID AND BRACH ID WITH CONDONE ENTRY
                                    if (DailyTransactionASCondoneTrn.CompanyId == CondoneTrnObj.Company.CompanyId && DailyTransactionASCondoneTrn.BranchId == CondoneTrnObj.Branch.BranchId)
                                    {
                                        //check for late entry based on status AAPP, LateCount,PPPP, Late, Early

                                        if (CondoneTrnObj.Status.Trim().ToUpper() == "LATE" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Late.ToString()))
                                        {
                                            string[] DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToString().Split(' ');
                                            //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                            string[] LateComingTimeValue = DailyTransactionASCondoneTrnLateString[1].Split(':');
                                            int LateComingTimeValueHour = Convert.ToInt32(LateComingTimeValue[0]);
                                            int LateComingTimeValueMinute = Convert.ToInt32(LateComingTimeValue[1]);
                                            int LateComingTimeValueSecond = Convert.ToInt32(LateComingTimeValue[2]);

                                            int LateComingTotalTimeInMinutes = (LateComingTimeValueHour * 60) + LateComingTimeValueMinute;

                                            if (LateComingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                            {
                                                // Updated by Rajas on 29 APRIL 2017
                                                DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP
                                            }


                                            //Latecount should be revert point is open
                                        }
                                        else if (CondoneTrnObj.Status.Trim().ToUpper() == "EARLY" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Early.ToString()))
                                        {
                                            string[] DailyTransactionASCondoneTrnEarlyString = DailyTransactionASCondoneTrn.Early.Value.ToString().Split(' ');
                                            //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                            string[] EarlyGoingTimeValue = DailyTransactionASCondoneTrnEarlyString[1].Split(':');

                                            int EarlyGoingTimeValueHour = Convert.ToInt32(EarlyGoingTimeValue[0]);
                                            int EarlyGoingTimeValueMinute = Convert.ToInt32(EarlyGoingTimeValue[1]);
                                            int EarlyGoingTimeValueSecond = Convert.ToInt32(EarlyGoingTimeValue[2]);

                                            int EarlyGoingTotalTimeInMinutes = (EarlyGoingTimeValueHour * 60) + EarlyGoingTimeValueMinute;

                                            if (EarlyGoingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                            {
                                                // Updated by Rajas on 29 APRIL 2017
                                                DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP
                                            }

                                            //Latecount should be revert point is open
                                        }
                                        WetosDB.SaveChanges();
                                    }
                                }

                            }
                        }


                        #endregion
                    }
                }
            }
            catch (System.Exception)
            {

                throw;
            }


            return ReturnStatus;
        }


        #endregion


        public ActionResult GetAuditTrail()
        {

            var Audit = WetosDB.Users.Select(a => new { Id = a.EmployeeId, Name = a.UserName }).ToList();
            ViewBag.Audit = new SelectList(Audit, "Id", "Name").ToList();

            return View();
        }

        [HttpPost]
        public ActionResult GetAuditTrail(User User, FormCollection fc)
        {
            int UserId = User.EmployeeId;

            DateTime start = Convert.ToDateTime(fc["AddItemdatepicker"]);
            DateTime end = Convert.ToDateTime(fc["AddItemdatepicker1"]);

            return RedirectToAction("AuditLogs", "WetosAdministration", new { FromDate = start, ToDate = end, UserIdSp = UserId });


        }

        public ActionResult AuditLogs(DateTime FromDate, DateTime ToDate, int UserIdSp)
        {

            ViewBag.FromDate = FromDate.ToString("dd-MMM-yyyy");
            ViewBag.ToDate = ToDate.ToString("dd-MMM-yyyy");

            User Username = WetosDB.Users.Where(a => a.EmployeeId == UserIdSp).FirstOrDefault();
            ViewBag.UserName = Username.UserName;
            //************************************Added by Pushkar for Datetime Utility on 6 APRIL 2017********************

            //FromDate = Utility.Utility.GetDateWithWithMidnight(FromDate);
            //ToDate = Utility.Utility.GetDateWithWithMidnight(ToDate);

            //***************************************************END*******************************************************
            List<sp_get_audit_trail_Result> AuditLog = WetosDB.sp_get_audit_trail(UserIdSp, FromDate, ToDate).ToList();


            return View(AuditLog);
        }

        /// <summary>
        /// Import Attendance code for Sandeep sir, for testing
        /// Added by Rajas on 4 AUGUST 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        public bool TestAttendance(string Path, string Company, ref string ImportStatus)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Row number 1 is for headers
            try
            {
                while (rdr.Read())
                {
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                    {
                        DateTime TransactionDate = Convert.ToDateTime(rdr.GetValue(0));
                        EmployeeCode = rdr.GetValue(1).ToString().Trim();
                        Employee EmployeeTblObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();
                        DailyTransaction DailyTransactionObjToAdd = WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeTblObj.EmployeeId && a.TranDate == TransactionDate).FirstOrDefault();
                        bool IsNew = false;

                        if (EmployeeTblObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            if (!rdr.IsDBNull(0) && rdr.GetValue(0).ToString() != "")
                            {
                                if (DailyTransactionObjToAdd == null)
                                {
                                    DailyTransactionObjToAdd = new DailyTransaction();
                                    IsNew = true;
                                }
                                DailyTransactionObjToAdd.TranDate = TransactionDate;
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    DailyTransactionObjToAdd.EmployeeId = EmployeeTblObj.EmployeeId;
                                    string abc = Convert.ToDateTime(rdr.GetValue(3)).ToShortTimeString();
                                    string def = DailyTransactionObjToAdd.TranDate.ToShortDateString();
                                    DailyTransactionObjToAdd.Login = Convert.ToDateTime(def + " " + abc);
                                    DailyTransactionObjToAdd.LogOut = Convert.ToDateTime(DailyTransactionObjToAdd.TranDate.ToShortDateString() + " " + Convert.ToDateTime(rdr.GetValue(4)).ToShortTimeString());
                                    DailyTransactionObjToAdd.ShiftId = rdr.GetValue(2).ToString().Trim();

                                    if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                    {
                                        DailyTransactionObjToAdd.Status = rdr.GetValue(5).ToString().Trim();
                                    }
                                    if (IsNew == true)
                                    {
                                        WetosDB.DailyTransactions.AddObject(DailyTransactionObjToAdd);
                                    }

                                    WetosDB.SaveChanges();

                                    DateTime CurrentDate = DailyTransactionObjToAdd.TranDate;
                                    int EmployeeForProcess = DailyTransactionObjToAdd.EmployeeId;

                                    #region Process attendance

                                    // Added by Rajas on 7 AUGUST 2017
                                    PostingFlagModel PostingFlagModelObj = new PostingFlagModel();

                                    List<string> ErrorInEmployee = new List<string>();  // Added by Rajas on 18 AUGUST 2017

                                    string ReturnMessage = string.Empty;
                                    string UpdatedStatus = string.Empty;
                                    string NewStatus = string.Empty;


                                    #region GET ALL REQUIRED LIST

                                    List<DailyTransaction> DailyTransactionListForCurrentDayList = new List<DailyTransaction>();
                                    List<HoliDay> HolidayList = new List<HoliDay>();
                                    List<DeclaredHoliday> DeclaredHolidayList = new List<DeclaredHoliday>();
                                    List<WetosDB.ExceptionEntry> ExceptionList = new List<WetosDB.ExceptionEntry>();
                                    List<RuleTransaction> AllRuleTransactionList = new List<RuleTransaction>();
                                    List<SP_POSTINGGetRequiredEmployeeDetails_Result> RequiredEmpDetListObj = new List<SP_POSTINGGetRequiredEmployeeDetails_Result>();
                                    List<CondoneTrn> CondoneTrnList = new List<CondoneTrn>();

                                    try
                                    {
                                        // GET DAILY TRAN LIST FOR CURRENT DATE
                                        DailyTransactionListForCurrentDayList = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate
                                            && (string.IsNullOrEmpty(a.Lock) ? false : a.Lock.ToUpper() == "N" ? false : true) == false
                                            && a.EmployeeId == EmployeeForProcess).ToList();

                                        // GET HOLIDAY FOR ALL BRANCHES AND COMPANY
                                        HolidayList = WetosDB.HoliDays.Where(a => a.FromDate == CurrentDate && a.MarkedAsDelete == 0).ToList();

                                        // GET DECLARED HOLIDAY
                                        DeclaredHolidayList = WetosDB.DeclaredHolidays.Where(a => a.HolidayDate == CurrentDate && a.MarkASDelete != 1).ToList();

                                        // GET Exception List
                                        // Updated by Rajas on 17 AUGUST 2017 for sanctioned status only
                                        ExceptionList = WetosDB.ExceptionEntries.Where(a => a.ExceptionDate == CurrentDate
                                            && a.MarkedAsDelete == 0 && a.Status == "2").ToList();

                                        // GET ALL RULES
                                        AllRuleTransactionList = WetosDB.RuleTransactions.ToList();

                                        // GET Active employe list along with required group details 
                                        // Added by Rajas on 4 AUGUST 2017
                                        RequiredEmpDetListObj = WetosDB.SP_POSTINGGetRequiredEmployeeDetails().ToList();

                                        // GET CONDONE ENTRY
                                        CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
                                    }
                                    catch (System.Exception ex)
                                    {
                                        AddAuditTrail("Error in TEST ATTENDANCE :" + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                                        //ErrorMessage = "Error in getting all List due to " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);

                                        //return ReturnStatus = false;
                                    }

                                    #endregion GET ALL REQUIRED LIST

                                    #region PROCESS ATTENDANCE FOR EVERY DAILY TRANSACTION ENTRY

                                    foreach (DailyTransaction DailyTransactionObj in DailyTransactionListForCurrentDayList) // SP
                                    {
                                        try
                                        {
                                            // ADDED BY MSJ ON 17 AUG 2017 START
                                            // IS RECORD LOCKED ?
                                            bool LockedData = string.IsNullOrEmpty(DailyTransactionObj.Lock) ? false : DailyTransactionObj.Lock.ToUpper() == "N" ? false : true;

                                            if (!LockedData) // START OF LOCK CONDITION // ADDED BY MSJ ON 17 AUG 2017
                                            {
                                                // ADDED BY MSJ ON 17 AUG 2017 END

                                                // GET EMP GROUP FOR EMP in Daily transaction
                                                int EmployeeGroupIdObj = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                                                    .Select(a => a.EmployeeGroupId).FirstOrDefault();

                                                // EMP INFO
                                                var EmployeeObj = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                                                // Get companyId
                                                int EmployeeCompanyId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                                                    .Select(a => a.CompanyId).FirstOrDefault();

                                                // Get BranchId
                                                int EmployeeBranchId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                                                    .Select(a => a.BranchId).FirstOrDefault();

                                                // GET List of all rules assigned to Employee Group
                                                List<RuleTransaction> RuleTransactionList = AllRuleTransactionList.Where(a => a.EmployeeGroupId == EmployeeGroupIdObj).ToList();

                                                //SHIFT, Check HoliDay, WeeklyOff, CondoneEntry,CompOff,Adjusment Or Mannual Correction

                                                // Mark shift first
                                                #region  FIND NEAREST SHIFT FROM IN OUT AND MARK LATE / EARLY

                                                DateTime Intime = DailyTransactionObj.Login;
                                                DateTime OutTime = DailyTransactionObj.LogOut;
                                                DailyTransactionObj.WorkingHrs = Convert.ToDateTime(OutTime.TimeOfDay - Intime.TimeOfDay);

                                                // Added by Rajas on 14 JUNE 2017
                                                string Today = Intime.DayOfWeek.ToString();

                                                //Added By Shraddha on 10 JAN 2017 to find the Nearest Time Shift
                                                // WWWW replaced with WOWO by Rajas on 29 APRIL 2017
                                                if (DailyTransactionObj.Status != StatusConstants.FullDayAbsentStatus && DailyTransactionObj.Status != StatusConstants.WeeklyOffStatus
                                                    && DailyTransactionObj.Status != StatusConstants.HoliDayStatus) // ????
                                                {
                                                    // Added by Rajas on 12 APRIL 2017 for Getting SHIFT
                                                    #region MARK SHIFT FROM SHIFT SCHEDULE Otherwise MARK FROM DEFAULT SHIFT

                                                    int CurrentMonth = Intime.Month;
                                                    int CurrentYear = Intime.Year;
                                                    int CurrentDay = Intime.Day;

                                                    // Based on Employee, Year and Month
                                                    ShiftSchedule ShiftScheduleObj = WetosDB.ShiftSchedules.Where(a => a.ShiftMonth == CurrentMonth && a.ShiftYear == CurrentYear
                                                        && a.EmployeeId == EmployeeObj.EmployeeId).FirstOrDefault();

                                                    Shift ShiftObjForCurrentEmployee = new Shift();

                                                    // Added by Rajas on 14 JUNE 2017
                                                    //GlobalSetting GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == "Mark Half Day Shift").FirstOrDefault();

                                                    //ABOVE LINE COMMENTED BY AND BELOW ADDED BY SHALAKA ON 13TH DEC 2017
                                                    GlobalSetting GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText == GlobalSettingsConstant.MarkHalfDayShift).FirstOrDefault();

                                                    // Added by Rajas on 8 AUGUST 2017 START
                                                    string ShiftDay = Convert.ToString(DailyTransactionObj.TranDate.DayOfWeek).ToUpper().Trim();
                                                    bool IsHalfDay = false;  // IsSaturday

                                                    // Added by Rajas on 16 AUGUST 2017 for marking Half Day shift as per Employee table value
                                                    string WeeklyHalfDay = EmployeeObj.WeeklyHalfDay == null ? string.Empty : EmployeeObj.WeeklyHalfDay.ToUpper().Trim();

                                                    // Updated by Rajas on 16 AUGUST 2017
                                                    if (ShiftDay == WeeklyHalfDay) // MOVE TO GLOBAL SETTING ---> if (ShiftDay == "SATURDAY")
                                                    {
                                                        IsHalfDay = true;    // IsSaturday
                                                    }
                                                    // Added by Rajas on 8 AUGUST 2017 END

                                                    #region CODE TO GET ASSIGNED SHIFT FOR CURRENT DAY FOR EACH EMPLOYEE
                                                    //CODE ADDED BY SHRADDHA ON 19 MAY 2017 TO GET ASSIGNED SHIFT PATTERNS FOR PERTICULAR EMPLOYEE IN PERTICULAR MONTH AND YEAR START

                                                    //GET LIST OF ASSIGNED SHIFT PATTERNS FOR PERTICULAR EMPLOYEE IN PERTICULAR MONTH AND YEAR 

                                                    // Shift pattern rule to assign shift data flow
                                                    List<ShiftSchedulePattern> ShiftSchedulePatternList = WetosDB.ShiftSchedulePatterns.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                        && a.ShiftMonth == DailyTransactionObj.TranDate.Month && a.ShiftYear == DailyTransactionObj.TranDate.Year).ToList();

                                                    if (ShiftSchedulePatternList != null)
                                                    {
                                                        List<ShiftSchedulePattern> ShiftSchedulePatternListForPerticularDateRange = ShiftSchedulePatternList.Where(a => a.EffectiveStartDate <= DailyTransactionObj.TranDate
                                                            && a.EffectiveEndDate >= DailyTransactionObj.TranDate).ToList();

                                                        if (ShiftSchedulePatternListForPerticularDateRange.Count > 0)
                                                        {
                                                            foreach (ShiftSchedulePattern ShiftSchedulePatternObjForPerticularDateRange in ShiftSchedulePatternListForPerticularDateRange)
                                                            {
                                                                int y = DailyTransactionObj.TranDate.Day;

                                                                string command = string.Format(@"select Day{0} from ShiftSchedulePattern where EmployeeId={1} and EffectiveStartDate<='{2}/{3}/{4} {5}' and EffectiveEndDate>='{2}/{3}/{4} {5}' and companyId={6} and branchid={7};"
                                                                  , y, DailyTransactionObj.EmployeeId, DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, "00:00", DailyTransactionObj.CompanyId, DailyTransactionObj.BranchId);
                                                                string Shift = WetosDB.ExecuteStoreQuery<string>(command, "").FirstOrDefault();
                                                                DailyTransactionObj.ShiftId = Shift;

                                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == Shift).FirstOrDefault();

                                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                                                    && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
                                                                     && a.FirstInTime == ShiftObjForCurrentEmployee.FirstInTime).FirstOrDefault();

                                                                WetosDB.SaveChanges();

                                                            }
                                                        }
                                                        else if (GlobalSettingObj != null) // Added by Rajas on 17 JUNE 2017
                                                        {
                                                            // Get Global seeting value and saturday 
                                                            if (GlobalSettingObj.SettingValue.Trim() == "1" && IsHalfDay == true)
                                                            {
                                                                // Mark Half Day shift with ShiftCode H 
                                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode.ToUpper().Trim() == StatusConstants.HalfDayShift).FirstOrDefault();

                                                                DailyTransactionObj.ShiftId = StatusConstants.HalfDayShift;  // Added by Rajas on 16 AUGUST 2017
                                                            }
                                                            else
                                                            {
                                                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift).FirstOrDefault();
                                                            }

                                                            WetosDB.SaveChanges();  // Added by Rajas on 16 AUGUST 2017

                                                            if (ShiftObjForCurrentEmployee != null)
                                                            {
                                                                DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                                                WetosDB.SaveChanges();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            #region GET SHIFT  FROM CLOSEST TIME

                                                            DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                                                && a.BranchId == EmployeeBranchId
                                                                //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                                                                //&& a.ShiftCode == EmployeeObj.DefaultShift
                                                                ).Select(a => a.FirstInTime).ToArray();

                                                            long min = long.MaxValue;

                                                            DateTime ClosestTime = new DateTime();

                                                            foreach (DateTime CurrentDateTime in FirstInTimeArray)
                                                            {
                                                                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
                                                                long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
                                                                if (TempDIff < min)
                                                                {
                                                                    min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
                                                                    ClosestTime = CurrentDateTime;
                                                                }
                                                                // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
                                                            }

                                                            ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                                                && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
                                                                 && a.FirstInTime == ClosestTime).FirstOrDefault();

                                                            if (ShiftObjForCurrentEmployee != null)
                                                            {
                                                                DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                                                WetosDB.SaveChanges();
                                                            }

                                                            #endregion // COMMON CODE
                                                        }
                                                    }

                                                    else
                                                    {
                                                        #region GET SHIFT  FROM CLOSEST TIME
                                                        DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                                            && a.BranchId == EmployeeBranchId
                                                            //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                                                            //&& a.ShiftCode == EmployeeObj.DefaultShift
                                                            ).Select(a => a.FirstInTime).ToArray();

                                                        long min = long.MaxValue;

                                                        DateTime ClosestTime = new DateTime();

                                                        foreach (DateTime CurrentDateTime in FirstInTimeArray)
                                                        {
                                                            // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
                                                            long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
                                                            if (TempDIff < min)
                                                            {
                                                                min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
                                                                ClosestTime = CurrentDateTime;
                                                            }
                                                            // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
                                                        }

                                                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                                            && a.BranchId == EmployeeBranchId && a.BranchId == EmployeeBranchId
                                                             && a.FirstInTime == ClosestTime).FirstOrDefault();

                                                        if (ShiftObjForCurrentEmployee != null)
                                                        {
                                                            DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                                            WetosDB.SaveChanges();
                                                        }

                                                        #endregion
                                                    }

                                                    #endregion

                                                    #endregion

                                                    #region LATE/EARLY Logic

                                                    /// IsLateCountToBeIncremented YES/NO
                                                    /// Flag added by Rajas on 28 APRIL 2017
                                                    bool IsLateCountToBeIncremented = true;

                                                    /// IsEarlyCountToBeIncremented YES/NO
                                                    /// Flag added by Rajas on 28 APRIL 2017
                                                    bool IsEarlyCountToBeIncremented = true;

                                                    bool IsUpdateStatus = false;  // Added by Rajas on 4 AUGUST 2017

                                                    // Initialise GlobalSettingObj
                                                    GlobalSettingObj = new GlobalSetting();
                                                    //GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == "Is Cont Late Deduction").FirstOrDefault();

                                                    //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
                                                    GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == GlobalSettingsConstant.IsContLateDeduction).FirstOrDefault();

                                                    #region LOGIC FOR LATE MARK AND SHIFT

                                                    ReturnMessage = string.Empty;
                                                    UpdatedStatus = string.Empty;
                                                    NewStatus = string.Empty;

                                                    // Rest all flags
                                                    PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

                                                    // LOGIC FOR LATE MARK AND SHIFT
                                                    if (ShiftObjForCurrentEmployee == null)
                                                    {
                                                        ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
                                                    }

                                                    DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);
                                                    DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);

                                                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
                                                    DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
                                                    DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);

                                                    // LATE COMING GRACE TIME FROM RULE 5
                                                    //int LCGraceTimeMinutes = 00;

                                                    if (RuleTransactionList != null)
                                                    {
                                                        // 5 - allowed late comming min
                                                        string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

                                                        if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
                                                        {
                                                            string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

                                                            //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
                                                            //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
                                                        }

                                                        /// Added by Rajas on 28 APRIL 2017 START
                                                        /// To check GraceLateAllowed limit

                                                        // 4 - Grace late allowed limit
                                                        string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

                                                        DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

                                                        TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
                                                        /// Added by Rajas on 28 APRIL 2017 END

                                                        //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
                                                        //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
                                                        // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

                                                        // LATE COMING LOGIC START
                                                        // int LateMarkCount = 1;
                                                        // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
                                                        if (Intime.TimeOfDay > FirstInTime.TimeOfDay)  // SecondInTime.TimeOfDay
                                                        {
                                                            //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

                                                            // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
                                                            string LateTimeString = (Intime.TimeOfDay - FirstInTime.TimeOfDay).ToString();  // SecondInTime.TimeOfDay
                                                            //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
                                                            string Latestring = Intime.ToShortDateString() + " " + LateTimeString;

                                                            // Added by Rajas on 28 APRIL 2017 START
                                                            // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
                                                            DateTime LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr);
                                                            DateTime CalculatedLateTime = Convert.ToDateTime(LateTimeString);

                                                            // Save original attendance status
                                                            // Added by Rajas on 8 AUGUST 2017
                                                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                                            if (CalculatedLateTime > GraceLateAllowedMin)
                                                            {
                                                                //// Added by Rajas on 29 APRIL 2017
                                                                //DailyTransactionObj.Status = "PPPP^";

                                                                // Updated by Rajas on 8 AUGUST 2017 START
                                                                PostingFlagModelObj.IsLate = true;

                                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                DailyTransactionObj.Status = UpdatedStatus;
                                                                // Updated by Rajas on 8 AUGUST 2017 END
                                                            }

                                                            if (CalculatedLateTime > LateAllowedLimit)
                                                            {
                                                                //DailyTransactionObj.Status = "AAPP^";  // AAPP
                                                                DailyTransactionObj.Remark = "Late";

                                                                // Updated by Rajas on 8 AUGUST 2017 START
                                                                PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming = true;

                                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                DailyTransactionObj.Status = UpdatedStatus;
                                                                // Updated by Rajas on 8 AUGUST 2017 END

                                                                /// NOTE:
                                                                /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
                                                                /// If Employee is late beyond late allowed limit then deduct Half day directly
                                                                /// In this case don't update late count as action already taken for late employee.
                                                                IsLateCountToBeIncremented = false;
                                                            }
                                                            // Added by Rajas on 28 APRIL 2017 END

                                                            // late by min
                                                            DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
                                                            //WetosDB.SaveChanges();

                                                            int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                                                            int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                                            int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                                            // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
                                                            TimeSpan LateBy = Intime.TimeOfDay - FirstInTime.TimeOfDay; // SecondInTime.TimeOfDay;

                                                            // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
                                                            if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
                                                            {
                                                                //int TotalLateCountForEmployeeTillDate = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                                                                //   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.LateCount != null).Count());

                                                                int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                                                                    && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear).Select(a => a.LateCount).Max());

                                                                // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
                                                                RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

                                                                if (RuleForLateCount != null)
                                                                {
                                                                    int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

                                                                    if (MaxLateCountForEmployee == 0)
                                                                    {
                                                                        DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
                                                                    }

                                                                    // Added by Rajas on 12 AUGUST 2017 
                                                                    // Global setting value base deduction 
                                                                    if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                                                    {
                                                                        if (DailyTransactionObj.LateCount % LateAllowed == 0)
                                                                        {
                                                                            DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                                            DailyTransactionObj.Remark = "Late";
                                                                        }
                                                                    }
                                                                    else   // Deduct half day after every allowed late count 
                                                                    {
                                                                        if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
                                                                        {
                                                                            DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                                            DailyTransactionObj.Remark = "Late";
                                                                        }
                                                                    }

                                                                }
                                                                //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END

                                                                WetosDB.SaveChanges();

                                                                IsUpdateStatus = true;

                                                                //// Added by Rajas on 5 AUGUST 2017
                                                                //PreviousLateCount = DailyTransactionObj.LateCount == null ? 0 : DailyTransactionObj.LateCount.Value;
                                                            }
                                                            else  // Added by Rajas on 5 AUGUST 2017
                                                            {
                                                                //// Employee is Not Late, then
                                                                //DailyTransactionObj.LateCount = PreviousLateCount;
                                                                //WetosDB.SaveChanges();
                                                            }


                                                        }
                                                    }
                                                    // LATE COMING LOGIC END
                                                    #endregion

                                                    if (DailyTransactionObj.WorkingHrs != null)
                                                    {
                                                        #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

                                                        // What will happen in case of night shift

                                                        //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
                                                        if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
                                                        {
                                                            //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
                                                            //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
                                                            if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
                                                             && DailyTransactionObj.WorkingHrs.Value.Second == 0)
                                                            {
                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
                                                                WetosDB.SaveChanges();
                                                            }
                                                        }
                                                        //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
                                                        #endregion

                                                        #region  EARLY GOING LOGIC
                                                        // EARLY GOING LOGIC START
                                                        //EARLY GOING 

                                                        // Logic need to be updated as per late count

                                                        // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

                                                        ReturnMessage = string.Empty;
                                                        UpdatedStatus = string.Empty;
                                                        NewStatus = string.Empty;

                                                        // Rest all flags
                                                        PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

                                                        if (RuleTransactionList != null)
                                                        {
                                                            // 6 - allowed Early going min
                                                            string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

                                                            if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
                                                            {
                                                                string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
                                                            }

                                                            /// Added by Rajas on 28 APRIL 2017 START
                                                            /// To check GraceLateAllowed limit

                                                            // 3 - Grace early allowed limit
                                                            string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();

                                                            DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

                                                            TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
                                                            /// Added by Rajas on 28 APRIL 2017 END

                                                            if (OutTime.TimeOfDay < FirstOutTime.TimeOfDay)
                                                            {
                                                                string EarlyTimeString = (FirstOutTime.TimeOfDay - OutTime.TimeOfDay).ToString();

                                                                string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

                                                                // Added by Rajas on 28 APRIL 2017 START
                                                                // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
                                                                DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
                                                                DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

                                                                // Save original attendance status
                                                                // Added by Rajas on 8 AUGUST 2017
                                                                DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                                                if (CalculatedEarlyTime > GraceEarlyAllowedMin)
                                                                {
                                                                    // Added by Rajas on 29 APRIL 2017
                                                                    if (!IsUpdateStatus)
                                                                    {
                                                                        // Updated by Rajas on 8 AUGUST 2017 START
                                                                        PostingFlagModelObj.IsLate = true;

                                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                        DailyTransactionObj.Status = UpdatedStatus;
                                                                        // Updated by Rajas on 8 AUGUST 2017 END
                                                                    }
                                                                }

                                                                if (CalculatedEarlyTime > EarlyAllowedLimit)
                                                                {
                                                                    if (!IsUpdateStatus)
                                                                    {
                                                                        // Updated by Rajas on 8 AUGUST 2017 START
                                                                        PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing = true;

                                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                        DailyTransactionObj.Status = UpdatedStatus;
                                                                        // Updated by Rajas on 8 AUGUST 2017 END
                                                                    }

                                                                    DailyTransactionObj.Remark = "Early";

                                                                    /// NOTE:
                                                                    /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
                                                                    /// If Employee left early beyond early allowed limit then deduct Half day directly
                                                                    /// In this case don't update late count as action already taken for late employee.
                                                                    IsEarlyCountToBeIncremented = false;
                                                                }
                                                                // Added by Rajas on 28 APRIL 2017 END

                                                                // Early by min
                                                                DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
                                                                //WetosDB.SaveChanges();

                                                                int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                                                                int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                                                int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                                                // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
                                                                TimeSpan EarlyBy = FirstOutTime.TimeOfDay - OutTime.TimeOfDay;  // SecondInTime.TimeOfDay;

                                                                //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added
                                                                if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
                                                                {
                                                                    // EarlyCount Updated by Rajas on 18 MAY 2017
                                                                    int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                                                                     && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear).Select(a => a.EarlyCount).Max());

                                                                    // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
                                                                    RuleTransaction RuleForEarlyCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

                                                                    if (RuleForEarlyCount != null)
                                                                    {
                                                                        int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

                                                                        if (MaxearlyCountForEmployee == 0)
                                                                        {
                                                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                                        }

                                                                        else
                                                                        {
                                                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                                                        }

                                                                        // Added by Rajas on 12 AUGUST 2017 
                                                                        // Global setting value base deduction 
                                                                        if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count limit
                                                                        {
                                                                            if (DailyTransactionObj.EarlyCount % EarlyAllowed == 0)
                                                                            {
                                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^"; //"PPAA^";
                                                                                DailyTransactionObj.Remark = "Early";
                                                                            }
                                                                        }
                                                                        else   // Deduct half day after every allowed early count limit 
                                                                        {
                                                                            if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.EarlyCount > EarlyAllowed)
                                                                            {
                                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^"; //"PPAA^";
                                                                                DailyTransactionObj.Remark = "Early";
                                                                            }
                                                                        }

                                                                    }

                                                                    WetosDB.SaveChanges();

                                                                    //// Added by Rajas on 5 AUGUST 2017
                                                                    //PrevEarlyCount = DailyTransactionObj.EarlyCount == null ? 0 : DailyTransactionObj.EarlyCount.Value;

                                                                }
                                                                else  // Added by Rajas on 5 AUGUST 2017
                                                                {
                                                                    //// Employee is Not left early, then
                                                                    //DailyTransactionObj.EarlyCount = PrevEarlyCount;
                                                                    //WetosDB.SaveChanges();
                                                                }

                                                                /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
                                                                /// If employee is Late and Early beyond allowed limit then mark employee absent
                                                                /// Added by Rajas on 18 MAY 2017
                                                                //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
                                                                //{
                                                                //    DailyTransactionObj.Status = "AAAA";
                                                                //    DailyTransactionObj.Remark = "Absent";
                                                                //}


                                                            }
                                                        }
                                                        // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

                                                        #endregion
                                                    }
                                                    #endregion

                                                }
                                                #endregion

                                                #region CODE TO CONSIDER CONDONE TRN TABLE ENTRY

                                                ReturnMessage = string.Empty;
                                                UpdatedStatus = string.Empty;
                                                NewStatus = string.Empty;

                                                //List<CondoneTrn> CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
                                                if (CondoneTrnList.Count > 0)
                                                {
                                                    CondoneTrn CondoneTrnObj = CondoneTrnList.Where(a => a.Company.CompanyId == EmployeeCompanyId && a.Branch.BranchId == EmployeeBranchId).FirstOrDefault();

                                                    if (CondoneTrnObj != null)
                                                    {
                                                        int LateEarlyAllowedTimeHour = 0;
                                                        int LateEarlyAllowedTimeMinute = 0;
                                                        int LateEarlyAllowedTimeSecond = 0;
                                                        int LateEarlyAllowedTotalTimeInMinutes = 0;

                                                        if (!string.IsNullOrEmpty(CondoneTrnObj.LateEarly.Trim()) || !string.IsNullOrWhiteSpace(CondoneTrnObj.LateEarly.Trim()))
                                                        {
                                                            string[] LateEarlyAllowedTimeValue = CondoneTrnObj.LateEarly.Split(':');
                                                            LateEarlyAllowedTimeHour = Convert.ToInt32(LateEarlyAllowedTimeValue[0]);
                                                            LateEarlyAllowedTimeMinute = Convert.ToInt32(LateEarlyAllowedTimeValue[1]);
                                                            LateEarlyAllowedTimeSecond = Convert.ToInt32(LateEarlyAllowedTimeValue[2]);

                                                            LateEarlyAllowedTotalTimeInMinutes = (LateEarlyAllowedTimeHour * 60) + LateEarlyAllowedTimeMinute;
                                                        }

                                                        // List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).ToList();

                                                        DailyTransaction DailyTransactionASCondoneTrn = DailyTransactionObj;

                                                        //foreach (DailyTransaction DailyTransactionASCondoneTrn in DailyTransactionListForCurrentDate)
                                                        {
                                                            //COMPARE COMPANY ID AND BRACH ID WITH CONDONE ENTRY
                                                            //if (DailyTransactionASCondoneTrn.CompanyId == CondoneTrnObj.CompanyId && DailyTransactionASCondoneTrn.BranchId == CondoneTrnObj.BranchId)
                                                            {
                                                                //check for late entry based on status AAPP, LateCount,PPPP, Late, Early

                                                                if (CondoneTrnObj.Status.Trim().ToUpper() == "LATE" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Late.ToString()))
                                                                {
                                                                    string[] DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToString().Split(' ');
                                                                    //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                                                    string[] LateComingTimeValue = DailyTransactionASCondoneTrnLateString[1].Split(':');
                                                                    int LateComingTimeValueHour = Convert.ToInt32(LateComingTimeValue[0]);
                                                                    int LateComingTimeValueMinute = Convert.ToInt32(LateComingTimeValue[1]);
                                                                    int LateComingTimeValueSecond = Convert.ToInt32(LateComingTimeValue[2]);

                                                                    int LateComingTotalTimeInMinutes = (LateComingTimeValueHour * 60) + LateComingTimeValueMinute;

                                                                    if (LateComingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                                                    {
                                                                        //// Updated by Rajas on 29 APRIL 2017
                                                                        //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

                                                                        // Updated by Rajas on 8 AUGUST 2017 START
                                                                        PostingFlagModelObj.IsCondone = true;

                                                                        // UPDATE STATUS 
                                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                        // Updated by Rajas on 8 AUGUST 2017 END
                                                                    }


                                                                    //Latecount should be revert point is open
                                                                }
                                                                else if (CondoneTrnObj.Status.Trim().ToUpper() == "EARLY" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Early.ToString()))
                                                                {
                                                                    string[] DailyTransactionASCondoneTrnEarlyString = DailyTransactionASCondoneTrn.Early.Value.ToString().Split(' ');
                                                                    //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                                                    string[] EarlyGoingTimeValue = DailyTransactionASCondoneTrnEarlyString[1].Split(':');

                                                                    int EarlyGoingTimeValueHour = Convert.ToInt32(EarlyGoingTimeValue[0]);
                                                                    int EarlyGoingTimeValueMinute = Convert.ToInt32(EarlyGoingTimeValue[1]);
                                                                    int EarlyGoingTimeValueSecond = Convert.ToInt32(EarlyGoingTimeValue[2]);

                                                                    int EarlyGoingTotalTimeInMinutes = (EarlyGoingTimeValueHour * 60) + EarlyGoingTimeValueMinute;

                                                                    if (EarlyGoingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                                                    {
                                                                        //// Updated by Rajas on 29 APRIL 2017
                                                                        //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

                                                                        // Updated by Rajas on 8 AUGUST 2017 START
                                                                        PostingFlagModelObj.IsCondone = true;

                                                                        // UPDATE STATUS 
                                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                        // Updated by Rajas on 8 AUGUST 2017 END
                                                                    }

                                                                    //Latecount should be revert point is open
                                                                }
                                                                WetosDB.SaveChanges();
                                                            }
                                                        }

                                                    }
                                                }


                                                #endregion

                                                #region MARK HOLIDAY

                                                // Split first half, second half and 5th character
                                                // Check Holiday present rules???
                                                // On Holiday shift is marked

                                                ReturnMessage = string.Empty;
                                                UpdatedStatus = string.Empty;
                                                NewStatus = string.Empty;
                                                PostingFlagModelObj = new PostingFlagModel();

                                                if (HolidayList.Count > 0)
                                                {
                                                    // ADDED BY MSJ ON 08 AUG 2017 START
                                                    if (HolidayList.Where(a => a.CompanyId == EmployeeCompanyId && a.Branchid == EmployeeBranchId).FirstOrDefault() != null)
                                                    {
                                                        if (DailyTransactionObj.Status == StatusConstants.FullDayAbsentStatus)
                                                        {
                                                            PostingFlagModelObj.IsHoliDay = true;

                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                        }
                                                        else
                                                        {
                                                            // Logic pending if any status other marked 
                                                        }

                                                        /// Mark Holiday shift in DailyTransaction
                                                        /// Added by Rajas on 4 JULY 2017
                                                        DailyTransactionObj.ShiftId = StatusConstants.HolidayShift;

                                                        WetosDB.SaveChanges(); //?????
                                                    }
                                                    // ADDED BY MSJ ON 08 AUG 2017 END
                                                }

                                                #endregion

                                                #region MARK DECLARED HOLIDAY

                                                ReturnMessage = string.Empty;
                                                UpdatedStatus = string.Empty;
                                                NewStatus = string.Empty;
                                                PostingFlagModelObj = new PostingFlagModel();

                                                if (DeclaredHolidayList.Count > 0)
                                                {
                                                    // Added by Rajas on 8 AUGUST 2017 START
                                                    // Declared holiday table does not have CompanyId reference in table
                                                    if (DeclaredHolidayList.Where(a => a.Branch.BranchId == EmployeeBranchId).FirstOrDefault() != null)
                                                    {
                                                        if (DailyTransactionObj.Status == StatusConstants.FullDayAbsentStatus)
                                                        {
                                                            PostingFlagModelObj.IsHoliDay = true;

                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                        }
                                                        else
                                                        {
                                                            // Logic pending if any status other marked 
                                                        }

                                                        /// Mark Holiday shift in DailyTransaction
                                                        /// Added by Rajas on 4 JULY 2017
                                                        DailyTransactionObj.ShiftId = StatusConstants.HolidayShift;

                                                        WetosDB.SaveChanges(); //?????
                                                    }
                                                    // Added by Rajas on 8 AUGUST 2017 END
                                                }
                                                #endregion

                                                #region MARK WeeklyOff1 AND WEEKOFF2 DAY FROM DATABASE (FIRST, SECOND, THIRD, FOURTH, FIFTH) AND MARK AS WEEKOFF

                                                string currentDayStr = CurrentDate.DayOfWeek.ToString();
                                                //CODE UNCOMMENTED BY SHRADDHA ON 07 MARCH 2017 START

                                                bool IsWeeklyOff = false;  // Added by Rajas on 4 KULY 2017

                                                ReturnMessage = string.Empty;
                                                UpdatedStatus = string.Empty;
                                                NewStatus = string.Empty;
                                                PostingFlagModelObj = new PostingFlagModel();

                                                if (EmployeeObj.WeeklyOff1.ToUpper() == currentDayStr.ToUpper())
                                                {
                                                    PostingFlagModelObj.IsWeekOff = true;

                                                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                    DailyTransactionObj.Status = UpdatedStatus;

                                                    DailyTransactionObj.ShiftId = "WO";

                                                    WetosDB.SaveChanges();
                                                }
                                                else if (!string.IsNullOrEmpty(EmployeeObj.WeeklyOff2)) // #region MARK WeeklyOff2 AS WEEKOFF
                                                {
                                                    #region WEEKLY OFF 2

                                                    if (EmployeeObj.WeeklyOff2.ToUpper() == currentDayStr.ToUpper())
                                                    {
                                                        string ReturnStatusMsg = string.Empty;

                                                        int WeekNumber = GetWeekOfMonth(CurrentDate);

                                                        if (EmployeeObj.First == true && WeekNumber == 1)
                                                        {
                                                            #region WO1

                                                            // Updated by Rajas on 8 AUGUST 2017 START
                                                            PostingFlagModelObj.IsWeekOff = true;

                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            // Check other status present on week off.....PENDING (TEST, GENERATE CASE AND UPDATE CODE)
                                                            //else
                                                            //{
                                                            //    DailyTransactionObj.Status = "WPWP";  // WOWO
                                                            //    if (FullDayRuleHourInt > 0 && HalfDayRuleHourInt > 0)
                                                            //    {
                                                            //        MarkWeekOff2DayPresentEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                                                            //    }
                                                            //}

                                                            IsWeeklyOff = true;

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                            // Updated by Rajas on 8 AUGUST 2017 END

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Second == true && WeekNumber == 2)
                                                        {
                                                            #region WO2

                                                            // Updated by Rajas on 8 AUGUST 2017 START
                                                            PostingFlagModelObj.IsWeekOff = true;

                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            // Check other status present on week off.....PENDING (TEST, GENERATE CASE AND UPDATE CODE)
                                                            //else
                                                            //{
                                                            //    DailyTransactionObj.Status = "WPWP";  // WOWO
                                                            //    if (FullDayRuleHourInt > 0 && HalfDayRuleHourInt > 0)
                                                            //    {
                                                            //        MarkWeekOff2DayPresentEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                                                            //    }
                                                            //}

                                                            IsWeeklyOff = true;

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                            // Updated by Rajas on 8 AUGUST 2017 END

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Third == true && WeekNumber == 3)
                                                        {
                                                            #region WO3

                                                            // Updated by Rajas on 8 AUGUST 2017 START
                                                            PostingFlagModelObj.IsWeekOff = true;

                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            // Check other status present on week off.....PENDING (TEST, GENERATE CASE AND UPDATE CODE)
                                                            //else
                                                            //{
                                                            //    DailyTransactionObj.Status = "WPWP";  // WOWO
                                                            //    if (FullDayRuleHourInt > 0 && HalfDayRuleHourInt > 0)
                                                            //    {
                                                            //        MarkWeekOff2DayPresentEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                                                            //    }
                                                            //}

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                            // Updated by Rajas on 8 AUGUST 2017 END

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Fourth == true && WeekNumber == 4)
                                                        {
                                                            #region WO4

                                                            // Updated by Rajas on 8 AUGUST 2017 START
                                                            PostingFlagModelObj.IsWeekOff = true;

                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            // Check other status present on week off.....PENDING (TEST, GENERATE CASE AND UPDATE CODE)
                                                            //else
                                                            //{
                                                            //    DailyTransactionObj.Status = "WPWP";  // WOWO
                                                            //    if (FullDayRuleHourInt > 0 && HalfDayRuleHourInt > 0)
                                                            //    {
                                                            //        MarkWeekOff2DayPresentEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                                                            //    }
                                                            //}

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                            // Updated by Rajas on 8 AUGUST 2017 END

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }
                                                        else if (EmployeeObj.Fifth == true && WeekNumber == 5)
                                                        {
                                                            #region WO5

                                                            // Updated by Rajas on 8 AUGUST 2017 START
                                                            PostingFlagModelObj.IsWeekOff = true;

                                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                            // Check other status present on week off.....PENDING (TEST, GENERATE CASE AND UPDATE CODE)
                                                            //else
                                                            //{
                                                            //    DailyTransactionObj.Status = "WPWP";  // WOWO
                                                            //    if (FullDayRuleHourInt > 0 && HalfDayRuleHourInt > 0)
                                                            //    {
                                                            //        MarkWeekOff2DayPresentEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                                                            //    }
                                                            //}

                                                            DailyTransactionObj.Status = UpdatedStatus;
                                                            // Updated by Rajas on 8 AUGUST 2017 END

                                                            IsWeeklyOff = true;

                                                            #endregion
                                                        }

                                                        /// Mark WO shift in DailyTransaction
                                                        /// Added by Rajas on 4 JULY 2017
                                                        if (IsWeeklyOff == true)
                                                        {
                                                            DailyTransactionObj.ShiftId = "WO";
                                                        }

                                                        WetosDB.SaveChanges();
                                                    }

                                                    #endregion
                                                }

                                                WetosDB.SaveChanges();

                                                #endregion

                                                #region CODE FOR COMP OFF ADD INTO COMP OFF TABLE FOR EXTRA HOURS BASED ON RULE

                                                RuleTransaction RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == 9).FirstOrDefault(); // 9 - COMP ALLOWED ?
                                                RuleTransaction RTObjForCompOffFullDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault(); // IF COMPOFF ALLOWED FULL DAY LIMIT

                                                RuleTransaction RTObjForCompOffHalfDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 11).FirstOrDefault(); // IF COMPOFF ALLOWED HALF DAY LIMIT

                                                int FullDayRuleHourInt = 0;
                                                int HalfDayRuleHourInt = 0;

                                                if (RuleTransactionObj != null) // RULE 9 PRESENT
                                                {
                                                    if (RuleTransactionObj.Formula.ToUpper().Trim() == "TRUE")
                                                    {
                                                        string ReturnStatusMsg = string.Empty;

                                                        // MIN TIME FOR FULL DAY COMP OFF
                                                        if (RTObjForCompOffFullDayLimitValue != null)
                                                        {
                                                            // 08:00:00
                                                            string[] FullDayRuleSplitValue = RTObjForCompOffFullDayLimitValue.Formula.Split(':');
                                                            FullDayRuleHourInt = Convert.ToInt32(FullDayRuleSplitValue[0]); // Minutes missing

                                                        }

                                                        // MIN TIME FOR HALF DAY COMP OFF
                                                        if (RTObjForCompOffHalfDayLimitValue != null)
                                                        {
                                                            string[] HalfDayRuleSplitValue = RTObjForCompOffHalfDayLimitValue.Formula.Split(':');
                                                            HalfDayRuleHourInt = Convert.ToInt32(HalfDayRuleSplitValue[0]); // Minutes missing
                                                        }

                                                        if (FullDayRuleHourInt > 0 && HalfDayRuleHourInt > 0)
                                                        {
                                                            // STATIC FUNCTION
                                                            MarkCompOffForExtraHrsEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                                                        }
                                                    }
                                                    //else
                                                    //{
                                                    //    Error("Comp Off is not Allowed for Employee Group : " + EmployeeGroupName);

                                                    //}

                                                }
                                                #endregion

                                                #region MARK EXCEPTION ENTRY (Why List ?)

                                                if (ExceptionList.Count > 0)
                                                {
                                                    // Removed List obj for exception
                                                    // Updated by Rajas on 4 AUGUST 2017
                                                    //var ExceptionListForSelectedEmployees = ExceptionList.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                                                    List<WetosDB.ExceptionEntry> ExceptionListForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).ToList();

                                                    if (ExceptionListForSelectedEmployees.Count > 0)
                                                    {
                                                        foreach (WetosDB.ExceptionEntry ExceptionObjForSelectedEmployee in ExceptionListForSelectedEmployees)
                                                        {
                                                            DailyTransactionObj.Login = ExceptionObjForSelectedEmployee.LoginTime;
                                                            DailyTransactionObj.LogOut = ExceptionObjForSelectedEmployee.LogOutTime;

                                                            //DailyTransactionObj.Status ?
                                                            string WorkingHrsString = (ExceptionObjForSelectedEmployee.LogOutTime.TimeOfDay - ExceptionObjForSelectedEmployee.LoginTime.TimeOfDay).ToString();

                                                            DailyTransactionObj.WorkingHrs = Convert.ToDateTime(WorkingHrsString);
                                                            WetosDB.SaveChanges();
                                                        }
                                                    }
                                                }
                                                #endregion

                                                WetosDB.SaveChanges(); //?????

                                            }  // END OF LOCK CONDITION // ADDED BY MSJ ON 17 AUG 2017
                                        }
                                        catch (System.Exception ex)
                                        {
                                            AddAuditTrail("TEST ATTENDANCE :" + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                                            // Added by Rajas on 18 AUGUST 2017
                                            // Process will continue ? How to track actual save and update audit trail entry?
                                            ErrorInEmployee.Add(DailyTransactionObj.EmployeeId.ToString());
                                        }

                                    }

                                    #endregion

                                    #region CODE TO MARK FOR LEAVE APPLICATION STATUS IF ANY SANCTIONED LEAVE IS AVAILABLE

                                    //ADDED BY SHRADDHA ON 04 JAN 2017 FOR LEAVE APPLICATION STAUS
                                    // Updated by Rajas on 10 AUGUST 2017 for Delete and StatusId
                                    List<LeaveApplication> LeaveApplicationObj = WetosDB.LeaveApplications.Where(a => a.FromDate == CurrentDate
                                        && a.StatusId == 2 && a.MarkedAsDelete == 0).ToList();

                                    if (LeaveApplicationObj.Count > 0)
                                    {
                                        ReturnMessage = string.Empty;
                                        UpdatedStatus = string.Empty;
                                        NewStatus = string.Empty;
                                        PostingFlagModelObj = new PostingFlagModel();

                                        // Added by Rajas on 7 AUGUST 2017
                                        PostingFlagModelObj.IsOnLeave = true;

                                        foreach (LeaveApplication LeaveApplicationCurrentDayObj in LeaveApplicationObj)
                                        {
                                            for (DateTime CurrentLeaveDate = LeaveApplicationCurrentDayObj.FromDate; CurrentLeaveDate.Date <= LeaveApplicationCurrentDayObj.ToDate;
                                                CurrentLeaveDate = CurrentLeaveDate.AddDays(1))
                                            {
                                                //ADDED BY 
                                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentLeaveDate
                                                    && a.EmployeeId == LeaveApplicationCurrentDayObj.EmployeeId
                                                    && (string.IsNullOrEmpty(a.Lock) ? false : a.Lock.ToUpper() == "N" ? false : true) == false).ToList();

                                                foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
                                                {

                                                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS START

                                                    // Updated by Rajas on 18 AUGUST 2017 START
                                                    if (DailyTransactionAsLeave.Status.Contains(StatusConstants.Present))  // Need to split status 
                                                    {
                                                        // Pending need to Verify (TEST , generate case and update code)
                                                        #region SENT BACK LEAVE AS "RETURNED" TO EMPLOYEE, IF EMPLOYEE PRESENT ON ALREADY SANCTIONED DAY

                                                        /// CODE ADDED BY RAJAS ON 18 APRIL 2017
                                                        /// AS IF EMPLOYEE IS PRESENT ON ALREADY SANACTIONED DAY STATUS WILL BE UPDATED AS "RETURNED"
                                                        /// FOLLOWING STEPS WILL BE TAKEN :
                                                        /// 1. TO UPDATE THIS STATUS OF REVERT THE LEAVE BALANCE EMPLOYEE NEED TO EDIT OR MODIFY LEAVE
                                                        /// 2. THEN SANCTIONER OR APPROVER WILL TAKE ACTION ON THE SAME.

                                                        //if ((DailyTransactionAsLeave.Status.Trim() == "PPPP")) // || (DailyTransactionAsLeave.Status.Trim() == "AAPP") || (DailyTransactionAsLeave.Status.Trim() == "PPAA"))
                                                        //{
                                                        //    if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate && LeaveApplicationCurrentDayObj.StatusId == 2)
                                                        //    {
                                                        //        if (DailyTransactionAsLeave.Status.Trim() == "PPPP")
                                                        //        {
                                                        //            if (LeaveApplicationCurrentDayObj.FromDayStatus == 1)
                                                        //            {
                                                        //                DailyTransactionAsLeave.Status = "PPPP";

                                                        //                LeaveApplicationCurrentDayObj.StatusId = 5;
                                                        //            }
                                                        //            else if (LeaveApplicationCurrentDayObj.FromDayStatus == 2)
                                                        //            {
                                                        //                DailyTransactionAsLeave.Status = "PPPP";

                                                        //                LeaveApplicationCurrentDayObj.StatusId = 5;
                                                        //            }
                                                        //            else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3)
                                                        //            {
                                                        //                DailyTransactionAsLeave.Status = "PPPP";

                                                        //                LeaveApplicationCurrentDayObj.StatusId = 5;
                                                        //            }
                                                        //        }

                                                        //    }
                                                        //}

                                                        //if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate)
                                                        //{
                                                        //    NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                                        //    switch (LeaveApplicationCurrentDayObj.FromDayStatus)
                                                        //    {
                                                        //        case 1:
                                                        //            if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
                                                        //            {
                                                        //                // No change in status
                                                        //            }
                                                        //            break;

                                                        //        case 2:
                                                        //            if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                                        //            {
                                                        //                DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                                        //            }
                                                        //            break;

                                                        //        case 3:
                                                        //            if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                                        //            {
                                                        //                DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                                        //            }
                                                        //            break;

                                                        //        default:

                                                        //            break;
                                                        //    }

                                                        //    WetosDB.SaveChanges();
                                                        //}
                                                        //else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate)
                                                        //{
                                                        //    switch (LeaveApplicationCurrentDayObj.ToDayStatus)
                                                        //    {
                                                        //        case 1:
                                                        //            if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
                                                        //            {
                                                        //                // No change in status
                                                        //            }
                                                        //            break;

                                                        //        case 2:
                                                        //            if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                                        //            {
                                                        //                DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                                        //            }
                                                        //            break;

                                                        //        case 3:
                                                        //            if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                                        //            {
                                                        //                DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                                        //            }
                                                        //            break;

                                                        //        default:

                                                        //            break;
                                                        //    }

                                                        //    WetosDB.SaveChanges();
                                                        //}
                                                        //else
                                                        //{
                                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                                        if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayPresentStatus)
                                                        {
                                                            // No change in status
                                                        }
                                                        else if (DailyTransactionAsLeave.Status.Substring(0, 2) == StatusConstants.Present)
                                                        {
                                                            DailyTransactionAsLeave.Status = DailyTransactionAsLeave.Status.Substring(0, 2) + NewStatus;
                                                        }
                                                        else if (DailyTransactionAsLeave.Status.Substring(2, 2) == StatusConstants.Present)
                                                        {
                                                            DailyTransactionAsLeave.Status = NewStatus + DailyTransactionAsLeave.Status.Substring(2, 2);
                                                        }


                                                        WetosDB.SaveChanges();
                                                        // }
                                                        #endregion

                                                    } // Updated by Rajas on 18 AUGUST 2017 END
                                                    else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.FromDate && LeaveApplicationCurrentDayObj.StatusId == 2) // From Day sanction
                                                    {
                                                        if (LeaveApplicationCurrentDayObj.FromDayStatus == 2)  // First half
                                                        {
                                                            PostingFlagModelObj.IsFirstHalfLeave = true;
                                                        }
                                                        else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3) // Second half
                                                        {
                                                            PostingFlagModelObj.IsSecondHalfLeave = true;
                                                        }
                                                        else
                                                        {
                                                            PostingFlagModelObj.IsFullDayLeave = true;
                                                        }

                                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                                    }
                                                    else if (CurrentLeaveDate == LeaveApplicationCurrentDayObj.ToDate && LeaveApplicationCurrentDayObj.StatusId == 2)  // To Day sanction
                                                    {
                                                        if (LeaveApplicationCurrentDayObj.FromDayStatus == 2) // First half
                                                        {
                                                            PostingFlagModelObj.IsFirstHalfLeave = true;
                                                        }
                                                        else if (LeaveApplicationCurrentDayObj.FromDayStatus == 3) // Second half
                                                        {
                                                            PostingFlagModelObj.IsSecondHalfLeave = true;
                                                        }
                                                        else
                                                        {
                                                            PostingFlagModelObj.IsFullDayLeave = true;
                                                        }

                                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                                    }
                                                    else if (DailyTransactionAsLeave.Status.Trim() == StatusConstants.FullDayAbsentStatus
                                                        && LeaveApplicationCurrentDayObj.StatusId == 2)  // Added by Rajas on 18 AUGUST 2017
                                                    {
                                                        NewStatus = LeaveApplicationCurrentDayObj.LeaveType.Trim();

                                                        PostingFlagModelObj.IsFullDayLeave = true;

                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                                    }
                                                    //else if (DailyTransactionAsLeave.Status.Trim() == "AAAA" && LeaveApplicationCurrentDayObj.StatusId != 2)
                                                    //{
                                                    //    DailyTransactionAsLeave.Status = "AAAA";
                                                    //}
                                                    //CODE ADDED BY SHRADDHA ON 03 APR 2017 TO APPLY LEAVE DAYS WISE STATUS END
                                                }

                                            }

                                            WetosDB.SaveChanges();
                                        }
                                    }
                                    #endregion

                                    #region CODE TO MARK OD

                                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL START
                                    // Update by Rajas on 10 AUGUST 2017 for Delete and StatusId
                                    List<ODTour> ODTourObj = WetosDB.ODTours.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                                        && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                                    if (ODTourObj.Count > 0)
                                    {
                                        PostingFlagModelObj = new PostingFlagModel();

                                        PostingFlagModelObj.IsOdTour = true;   // Added by Rajas on 7 AUGUST 2017

                                        foreach (ODTour ODTourCurrentDayObj in ODTourObj)
                                        {
                                            // Status as per selection of ODTourType
                                            // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                                            // Updated by Rajas on 5 AUGUST 2017
                                            UpdatedStatus = string.Empty;
                                            NewStatus = string.Empty;

                                            if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "TOUR")
                                            {
                                                NewStatus = "TO";
                                            }
                                            else if (ODTourCurrentDayObj.ODTourType.ToUpper().Trim() == "OD")
                                            {
                                                NewStatus = "OD";
                                            }
                                            else
                                            {
                                                NewStatus = "PP";
                                            }

                                            // Code updated by Rajas on 9 JULY 2017 for Status START
                                            for (DateTime CurrentODDate = Convert.ToDateTime(ODTourCurrentDayObj.FromDate); CurrentODDate.Date <= ODTourCurrentDayObj.ToDate; CurrentODDate = CurrentODDate.AddDays(1))
                                            {
                                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentODDate && a.EmployeeId == ODTourCurrentDayObj.EmployeeId).ToList();
                                                foreach (DailyTransaction DailyTransactionAsLeave in DailyTransactionListForCurrentDate)
                                                {
                                                    if (DailyTransactionAsLeave.Status.Trim() == "PPPP")  // need to verify
                                                    {
                                                        DailyTransactionAsLeave.Status = "PPPP";
                                                    }
                                                    else if (CurrentODDate == ODTourCurrentDayObj.FromDate && ODTourCurrentDayObj.StatusId == 2)
                                                    {
                                                        if (ODTourCurrentDayObj.ODDayStatus == 2)
                                                        {
                                                            PostingFlagModelObj.IsFirstHalfOD = true;
                                                        }
                                                        else if (ODTourCurrentDayObj.ODDayStatus == 3)
                                                        {
                                                            PostingFlagModelObj.IsSecondHalfOD = true;
                                                        }
                                                        else
                                                        {
                                                            PostingFlagModelObj.IsFullDayOD = true;
                                                        }

                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                                    }

                                                    else if (CurrentODDate == ODTourCurrentDayObj.ToDate && ODTourCurrentDayObj.StatusId == 2)
                                                    {
                                                        if (ODTourCurrentDayObj.ODDayStatus1 == 2) // WHY NOT INT
                                                        {
                                                            PostingFlagModelObj.IsFirstHalfOD = true;
                                                        }
                                                        else if (ODTourCurrentDayObj.ODDayStatus1 == 3)
                                                        {
                                                            PostingFlagModelObj.IsSecondHalfOD = true;
                                                        }
                                                        else
                                                        {
                                                            PostingFlagModelObj.IsFullDayOD = true;
                                                        }

                                                        //
                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                        DailyTransactionAsLeave.Status = UpdatedStatus;
                                                    }
                                                    else if (DailyTransactionAsLeave.Status.Trim() == "AAAA" && ODTourCurrentDayObj.StatusId != 2) // Pending need to Verify (TEST , generate case and update code)
                                                    {
                                                        DailyTransactionAsLeave.Status = "AAAA";
                                                    }

                                                    WetosDB.SaveChanges();

                                                    #region CODE TO DEDUCT ALREADY MARKED LATE COUNT

                                                    // Added by Rajas on 10 AUGUST 2017 START

                                                    NewStatus = string.Empty;
                                                    UpdatedStatus = string.Empty;
                                                    ReturnMessage = string.Empty;

                                                    int EmployeeGroupId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionAsLeave.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();
                                                    RuleTransaction RuleForLateCount = AllRuleTransactionList.Where(a => a.RuleId == 16 && a.EmployeeGroupId == EmployeeGroupId).FirstOrDefault();

                                                    if (RuleForLateCount != null)
                                                    {
                                                        if (DailyTransactionAsLeave.LateCount >= 1)
                                                        {
                                                            DailyTransactionAsLeave.LateCount = DailyTransactionAsLeave.LateCount - 1;
                                                            WetosDB.SaveChanges();

                                                            PostingFlagModelObj.IsLateCountReduced = true;

                                                            if (DailyTransactionAsLeave.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                                            {
                                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                DailyTransactionAsLeave.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                                                DailyTransactionAsLeave.Status = UpdatedStatus;
                                                                WetosDB.SaveChanges();
                                                            }

                                                            else if (DailyTransactionAsLeave.LateCount > Convert.ToInt32(RuleForLateCount.Formula))
                                                            {
                                                                //abcd.Status = "AAPP^";
                                                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsLeave.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                                                DailyTransactionAsLeave.Remark = "Late";
                                                                DailyTransactionAsLeave.Status = UpdatedStatus;
                                                                WetosDB.SaveChanges();
                                                            }
                                                        }
                                                        // > 2 ABSENT
                                                        // ==2 PRESENT 

                                                        // Initialise flags
                                                        PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                                    }

                                                    // Added by Rajas on 10 AUGUST 2017 START

                                                    #endregion
                                                }

                                            }

                                            WetosDB.SaveChanges();
                                        }
                                    }
                                    //ADDED CODE BY SHRADDHA ON 13 FEB 2017 FOR SAVING ODOD STATUS IN DAILY TRANSACTION WHILE TAKING OD TRAVEL END
                                    #endregion

                                    #region CODE TO MARK COMPOFF

                                    // Added by Rajas on 12 AUGUST 2017 START

                                    List<CompOffApplication> COObj = WetosDB.CompOffApplications.Where(a => a.FromDate <= CurrentDate && a.ToDate >= CurrentDate
                                        && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                                    if (COObj.Count > 0)
                                    {
                                        PostingFlagModelObj = new PostingFlagModel();

                                        PostingFlagModelObj.IsCO = true;   // Added by Rajas on 7 AUGUST 2017

                                        foreach (CompOffApplication COCurrentDayObj in COObj)
                                        {
                                            // Status as per selection of ODTourType
                                            // Added by Rajas on 9 JULY 2017 to Fix issue no. 4, defect id=	FB0014 as per Test Cases sheet
                                            // Updated by Rajas on 5 AUGUST 2017
                                            UpdatedStatus = string.Empty;
                                            NewStatus = StatusConstants.CO;

                                            // Code updated by Rajas on 9 JULY 2017 for Status START
                                            for (DateTime CurrentCODate = Convert.ToDateTime(COCurrentDayObj.FromDate); CurrentCODate.Date <= COCurrentDayObj.ToDate; CurrentCODate = CurrentCODate.AddDays(1))
                                            {
                                                List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentCODate && a.EmployeeId == COCurrentDayObj.EmployeeId).ToList();
                                                foreach (DailyTransaction DailyTransactionAsCO in DailyTransactionListForCurrentDate)
                                                {
                                                    if (DailyTransactionAsCO.Status.Trim() == "PPPP")  // need to verify
                                                    {
                                                        DailyTransactionAsCO.Status = "PPPP";
                                                    }
                                                    else if (CurrentCODate == COCurrentDayObj.FromDate && COCurrentDayObj.StatusId == 2)
                                                    {
                                                        if (COCurrentDayObj.FromDateStatus == 2)
                                                        {
                                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                                        }
                                                        else if (COCurrentDayObj.FromDateStatus == 3)
                                                        {
                                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                                        }
                                                        else
                                                        {
                                                            PostingFlagModelObj.IsFullDayCOff = true;
                                                        }

                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                                    }

                                                    else if (CurrentCODate == COCurrentDayObj.ToDate && COCurrentDayObj.StatusId == 2)
                                                    {
                                                        if (COCurrentDayObj.FromDateStatus == 2) // WHY NOT INT
                                                        {
                                                            PostingFlagModelObj.IsFirstHalfCOff = true;
                                                        }
                                                        else if (COCurrentDayObj.ToDateStatus == 3)
                                                        {
                                                            PostingFlagModelObj.IsSecondHalfCOff = true;
                                                        }
                                                        else
                                                        {
                                                            PostingFlagModelObj.IsFullDayCOff = true;
                                                        }

                                                        //
                                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionAsCO.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                                                        DailyTransactionAsCO.Status = UpdatedStatus;
                                                    }
                                                    else if (DailyTransactionAsCO.Status.Trim() == "AAAA" && COCurrentDayObj.StatusId != 2) // Pending need to Verify (TEST , generate case and update code)
                                                    {
                                                        DailyTransactionAsCO.Status = "AAAA";
                                                    }

                                                    WetosDB.SaveChanges();
                                                }

                                            }

                                            WetosDB.SaveChanges();
                                        }
                                    }

                                    // Added by Rajas on 12 AUGUST 2017 END
                                    #endregion

                                    // Added by Rajas on 18 AUGUST 2017 START
                                    // Generate error string to indicate error occured for processing data for employeeid
                                    if (ErrorInEmployee.Count > 0)
                                    {
                                        //ErrorMessage = "Error in data processing for EmployeeId : " + string.Join(", ", ErrorInEmployee);
                                    }
                                    // Added by Rajas on 18 AUGUST 2017 END

                                    #endregion

                                }
                                else
                                {
                                    MissingEmployee.Add(RowNo.ToString());
                                }
                            }

                            else
                            {
                                MissingEmployee.Add(RowNo.ToString());
                            }
                        }
                        else
                        {

                            MissingEmployee.Add(RowNo.ToString());

                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in Import Attendance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Import Attendance : Import data successful";
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in TEST ATTENDANCE :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in Import Attendance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                return false;
            }

        }

        /// <summary>
        /// AUDIT LOGs
        /// Added by Rajas on 30 AUGUST 2017
        /// </summary>
        /// <param name="LoginId"></param>
        /// <param name="EmployeeId"></param>
        /// <param name="AuditDate"></param>
        /// <param name="TransactionArea"></param>
        /// <param name="Action"></param>
        /// <param name="OldRecord"></param>
        /// <param name="NewRecord"></param>
        /// <returns></returns>
        /// LATER COMMENTED BY RAJAS AS SP ADDED
        /// UNCOMMENTED BY PUSHKAR ON 7 SEPTEMBER 2017 FOR AUDITING
        /// MODIFIED FOR INSERT ON ALL FUNCTIONS BY PUSHKAR ON 9 SEPTEMBER 2017
        public static bool GenerateAuditLogsInsert(WetosDBEntities WetosDB, int EmployeeId, string TransactionArea, string NewRecord, ref string Message)
        {
            bool ReturnState = false;
            try
            {
                AuditLog AuditLogObj = new AuditLog();
                AuditLogObj.AuditDate = DateTime.Now; //AUDIT LOG GENERATION MODIFIED BY PUSHKAR ON 7 SEPTEMBER 2017
                AuditLogObj.EmployeeId = EmployeeId;
                AuditLogObj.LoginUserId = SessionPersister.UserInfo.UserId;
                AuditLogObj.FormName = TransactionArea;
                AuditLogObj.AuditMode = "INSERT";
                AuditLogObj.OldRecord = " ";
                AuditLogObj.NewRecord = NewRecord;
                WetosDB.AuditLogs.AddObject(AuditLogObj);
                WetosDB.SaveChanges();
                return ReturnState = true;
            }
            catch (System.Exception ex)
            {
                Message = "Error in adding AUDIT LOG : " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnState;
            }

        }

        //ADDED NEW STATIC FUNCTION FOR UPDATE RECORDS FOR SAVING AUDIT LOGS BY PUSHKAR ON 9 SEPTEMBER 2017
        public static bool GenerateAuditLogsUpdate(WetosDBEntities WetosDB, int EmployeeId, string TransactionArea, string OldRecord, string NewRecord
            , ref string Message)
        {
            bool ReturnState = false;
            try
            {
                AuditLog AuditLogObj = new AuditLog();
                AuditLogObj.AuditDate = DateTime.Now; //AUDIT LOG GENERATION MODIFIED BY PUSHKAR ON 7 SEPTEMBER 2017
                AuditLogObj.EmployeeId = EmployeeId;
                AuditLogObj.LoginUserId = SessionPersister.UserInfo.UserId;
                AuditLogObj.FormName = TransactionArea;
                AuditLogObj.AuditMode = "UPDATE";
                AuditLogObj.OldRecord = OldRecord;
                AuditLogObj.NewRecord = NewRecord;
                WetosDB.AuditLogs.AddObject(AuditLogObj);
                WetosDB.SaveChanges();
                return ReturnState = true;
            }
            catch (System.Exception ex)
            {
                Message = "Error in adding AUDIT LOG : " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnState;
            }

        }

        //ADDED NEW STATIC FUNCTION FOR UPDATE RECORDS FOR SAVING AUDIT LOGS BY PUSHKAR ON 12 SEPTEMBER 2017
        public static bool GenerateAuditLogsDelete(WetosDBEntities WetosDB, int EmployeeId, string TransactionArea, string OldRecord, ref string Message)
        {
            bool ReturnState = false;
            try
            {
                AuditLog AuditLogObj = new AuditLog();
                AuditLogObj.AuditDate = DateTime.Now; //AUDIT LOG GENERATION MODIFIED BY PUSHKAR ON 7 SEPTEMBER 2017
                AuditLogObj.EmployeeId = EmployeeId;
                AuditLogObj.LoginUserId = SessionPersister.UserInfo.UserId;
                AuditLogObj.FormName = TransactionArea;
                AuditLogObj.AuditMode = "DELETE";
                AuditLogObj.OldRecord = OldRecord;
                AuditLogObj.NewRecord = "";
                WetosDB.AuditLogs.AddObject(AuditLogObj);
                WetosDB.SaveChanges();
                return ReturnState = true;
            }
            catch (System.Exception ex)
            {
                Message = "Error in adding AUDIT LOG : " + ex.Message + (ex.InnerException == null ? string.Empty : ex.InnerException.Message);
                return ReturnState;
            }

        }


        /// <summary>
        /// CODE TO MARK EMPLOYEES AS INACTIVE IF LEAVING DATE IS LESS THAN OR EQUAL TO TODAY'S DATE
        /// CODE ADDED BY SHRADDHA ON 01 NOV 2017
        /// <param name="WetosDB"></param>
        public static void MarkActiveInctiveEmployee(WetosDBEntities WetosDB)
        {

            List<Employee> EmployeeList = WetosDB.Employees.Where(a => (a.ActiveFlag == true || a.ActiveFlag == null) && a.Leavingdate <= DateTime.Now).ToList();

            if (EmployeeList.Count > 0)
            {
                foreach (Employee EmployeeObj in EmployeeList)
                {
                    EmployeeObj.ActiveFlag = false;
                    WetosDB.SaveChanges();
                }
            }
        }


        /// <summary>
        /// CODE ADDED BY SHRADDHA ON 22 NOV 2017 TO GET OD WORKING HOURS CALCULATION GENERIC CODE
        /// </summary>
        /// <param name="WetosDB"></param>
        /// <param name="DailyTransactionObj"></param>
        /// <param name="ODTravelObj"></param>
        /// <param name="PostingFlagModelObj"></param>
        /// <param name="CurrentODDate"></param>
        /// <param name="UpdatedStatus"></param>
        /// <param name="NewStatus"></param>
        /// <param name="ReturnMessage"></param>
        public static void CalculateODWorkingHours(WetosDBEntities WetosDB, DailyTransaction DailyTransactionObj, ODTour ODTravelObj, PostingFlagModel PostingFlagModelObj, DateTime CurrentODDate, string UpdatedStatus, string NewStatus, ref string ReturnMessage)
        {
            #region CODE UPDATE : Mark Attendance Status changes
            try
            {
                // Below code updated by Rajas on 7 AUGUST 2017 START
                if (DailyTransactionObj != null)
                {
                    #region GET SHIFT  FROM CLOSEST TIME
                    DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == ODTravelObj.CompanyId
                        && a.BranchId == ODTravelObj.BranchId
                        //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                        //&& a.ShiftCode == EmployeeObj.DefaultShift
                        ).Select(a => a.FirstInTime).ToArray();

                    long min = long.MaxValue;

                    DateTime ClosestTime = new DateTime();

                    foreach (DateTime CurrentDateTime in FirstInTimeArray)
                    {
                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
                        long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - DailyTransactionObj.Login.TimeOfDay.Ticks);
                        if (TempDIff < min)
                        {
                            min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
                            ClosestTime = CurrentDateTime;
                        }
                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
                    }

                    Shift ShiftObj = WetosDB.Shifts.Where(a => a.Company.CompanyId == ODTravelObj.CompanyId
                         && a.BranchId == ODTravelObj.BranchId
                        //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                          && a.FirstInTime == ClosestTime).FirstOrDefault();

                    if (ShiftObj != null)
                    {
                        //MODIFIED BY PUSHKAR ON 06 AUGUST 2018 FOR TEKMAN ONLY***********
                        Employee EmpObjShift = WetosDB.Employees.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                        DailyTransactionObj.ShiftId = EmpObjShift.DefaultShift;

                        WetosDB.SaveChanges();
                    }

                    #endregion

                    // OD
                    // CHECK LOGIN AND LOGOUT FOR NULL
                    if (ODTravelObj.ODLoginTime != null && ODTravelObj.ODLogOutTime != null)
                    {
                        #region CODE ADDED BY SHRADDHA ON 30 JAN 2018 FOR OD LOGIN AND LOGOUT TIME CONSIDER IN WORKING HOURS CALCULATION
                        if ((DailyTransactionObj.Login < ODTravelObj.ODLogOutTime || DailyTransactionObj.Login > ODTravelObj.ODLogOutTime) && (DailyTransactionObj.Status != StatusConstants.FirstHalfAbsentStatus || DailyTransactionObj.Status != StatusConstants.FullDayAbsentStatus))
                        {
                            //UPDATE LOGIN TIME
                            DailyTransactionObj.PreviousLogin = DailyTransactionObj.Login;
                            DailyTransactionObj.Login = ODTravelObj.ODLoginTime.Value;
                        }

                        if ((DailyTransactionObj.LogOut < ODTravelObj.ODLogOutTime) && (DailyTransactionObj.Status != StatusConstants.SecondHalfAbsentStatus || DailyTransactionObj.Status != StatusConstants.FullDayAbsentStatus))
                        {
                            //UPDATE LOGIN TIME
                            DailyTransactionObj.PreviousLogOut = DailyTransactionObj.LogOut;
                            DailyTransactionObj.LogOut = ODTravelObj.ODLogOutTime.Value;
                        }


                        //if (DailyTransactionObj.Login > ODTravelObj.ODLoginTime && DailyTransactionObj.LogOut > ODTravelObj.ODLogOutTime)
                        //{
                        //    //IF OD LOGIN TIME IS EARLY THAN DAILY TRANSACTION LOGIN TIME

                        //    //UPDATE LOGIN TIME
                        //    DailyTransactionObj.PreviousLogin = DailyTransactionObj.Login;
                        //    DailyTransactionObj.Login = ODTravelObj.ODLoginTime.Value;
                        //}
                        //else if (DailyTransactionObj.Login < ODTravelObj.ODLoginTime && DailyTransactionObj.LogOut < ODTravelObj.ODLogOutTime && (DailyTransactionObj.Status == StatusConstants.FirstHalfAbsentStatus || DailyTransactionObj.Status == StatusConstants.FullDayAbsentStatus)) //IF OD LOGOUT TIME IS LATE THAN DAILY TRANSACTION LOGOUT TIME
                        //{
                        //    //UPDATE LOGOUT TIME IN DAILY TRANSACTION TABLE SAME AS ODTOUR LOGOUT TIME ONLY IN CASE OF BOTH TIME HAVING SAME DATE
                        //    if (DailyTransactionObj.LogOut.Day == ODTravelObj.ODLogOutTime.Value.Day && DailyTransactionObj.LogOut.Month == ODTravelObj.ODLogOutTime.Value.Month
                        //        && DailyTransactionObj.LogOut.Year == ODTravelObj.ODLogOutTime.Value.Year)
                        //    {
                        //        //UPDATE LOGOUT TIME
                        //        DailyTransactionObj.PreviousLogOut = DailyTransactionObj.LogOut;
                        //        DailyTransactionObj.LogOut = ODTravelObj.ODLogOutTime.Value;


                        //    }
                        //}      //IF OD LOGOUT TIME IS LATE THAN DAILY TRANSACTION LOGOUT TIME AND OD LOGIN TIME IS EARLY THAN DAILY TRANSACTION LOGIN TIME
                        //else if (DailyTransactionObj.Login > ODTravelObj.ODLoginTime && DailyTransactionObj.LogOut < ODTravelObj.ODLogOutTime)
                        //{
                        //    //UPDATE LOGOUT TIME IN DAILY TRANSACTION TABLE SAME AS ODTOUR LOGOUT TIME ONLY IN CASE OF BOTH TIME HAVING SAME DATE
                        //    //UPDATE LOGIN TIME IN DAILY TRANSACTION TABLE SAME AS ODTOUR LOGIN TIME ONLY IN CASE OF BOTH TIME HAVING SAME DATE
                        //    if (DailyTransactionObj.LogOut.Day == ODTravelObj.ODLogOutTime.Value.Day && DailyTransactionObj.LogOut.Month == ODTravelObj.ODLogOutTime.Value.Month
                        //        && DailyTransactionObj.LogOut.Year == ODTravelObj.ODLogOutTime.Value.Year)
                        //    {
                        //        //UPDATE LOGIN TIME
                        //        DailyTransactionObj.PreviousLogin = DailyTransactionObj.Login;
                        //        DailyTransactionObj.Login = ODTravelObj.ODLoginTime.Value;

                        //        //UPDATE LOGOUT TIME
                        //        DailyTransactionObj.PreviousLogOut = DailyTransactionObj.LogOut;
                        //        DailyTransactionObj.LogOut = ODTravelObj.ODLogOutTime.Value;


                        //    }
                        //}
                        //UPDATE WORKING HOURS
                        TimeSpan WorkingHours = DailyTransactionObj.LogOut - DailyTransactionObj.Login;
                        DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month,
                            DailyTransactionObj.TranDate.Day, WorkingHours.Hours, WorkingHours.Minutes, WorkingHours.Seconds);
                        #endregion
                        #region UPDATE DAILY TRANSACTION STATUS
                        if (DailyTransactionObj.Status.Trim() == "PPPP")  // need to verify
                        {
                            DailyTransactionObj.Status = "PPPP";
                        }
                        else if (CurrentODDate == ODTravelObj.FromDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;
                            }
                            else if (ODTravelObj.ODDayStatus == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;
                            }
                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            DailyTransactionObj.Status = UpdatedStatus;
                        }
                        else if (CurrentODDate == ODTravelObj.ToDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus1 == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;
                            }
                            else if (ODTravelObj.ODDayStatus1 == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;
                            }
                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            DailyTransactionObj.Status = UpdatedStatus;
                        }
                        else if (DailyTransactionObj.Status.Trim() == WetosAdministrationController.StatusConstants.FullDayAbsentStatus && ODTravelObj.StatusId == 2)  // Added by Rajas on 28 AUGUST 2017
                        {
                            PostingFlagModelObj.IsFullDayOD = true;

                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            DailyTransactionObj.Status = UpdatedStatus;
                        }


                        #endregion
                    }
                    else
                    {
                        if (DailyTransactionObj.Status.Trim() == "PPPP")  // need to verify
                        {
                            DailyTransactionObj.Status = "PPPP";
                        }
                        else if (CurrentODDate == ODTravelObj.FromDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;

                                //Added by Shalaka with help of Sharddha on 28th OCT 2017 For WorkingHours time Update 
                                //Issue raised by Ulka on 27th OCT
                                //Get Object of Shift

                                if (ShiftObj != null)
                                {
                                    int workingHours = ShiftObj.WorkingHours.Hour;
                                    int workingMinute = ShiftObj.WorkingHours.Minute;
                                    int workingSeconds = ShiftObj.WorkingHours.Second;

                                    //If First Half then
                                    int HrsInMinutes = workingHours * 60;
                                    int TotalMinutes = HrsInMinutes + workingMinute;
                                    int halfofTime = TotalMinutes / 2;

                                    #region WORKING HOURS CALCULATION CORRECTION CODE IN CASE OF HALF DAY ADDED BY SHRADDHA ON 30 OCT 2017
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS START

                                    int DTworkingHours = 0;
                                    int DTworkingMinute = 0;
                                    int DTworkingSeconds = 0;
                                    if (DailyTransactionObj.WorkingHrs != null)
                                    {
                                        DTworkingHours = DailyTransactionObj.WorkingHrs.Value.Hour;
                                        DTworkingMinute = DailyTransactionObj.WorkingHrs.Value.Minute;
                                        DTworkingSeconds = DailyTransactionObj.WorkingHrs.Value.Second;
                                    }
                                    //If First Half then
                                    int DTHrsInMinutes = DTworkingHours * 60;
                                    int DTTotalMinutes = DTHrsInMinutes + DTworkingMinute;

                                    int TotalWorkingHours = halfofTime + DTTotalMinutes;

                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 START
                                    //Get Working Hrs for FirstHalf
                                    //int FirstHalfWorkingHrs = halfofTime / 60;
                                    int FirstHalfWorkingHrs = TotalWorkingHours / 60;
                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 END
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS END
                                    #endregion


                                    //To get Working minutes from FirstHalfWorkingHrs 
                                    int t1 = FirstHalfWorkingHrs * 60;
                                    int FirstHalfWorkingMinutes = TotalWorkingHours - t1;

                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 START
                                    if (FirstHalfWorkingHrs > 23)
                                    {
                                        FirstHalfWorkingHrs = 4;
                                    }
                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 END

                                    //Added workingHrs
                                    DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, FirstHalfWorkingHrs, FirstHalfWorkingMinutes, workingSeconds);
                                }
                            }
                            else if (ODTravelObj.ODDayStatus == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;


                                if (ShiftObj != null)
                                {
                                    int workingHours = ShiftObj.WorkingHours.Hour;
                                    int workingMinute = ShiftObj.WorkingHours.Minute;
                                    int workingSeconds = ShiftObj.WorkingHours.Second;

                                    //If Second Half then
                                    int HrsInMinutes = workingHours * 60;
                                    int TotalMinutes = HrsInMinutes + workingMinute;
                                    int HalfofTime = TotalMinutes / 2;


                                    #region WORKING HOURS CALCULATION CORRECTION CODE IN CASE OF HALF DAY ADDED BY SHRADDHA ON 30 OCT 2017
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS START
                                    int DTworkingHours = 0;
                                    int DTworkingMinute = 0;
                                    int DTworkingSeconds = 0;
                                    if (DailyTransactionObj.WorkingHrs != null)
                                    {
                                        DTworkingHours = DailyTransactionObj.WorkingHrs.Value.Hour;
                                        DTworkingMinute = DailyTransactionObj.WorkingHrs.Value.Minute;
                                        DTworkingSeconds = DailyTransactionObj.WorkingHrs.Value.Second;
                                    }

                                    //If First Half then
                                    int DTHrsInMinutes = DTworkingHours * 60;
                                    int DTTotalMinutes = DTHrsInMinutes + DTworkingMinute;

                                    int TotalWorkingHours = HalfofTime + DTTotalMinutes;

                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 START
                                    //Get Working Hrs for SecondHalf
                                    //int SecondHalfWorkingHrs = halfofTime / 60;
                                    int SecondHalfWorkingHrs = TotalWorkingHours / 60;
                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 END
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS END
                                    #endregion
                                    //Working Hrs time for SecondHalf

                                    //To get Working minutes from FirstHalfWorkingHrs 
                                    int t1 = SecondHalfWorkingHrs * 60;
                                    int SecondHalfWorkingMinutes = TotalWorkingHours - t1;

                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 START
                                    if (SecondHalfWorkingHrs > 23)
                                    {
                                        SecondHalfWorkingHrs = 4;
                                    }
                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 END

                                    //Added workingHrs
                                    DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, SecondHalfWorkingHrs, SecondHalfWorkingMinutes, workingSeconds);
                                }
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;


                                if (ShiftObj != null)
                                {
                                    int workingHours = ShiftObj.WorkingHours.Hour;
                                    int workingMinute = ShiftObj.WorkingHours.Minute;
                                    int workingSeconds = ShiftObj.WorkingHours.Second;

                                    //Added workingHrs for Full Day
                                    DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, workingHours, workingMinute, workingSeconds);
                                }
                            }

                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                            if (DailyTransactionObj.Status.Contains("WO"))
                            {
                                DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                            }
                            DailyTransactionObj.Status = UpdatedStatus;
                        }

                        else if (CurrentODDate == ODTravelObj.ToDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus1 == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;
                            }
                            else if (ODTravelObj.ODDayStatus1 == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;
                            }


                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START

                            if (DailyTransactionObj.Status.Contains("WO"))
                            {
                                DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                            }

                            DailyTransactionObj.Status = UpdatedStatus;

                            //Added By shalaka on 28th OCT 2017 to update WorkingHrs time
                            if (ShiftObj != null)
                            {
                                int workingHours = ShiftObj.WorkingHours.Hour;
                                int workingMinute = ShiftObj.WorkingHours.Minute;
                                int workingSeconds = ShiftObj.WorkingHours.Second;

                                //Added workingHrs
                                DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, workingHours, workingMinute, workingSeconds);
                            }
                        }
                        else if (ODTravelObj.StatusId == 2)  // Added by Rajas on 28 AUGUST 2017
                        {
                            PostingFlagModelObj.IsFullDayOD = true;

                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START

                            if (DailyTransactionObj.Status.Contains("WO"))
                            {
                                DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                            }

                            DailyTransactionObj.Status = UpdatedStatus;

                            //Added By shalaka on 28th OCT 2017 to update WorkingHrs time
                            if (ShiftObj != null)
                            {
                                int workingHours = ShiftObj.WorkingHours.Hour;
                                int workingMinute = ShiftObj.WorkingHours.Minute;
                                int workingSeconds = ShiftObj.WorkingHours.Second;

                                //Added workingHrs
                                DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, workingHours, workingMinute, workingSeconds);
                            }
                        }
                    }

                    #region GET EXTRA WORKING HOURS
                    if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObj.WorkingHours.TimeOfDay)
                    {
                        DateTime Datetime1 = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day,
                            DailyTransactionObj.WorkingHrs.Value.Hour, DailyTransactionObj.WorkingHrs.Value.Minute, DailyTransactionObj.WorkingHrs.Value.Second);
                        DateTime Datetime2 = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day,
                            ShiftObj.WorkingHours.Hour, ShiftObj.WorkingHours.Minute, ShiftObj.WorkingHours.Second);
                        TimeSpan ExtraWorkingHours = Datetime1 - Datetime2;
                        DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month,
                            DailyTransactionObj.TranDate.Day, ExtraWorkingHours.Hours, ExtraWorkingHours.Minutes, ExtraWorkingHours.Seconds);
                    }
                    #endregion

                    #region CODE FOR COMP OFF ADD INTO COMP OFF TABLE FOR EXTRA HOURS BASED ON RULE
                    // GET EMP GROUP FOR EMP in Daily transaction
                    int EmployeeGroupIdObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId)
                        .Select(a => a.EmployeeGroup.EmployeeGroupId).FirstOrDefault();

                    // GET List of all rules assigned to Employee Group
                    List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.EmployeeGroupId == EmployeeGroupIdObj).ToList();

                    RuleTransaction RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == 9).FirstOrDefault(); // 9 - COMP ALLOWED ?
                    RuleTransaction RTObjForCompOffFullDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault(); // IF COMPOFF ALLOWED FULL DAY LIMIT

                    RuleTransaction RTObjForCompOffHalfDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 11).FirstOrDefault(); // IF COMPOFF ALLOWED HALF DAY LIMIT


                    RuleTransaction RTObjForIsAutoCompOffavailable = RuleTransactionList.Where(a => a.RuleId == 32).FirstOrDefault(); // Is Auto Comp Off available?

                    int FullDayRuleHourInt = 0;
                    int HalfDayRuleHourInt = 0;

                    if (RuleTransactionObj != null && RTObjForIsAutoCompOffavailable != null) // RULE 9 & 32 PRESENT //RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
                    {
                        if (RuleTransactionObj.Formula.ToUpper().Trim() == "TRUE" && RTObjForIsAutoCompOffavailable.Formula.ToUpper().Trim() == "TRUE")//RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
                        {
                            string ReturnStatusMsg = string.Empty;

                            // MIN TIME FOR FULL DAY COMP OFF
                            if (RTObjForCompOffFullDayLimitValue != null)
                            {
                                // 08:00:00
                                string[] FullDayRuleSplitValue = RTObjForCompOffFullDayLimitValue.Formula.Split(':');
                                FullDayRuleHourInt = Convert.ToInt32(FullDayRuleSplitValue[0]); // Minutes missing

                            }

                            // MIN TIME FOR HALF DAY COMP OFF
                            if (RTObjForCompOffHalfDayLimitValue != null)
                            {
                                string[] HalfDayRuleSplitValue = RTObjForCompOffHalfDayLimitValue.Formula.Split(':');
                                HalfDayRuleHourInt = Convert.ToInt32(HalfDayRuleSplitValue[0]); // Minutes missing
                            }

                            if (FullDayRuleHourInt > 0)
                            {
                                // STATIC FUNCTION
                                MarkCompOffForExtraHrsEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                            }
                        }
                        //else
                        //{
                        //    Error("Comp Off is not Allowed for Employee Group : " + EmployeeGroupName);

                        //}

                    }
                    #endregion

                    WetosDB.SaveChanges();
                }
                // Updated by Rajas on 7 AUGUST 2017 END
            }
            catch (Exception)
            {
            }
            #endregion
        }



        public static void CalculateODLateEarlyWorkingHours(WetosDBEntities WetosDB, DailyTransaction DailyTransactionObj, ODLateEarly ODTravelObj, PostingFlagModel PostingFlagModelObj, DateTime CurrentODDate, string UpdatedStatus, string NewStatus, ref string ReturnMessage)
        {
            #region CODE UPDATE : Mark Attendance Status changes
            try
            {
                // Below code updated by Rajas on 7 AUGUST 2017 START
                if (DailyTransactionObj != null)
                {
                    #region GET SHIFT  FROM CLOSEST TIME
                    DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == ODTravelObj.CompanyId
                        && a.BranchId == ODTravelObj.BranchId
                        //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                        //&& a.ShiftCode == EmployeeObj.DefaultShift
                        ).Select(a => a.FirstInTime).ToArray();

                    long min = long.MaxValue;

                    DateTime ClosestTime = new DateTime();

                    foreach (DateTime CurrentDateTime in FirstInTimeArray)
                    {
                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
                        long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - DailyTransactionObj.Login.TimeOfDay.Ticks);
                        if (TempDIff < min)
                        {
                            min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
                            ClosestTime = CurrentDateTime;
                        }
                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
                    }

                    Shift ShiftObj = WetosDB.Shifts.Where(a => a.Company.CompanyId == ODTravelObj.CompanyId
                         && a.BranchId == ODTravelObj.BranchId
                        //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                          && a.FirstInTime == ClosestTime).FirstOrDefault();

                    if (ShiftObj != null)
                    {
                        //MODIFIED BY PUSHKAR ON 06 AUGUST 2018 FOR TEKMAN ONLY***********
                        Employee EmpObjShift = WetosDB.Employees.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

                        DailyTransactionObj.ShiftId = EmpObjShift.DefaultShift;

                        WetosDB.SaveChanges();
                    }

                    #endregion

                    // OD
                    // CHECK LOGIN AND LOGOUT FOR NULL
                    if (ODTravelObj.ODLoginTime != null && ODTravelObj.ODLogOutTime != null)
                    {
                        #region CODE ADDED BY SHRADDHA ON 30 JAN 2018 FOR OD LOGIN AND LOGOUT TIME CONSIDER IN WORKING HOURS CALCULATION
                        if ((DailyTransactionObj.Login < ODTravelObj.ODLogOutTime || DailyTransactionObj.Login > ODTravelObj.ODLogOutTime) && (DailyTransactionObj.Status != StatusConstants.FirstHalfAbsentStatus || DailyTransactionObj.Status != StatusConstants.FullDayAbsentStatus))
                        {
                            //UPDATE LOGIN TIME
                            DailyTransactionObj.PreviousLogin = DailyTransactionObj.Login;
                            DailyTransactionObj.Login = ODTravelObj.ODLoginTime.Value;
                        }

                        if ((DailyTransactionObj.LogOut < ODTravelObj.ODLogOutTime) && (DailyTransactionObj.Status != StatusConstants.SecondHalfAbsentStatus || DailyTransactionObj.Status != StatusConstants.FullDayAbsentStatus))
                        {
                            //UPDATE LOGIN TIME
                            DailyTransactionObj.PreviousLogOut = DailyTransactionObj.LogOut;
                            DailyTransactionObj.LogOut = ODTravelObj.ODLogOutTime.Value;
                        }



                        //}
                        //UPDATE WORKING HOURS
                        TimeSpan WorkingHours = DailyTransactionObj.LogOut - DailyTransactionObj.Login;
                        DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month,
                            DailyTransactionObj.TranDate.Day, WorkingHours.Hours, WorkingHours.Minutes, WorkingHours.Seconds);
                        #endregion
                        #region UPDATE DAILY TRANSACTION STATUS
                        if (DailyTransactionObj.Status.Trim() == "PPPP")  // need to verify
                        {
                            DailyTransactionObj.Status = "PPPP";
                        }
                        else if (CurrentODDate == ODTravelObj.FromDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;
                            }
                            else if (ODTravelObj.ODDayStatus == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;
                            }
                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            DailyTransactionObj.Status = UpdatedStatus;
                        }
                        else if (CurrentODDate == ODTravelObj.ToDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus1 == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;
                            }
                            else if (ODTravelObj.ODDayStatus1 == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;
                            }
                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            DailyTransactionObj.Status = UpdatedStatus;
                        }
                        else if (DailyTransactionObj.Status.Trim() == WetosAdministrationController.StatusConstants.FullDayAbsentStatus && ODTravelObj.StatusId == 2)  // Added by Rajas on 28 AUGUST 2017
                        {
                            PostingFlagModelObj.IsFullDayOD = true;

                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            DailyTransactionObj.Status = UpdatedStatus;
                        }


                        #endregion
                    }
                    else
                    {
                        if (DailyTransactionObj.Status.Trim() == "PPPP")  // need to verify
                        {
                            DailyTransactionObj.Status = "PPPP";
                        }
                        else if (CurrentODDate == ODTravelObj.FromDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;

                                //Added by Shalaka with help of Sharddha on 28th OCT 2017 For WorkingHours time Update 
                                //Issue raised by Ulka on 27th OCT
                                //Get Object of Shift

                                if (ShiftObj != null)
                                {
                                    int workingHours = ShiftObj.WorkingHours.Hour;
                                    int workingMinute = ShiftObj.WorkingHours.Minute;
                                    int workingSeconds = ShiftObj.WorkingHours.Second;

                                    //If First Half then
                                    int HrsInMinutes = workingHours * 60;
                                    int TotalMinutes = HrsInMinutes + workingMinute;
                                    int halfofTime = TotalMinutes / 2;

                                    #region WORKING HOURS CALCULATION CORRECTION CODE IN CASE OF HALF DAY ADDED BY SHRADDHA ON 30 OCT 2017
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS START

                                    int DTworkingHours = 0;
                                    int DTworkingMinute = 0;
                                    int DTworkingSeconds = 0;
                                    if (DailyTransactionObj.WorkingHrs != null)
                                    {
                                        DTworkingHours = DailyTransactionObj.WorkingHrs.Value.Hour;
                                        DTworkingMinute = DailyTransactionObj.WorkingHrs.Value.Minute;
                                        DTworkingSeconds = DailyTransactionObj.WorkingHrs.Value.Second;
                                    }
                                    //If First Half then
                                    int DTHrsInMinutes = DTworkingHours * 60;
                                    int DTTotalMinutes = DTHrsInMinutes + DTworkingMinute;

                                    int TotalWorkingHours = halfofTime + DTTotalMinutes;

                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 START
                                    //Get Working Hrs for FirstHalf
                                    //int FirstHalfWorkingHrs = halfofTime / 60;
                                    int FirstHalfWorkingHrs = TotalWorkingHours / 60;
                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 END
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS END
                                    #endregion


                                    //To get Working minutes from FirstHalfWorkingHrs 
                                    int t1 = FirstHalfWorkingHrs * 60;
                                    int FirstHalfWorkingMinutes = TotalWorkingHours - t1;

                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 START
                                    if (FirstHalfWorkingHrs > 23)
                                    {
                                        FirstHalfWorkingHrs = 4;
                                    }
                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 END

                                    //Added workingHrs
                                    DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, FirstHalfWorkingHrs, FirstHalfWorkingMinutes, workingSeconds);
                                }
                            }
                            else if (ODTravelObj.ODDayStatus == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;


                                if (ShiftObj != null)
                                {
                                    int workingHours = ShiftObj.WorkingHours.Hour;
                                    int workingMinute = ShiftObj.WorkingHours.Minute;
                                    int workingSeconds = ShiftObj.WorkingHours.Second;

                                    //If Second Half then
                                    int HrsInMinutes = workingHours * 60;
                                    int TotalMinutes = HrsInMinutes + workingMinute;
                                    int HalfofTime = TotalMinutes / 2;


                                    #region WORKING HOURS CALCULATION CORRECTION CODE IN CASE OF HALF DAY ADDED BY SHRADDHA ON 30 OCT 2017
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS START
                                    int DTworkingHours = 0;
                                    int DTworkingMinute = 0;
                                    int DTworkingSeconds = 0;
                                    if (DailyTransactionObj.WorkingHrs != null)
                                    {
                                        DTworkingHours = DailyTransactionObj.WorkingHrs.Value.Hour;
                                        DTworkingMinute = DailyTransactionObj.WorkingHrs.Value.Minute;
                                        DTworkingSeconds = DailyTransactionObj.WorkingHrs.Value.Second;
                                    }

                                    //If First Half then
                                    int DTHrsInMinutes = DTworkingHours * 60;
                                    int DTTotalMinutes = DTHrsInMinutes + DTworkingMinute;

                                    int TotalWorkingHours = HalfofTime + DTTotalMinutes;

                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 START
                                    //Get Working Hrs for SecondHalf
                                    //int SecondHalfWorkingHrs = halfofTime / 60;
                                    int SecondHalfWorkingHrs = TotalWorkingHours / 60;
                                    //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 30 OCT 2017 END
                                    //CODE ADDED BY SHRADDHA ON 30 OCT 2017 TO GET ALREADY HAVING WORKING HOURS + HALF DAY WORKING HOURS AS TOTAL WORKING HOURS END
                                    #endregion
                                    //Working Hrs time for SecondHalf

                                    //To get Working minutes from FirstHalfWorkingHrs 
                                    int t1 = SecondHalfWorkingHrs * 60;
                                    int SecondHalfWorkingMinutes = TotalWorkingHours - t1;

                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 START
                                    if (SecondHalfWorkingHrs > 23)
                                    {
                                        SecondHalfWorkingHrs = 4;
                                    }
                                    // GETTING WORKING HOURS more than 24 HOURS TEMP SOLUTION ADDED BY MSJ ON 31 JAN 2018 END

                                    //Added workingHrs
                                    DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, SecondHalfWorkingHrs, SecondHalfWorkingMinutes, workingSeconds);
                                }
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;


                                if (ShiftObj != null)
                                {
                                    int workingHours = ShiftObj.WorkingHours.Hour;
                                    int workingMinute = ShiftObj.WorkingHours.Minute;
                                    int workingSeconds = ShiftObj.WorkingHours.Second;

                                    //Added workingHrs for Full Day
                                    DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, workingHours, workingMinute, workingSeconds);
                                }
                            }

                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START
                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                            if (DailyTransactionObj.Status.Contains("WO"))
                            {
                                DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                            }
                            DailyTransactionObj.Status = UpdatedStatus;
                        }

                        else if (CurrentODDate == ODTravelObj.ToDate && ODTravelObj.StatusId == 2)
                        {
                            if (ODTravelObj.ODDayStatus1 == 2)
                            {
                                PostingFlagModelObj.IsFirstHalfOD = true;
                            }
                            else if (ODTravelObj.ODDayStatus1 == 3)
                            {
                                PostingFlagModelObj.IsSecondHalfOD = true;
                            }
                            else
                            {
                                PostingFlagModelObj.IsFullDayOD = true;
                            }


                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START

                            if (DailyTransactionObj.Status.Contains("WO"))
                            {
                                DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                            }

                            DailyTransactionObj.Status = UpdatedStatus;

                            //Added By shalaka on 28th OCT 2017 to update WorkingHrs time
                            if (ShiftObj != null)
                            {
                                int workingHours = ShiftObj.WorkingHours.Hour;
                                int workingMinute = ShiftObj.WorkingHours.Minute;
                                int workingSeconds = ShiftObj.WorkingHours.Second;

                                //Added workingHrs
                                DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, workingHours, workingMinute, workingSeconds);
                            }
                        }
                        else if (ODTravelObj.StatusId == 2)  // Added by Rajas on 28 AUGUST 2017
                        {
                            PostingFlagModelObj.IsFullDayOD = true;

                            WetosAdministrationController.GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                            DailyTransactionObj.ActualStatus = DailyTransactionObj.Status; // CODE ADDED BY SHRADDHA ON 11 SEP 2017 START

                            if (DailyTransactionObj.Status.Contains("WO"))
                            {
                                DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                            }

                            DailyTransactionObj.Status = UpdatedStatus;

                            //Added By shalaka on 28th OCT 2017 to update WorkingHrs time
                            if (ShiftObj != null)
                            {
                                int workingHours = ShiftObj.WorkingHours.Hour;
                                int workingMinute = ShiftObj.WorkingHours.Minute;
                                int workingSeconds = ShiftObj.WorkingHours.Second;

                                //Added workingHrs
                                DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, workingHours, workingMinute, workingSeconds);
                            }
                        }
                    }

                    #region GET EXTRA WORKING HOURS
                    if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObj.WorkingHours.TimeOfDay)
                    {
                        DateTime Datetime1 = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day,
                            DailyTransactionObj.WorkingHrs.Value.Hour, DailyTransactionObj.WorkingHrs.Value.Minute, DailyTransactionObj.WorkingHrs.Value.Second);
                        DateTime Datetime2 = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day,
                            ShiftObj.WorkingHours.Hour, ShiftObj.WorkingHours.Minute, ShiftObj.WorkingHours.Second);
                        TimeSpan ExtraWorkingHours = Datetime1 - Datetime2;
                        DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month,
                            DailyTransactionObj.TranDate.Day, ExtraWorkingHours.Hours, ExtraWorkingHours.Minutes, ExtraWorkingHours.Seconds);
                    }
                    #endregion

                    #region CODE FOR COMP OFF ADD INTO COMP OFF TABLE FOR EXTRA HOURS BASED ON RULE
                    // GET EMP GROUP FOR EMP in Daily transaction
                    int EmployeeGroupIdObj = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId)
                        .Select(a => a.EmployeeGroup.EmployeeGroupId).FirstOrDefault();

                    // GET List of all rules assigned to Employee Group
                    List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.EmployeeGroupId == EmployeeGroupIdObj).ToList();

                    RuleTransaction RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == 9).FirstOrDefault(); // 9 - COMP ALLOWED ?
                    RuleTransaction RTObjForCompOffFullDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault(); // IF COMPOFF ALLOWED FULL DAY LIMIT

                    RuleTransaction RTObjForCompOffHalfDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 11).FirstOrDefault(); // IF COMPOFF ALLOWED HALF DAY LIMIT


                    RuleTransaction RTObjForIsAutoCompOffavailable = RuleTransactionList.Where(a => a.RuleId == 32).FirstOrDefault(); // Is Auto Comp Off available?

                    int FullDayRuleHourInt = 0;
                    int HalfDayRuleHourInt = 0;

                    if (RuleTransactionObj != null && RTObjForIsAutoCompOffavailable != null) // RULE 9 & 32 PRESENT //RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
                    {
                        if (RuleTransactionObj.Formula.ToUpper().Trim() == "TRUE" && RTObjForIsAutoCompOffavailable.Formula.ToUpper().Trim() == "TRUE")//RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
                        {
                            string ReturnStatusMsg = string.Empty;

                            // MIN TIME FOR FULL DAY COMP OFF
                            if (RTObjForCompOffFullDayLimitValue != null)
                            {
                                // 08:00:00
                                string[] FullDayRuleSplitValue = RTObjForCompOffFullDayLimitValue.Formula.Split(':');
                                FullDayRuleHourInt = Convert.ToInt32(FullDayRuleSplitValue[0]); // Minutes missing

                            }

                            // MIN TIME FOR HALF DAY COMP OFF
                            if (RTObjForCompOffHalfDayLimitValue != null)
                            {
                                string[] HalfDayRuleSplitValue = RTObjForCompOffHalfDayLimitValue.Formula.Split(':');
                                HalfDayRuleHourInt = Convert.ToInt32(HalfDayRuleSplitValue[0]); // Minutes missing
                            }

                            if (FullDayRuleHourInt > 0)
                            {
                                // STATIC FUNCTION
                                MarkCompOffForExtraHrsEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                            }
                        }
                        //else
                        //{
                        //    Error("Comp Off is not Allowed for Employee Group : " + EmployeeGroupName);

                        //}

                    }
                    #endregion

                    WetosDB.SaveChanges();
                }
                // Updated by Rajas on 7 AUGUST 2017 END
            }
            catch (Exception)
            {
            }
            #endregion
        }

        /// <summary>
        /// ADDED BY SHRADDHA ON 31 JAN 2018
        /// TO RESET SYSTEM
        /// <returns></returns>
        public ActionResult FactoryReset()
        {
            return View();
        }


        /// <summary>
        /// ADDED BY SHRADDHA ON 31 JAN 2018
        /// TO RESET SYSTEM
        /// <returns></returns>
        [HttpPost]
        public ActionResult FactoryReset(FormCollection fc)
        {
            WetosDB.SP_FactoryReset();
            return RedirectToAction("FactoryReset");
        }


        public ActionResult HTMLToPDF()
        {
            return View();
        }

        public ActionResult ExceptionEntryPV()
        {
            #region CODE ADDED BY SHRADDHA ON 31 MAR 2018 FOR BRANCH WISE ADMIN GET EMPLOYEE LIST
            int EmployeeId = Convert.ToInt32(Session["EmployeeNo"]);
            List<SP_ExceptionEntryListView_Result> ExceptionEntryListViewObj = WetosDB.SP_ExceptionEntryListView(EmployeeId).ToList();
            #endregion
            return PartialView(ExceptionEntryListViewObj);
        }

        public static void ShiftExtraHrsLateEarly(WetosDBEntities WetosDB, DailyTransaction DailyTransactionObj, DateTime CurrentDate
            , PostingFlagModel PostingFlagModelObj, ref string NewStatus, ref string UpdatedStatus, ref string ReturnMessage)
        {
            #region GET ALL REQUIRED LIST

            List<DailyTransaction> DailyTransactionListForCurrentDayList = new List<DailyTransaction>();
            List<HoliDay> HolidayList = new List<HoliDay>();
            List<DeclaredHoliday> DeclaredHolidayList = new List<DeclaredHoliday>();
            List<DeclaredHoliday> WorkOnDeclaredHolidayCompOffList = new List<DeclaredHoliday>(); // CODE ADDED BY SHRADDHA ON 14 AR 2018
            List<WetosDB.ExceptionEntry> ExceptionList = new List<WetosDB.ExceptionEntry>();
            List<RuleTransaction> AllRuleTransactionList = new List<RuleTransaction>();
            List<SP_POSTINGGetRequiredEmployeeDetails_Result> RequiredEmpDetListObj = new List<SP_POSTINGGetRequiredEmployeeDetails_Result>();
            List<CondoneTrn> CondoneTrnList = new List<CondoneTrn>();

            // ADDED BY MSJ ON 22 FEB 2019
            decimal NoofDaysToDeuctForLateCount = 0;

            try
            {
                // GET DAILY TRAN LIST FOR CURRENT DATE
                DailyTransactionListForCurrentDayList = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate
                    && (string.IsNullOrEmpty(a.Lock) ? false : a.Lock.ToUpper() == "N" ? false : true) == false).ToList();

                // GET HOLIDAY FOR ALL BRANCHES AND COMPANY
                HolidayList = WetosDB.HoliDays.Where(a => a.FromDate == CurrentDate && a.MarkedAsDelete == 0).ToList();

                // GET DECLARED HOLIDAY
                DeclaredHolidayList = WetosDB.DeclaredHolidays.Where(a => a.HolidayDate == CurrentDate && a.MarkASDelete != 1).ToList();

                // ADDED BY MSJ ON 21 JAN 2019
                // GET DECLARED HOLIDAY UTILIZED LIST
                //WorkOnDeclaredHolidayCompOffList = WetosDB.DeclaredHolidays.Where(a => a.CompWorkDay1 == CurrentDate && a.MarkASDelete != 1).ToList();
                WorkOnDeclaredHolidayCompOffList = WetosDB.DeclaredHolidays.Where(a => a.CompWorkDay1 == CurrentDate).ToList();
                // CODE ADDED BY SHRADDHA ON 14 MAR 2018

                // GET Exception List
                // Updated by Rajas on 17 AUGUST 2017 for sanctioned status only
                //ExceptionList = WetosDB.Exceptions.Where(a => a.ExceptionDate == CurrentDate && a.MarkedAsDelete == 0 && a.Status == "2").ToList();

                // Above line commented and below line added by Rajas on 26 SEP 2017
                // Comparison from status removed instead comparison from StatusId
                ExceptionList = WetosDB.ExceptionEntries.Where(a => a.ExceptionDate == CurrentDate && a.MarkedAsDelete == 0 && a.StatusId == 2).ToList();

                // GET ALL RULES
                AllRuleTransactionList = WetosDB.RuleTransactions.ToList();

                // GET Active employe list along with required group details 
                // Added by Rajas on 4 AUGUST 2017
                List<SP_POSTINGGetRequiredEmployeeDetails_Result> TEMPRequiredEmpDetListObj = new List<SP_POSTINGGetRequiredEmployeeDetails_Result>();
                TEMPRequiredEmpDetListObj = WetosDB.SP_POSTINGGetRequiredEmployeeDetails().ToList();

                RequiredEmpDetListObj = TEMPRequiredEmpDetListObj;

                //ADDED BY SHALAKA ON 01ST DEC 2017 FOR SINGLE OR MULTIPLE EMPOLYEES --- END

                // GET CONDONE ENTRY
                CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDate == CurrentDate).ToList();
            }
            catch (System.Exception ex)
            {

            }

            #endregion GET ALL REQUIRED LIST

            #region DEFINE VARIABLES

            Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();

            int EmployeeGroupId = WetosDB.EmployeeGroupDetails.Where(a => a.Employee.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroup.EmployeeGroupId).FirstOrDefault();

            // Get companyId
            int EmployeeCompanyId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                .Select(a => a.CompanyId).FirstOrDefault();

            // Get BranchId
            int EmployeeBranchId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId)
                .Select(a => a.BranchId).FirstOrDefault();

            int RuleAttendanceBase = Convert.ToInt32(WetosDB.RuleTransactions.Where(a => a.RuleId == 33 && a.EmployeeGroupId == EmployeeGroupId).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault());

            List<RuleTransaction> RuleTransactionList = WetosDB.RuleTransactions.Where(a => a.CompanyId == EmployeeObj.CompanyId
                                               && a.BranchId == EmployeeObj.BranchId && a.EmployeeGroupId == EmployeeGroupId).ToList();


            Shift ShiftObjForCurrentEmployee = new Shift(); // ADDED BY MSJ ON 28 JAN 2018
            GlobalSetting GlobalSettingObj = new GlobalSetting(); // ADDED BY MSJ ON 28 JAN 2018
            bool IsHalfDay = false;  // IsSaturday
            DateTime Intime = DailyTransactionObj.Login;
            DateTime OutTime = DailyTransactionObj.LogOut;
            // Added by Rajas on 14 JUNE 2017
            string Today = Intime.DayOfWeek.ToString();

            string ShiftForTekman = EmployeeObj.DefaultShift;
            DailyTransactionObj.ShiftId = ShiftForTekman;

            // Added by Rajas on 8 AUGUST 2017 START
            string ShiftDay = Convert.ToString(DailyTransactionObj.TranDate.DayOfWeek).ToUpper().Trim();
            // Added by Rajas on 16 AUGUST 2017 for marking Half Day shift as per Employee table value
            string WeeklyHalfDay = EmployeeObj.WeeklyHalfDay == null ? string.Empty : EmployeeObj.WeeklyHalfDay.ToUpper().Trim();

            // Updated by Rajas on 16 AUGUST 2017
            if (ShiftDay == WeeklyHalfDay) // MOVE TO GLOBAL SETTING ---> if (ShiftDay == "SATURDAY")
            {
                IsHalfDay = true;    // IsSaturday
            }

            // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
            RuleTransaction RuleForLateCount = RuleTransactionList.Where(a => a.RuleId == 16).FirstOrDefault();

            // Get rule whether to deduct attendance when employee is late beyond allowed limit
            // Added by Rajas on 20 SEP 2017
            string RuleForLateCountAttDeduction = RuleTransactionList.Where(a => a.RuleId == 14)
                .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

            // Get rule whether to deduct leave when employee is late beyond allowed limit
            // Added by Rajas on 20 SEP 2017
            string RuleForLateCountLeaveDeduction = RuleTransactionList.Where(a => a.RuleId == 13)
                .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

            // Modified by Rajas on 21 APRIL 2017 for getting allowed late count in a month from rule
            RuleTransaction RuleForEarlyCount = RuleTransactionList.Where(a => a.RuleId == 46).FirstOrDefault();

            // Get rule whether to deduct attendance when employee is early beyond allowed limit
            // Added by Rajas on 20 SEP 2017
            string RuleForEarlyCountAttDeduction = RuleTransactionList.Where(a => a.RuleId == 14)
                .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

            // Get rule whether to deduct leave when employee is early beyond allowed limit
            // Added by Rajas on 20 SEP 2017
            string RuleForEarlyCountLeaveDeduction = RuleTransactionList.Where(a => a.RuleId == 13)
                .Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();

            // Get value for deduction in case of attendance or leave, if employee crossed early count limit
            // Added by Rajas on 20 SEP 2017
            string NoOfDaysDeduct = RuleTransactionList.Where(a => a.RuleId == 17).Select(a => a.Formula).FirstOrDefault();
            int DeductionDay = 0;
            if (NoOfDaysDeduct != null)
            {
                // Updated by Rajas on 25 SEP 2017
                // Case 3 not exist so, default case will be executed.
                DeductionDay = NoOfDaysDeduct == "0.5" ? 3 : Convert.ToInt32(NoOfDaysDeduct);

                // ADDED BY MSJ ON 22 FEB 2019 
                NoofDaysToDeuctForLateCount = Convert.ToDecimal(NoOfDaysDeduct);
            }

            //-----------------------Added by Rajas on 28 SEP 2017 START----------------------------------

            // Get ',' seperated Leave codes as value for deduction
            string DeductLeaveCode = RuleTransactionList.Where(a => a.RuleId == 15).Select(a => a.Formula.Trim()).FirstOrDefault();

            #region SET IsFlexiShiftAllowed BASED UPON ATTENDNACE BASED
            //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 09 FEB 2018
            // Check whether Flexi shift is allowed or not
            string IsFlexiShiftAllowed = RuleTransactionList.Where(a => a.RuleId == 27).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault() == null ? "" : RuleTransactionList.Where(a => a.RuleId == 27).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
            //string IsFlexiShiftAllowed = "FALSE";
            //if (RuleAttendanceBase == 3)
            //{
            //    IsFlexiShiftAllowed = "TRUE";
            //}

            #endregion
            #endregion

            #region ATTENDANCE BASE TYPE

            RuleAttendanceBase = Convert.ToInt32(WetosDB.RuleTransactions.Where(a => a.RuleId == 33).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault());

            #region POSTING SHIFT TYPES
            //1 - DEFAULT SHIFT
            //2 - SHIFT SCHEDULE
            //3 - FLEXY SHIFT
            //4 - AUTO SHIFT
            #endregion


            if (RuleAttendanceBase == 3 || IsFlexiShiftAllowed.Trim().ToUpper() == "TRUE") // 3 - FLEXY SHIFT
            {
                #region CONSIDER FLEXY SHIFT

                string WorkingHoursAsPerShift = RuleTransactionList.Where(a => a.RuleId == 12).Select(a => a.Formula.ToUpper().Trim()).FirstOrDefault();
                if (IsFlexiShiftAllowed == "TRUE")
                {
                    if (WorkingHoursAsPerShift != "TRUE")
                    {
                        string WorkHoursHalfDayLimit = RuleTransactionList.Where(a => a.RuleId == 29).Select(a => a.Formula).FirstOrDefault();
                        string WorkHoursFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 28).Select(a => a.Formula).FirstOrDefault();

                        if (WorkHoursHalfDayLimit != null && WorkHoursFullDayLimit != null)
                        {
                            DateTime HalfDayLimit = Convert.ToDateTime(WorkHoursHalfDayLimit);
                            DateTime FullDayLimit = Convert.ToDateTime(WorkHoursFullDayLimit);

                            // ADDED BY MSJ IN 02 APR 2018 // ADDED WORKING HOURS NULL VL
                            if (DailyTransactionObj.WorkingHrs != null) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                            {
                                if (HalfDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
                                {
                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                }
                                else if ((HalfDayLimit.TimeOfDay < DailyTransactionObj.WorkingHrs.Value.TimeOfDay)
                                    && (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay))
                                {
                                    DailyTransactionObj.Status = StatusConstants.SecondHalfAbsentStatus;
                                }
                                else if (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay) //MODIFIED BY PUSHKAR ON 4 APRIL
                                {
                                    string EarlyTime = (FullDayLimit.TimeOfDay - DailyTransactionObj.WorkingHrs.Value.TimeOfDay).ToString();

                                    string Earlystring = DailyTransactionObj.WorkingHrs.Value.ToShortDateString() + " " + EarlyTime;

                                    DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);

                                    int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                    int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                    // Get Max early count from existing
                                    int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions
                                        .Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                               && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear
                                               && a.TranDate < DailyTransactionObj.TranDate)
                                               .Select(a => a.EarlyCount).Max());

                                    DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;  // Update early count

                                    if (RuleForEarlyCount != null)
                                    {
                                        int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

                                        if (MaxearlyCountForEmployee == 0)
                                        {
                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                        }

                                        else
                                        {
                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                        }

                                        WetosDB.SaveChanges();

                                        #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                        // Code in this region modified by Rajas on 20 SEP 2017 START

                                        if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "FALSE")
                                        {
                                            // Added by Rajas on 12 AUGUST 2017 
                                            // Global setting value base deduction 
                                            if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                            {
                                                if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                {
                                                    switch (DeductionDay)
                                                    {
                                                        case 0:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        case 1:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        default:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;
                                                    }

                                                }
                                            }
                                            else   // Deduct half day after every allowed late count 
                                            {
                                                if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
                                                {
                                                    switch (DeductionDay)
                                                    {
                                                        case 0:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        case 1:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        default:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;
                                                    }
                                                }
                                                else // Updated by Rajas on 1 SEP 2017
                                                {
                                                    if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                    {
                                                        switch (DeductionDay)
                                                        {
                                                            case 0:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;

                                                            case 1:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;

                                                            default:
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
                                        {
                                            string[] LeaveCodes = DeductLeaveCode.Split(',');
                                            int Count = LeaveCodes.Length;

                                            // Check balance for First leave type
                                            for (int i = 0; i <= Count; i++)
                                            {
                                                string LeaveType = LeaveCodes[i].Trim();

                                                LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                    && a.LeaveType == LeaveType).FirstOrDefault();

                                                if (AvailableLeaveBalance != null)
                                                {
                                                    if (AvailableLeaveBalance.CurrentBalance > 0)
                                                    {
                                                        double Deduction = Convert.ToDouble(NoOfDaysDeduct);
                                                        if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                        {
                                                            // Deduct balance for Leave
                                                            AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                                            AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                                            // Update entry in DailyTransaction for Deducted leave type
                                                            DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                                            DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                                            //WetosDB.SaveChanges();
                                                        }

                                                        break; // If deduction is done then stop loop.
                                                    }
                                                }

                                            }
                                        }
                                        else  // Early mark only. No deduction
                                        {
                                            // Updated by Rajas on 28 SEP 2017
                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                            DailyTransactionObj.Remark = "Early";
                                        }

                                        // Code in this region modified by Rajas on 20 SEP 2017 END

                                        #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                    }

                                    WetosDB.SaveChanges();
                                }
                                else
                                {
                                    DailyTransactionObj.Status = StatusConstants.FullDayPresentStatus;
                                }
                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region FIND SHIFT
                if (RuleAttendanceBase == 1)
                {
                    //ADDED IF CONDITION BY SHRADDHA ON 15 MAR 2018 AND ADDED EARLIER CODE IN ELSE PART
                    if (ExceptionList.Count > 0)
                    {
                        #region IF EXCEPTION ENTRY AVAILABLE FOR SELECTED DATE
                        ExceptionEntry ExceptionObjForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                        if (ExceptionObjForSelectedEmployees != null)
                        {
                            DailyTransactionObj.ShiftId = ExceptionObjForSelectedEmployees.ShiftId;
                            WetosDB.SaveChanges();
                            ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                        }
                        #endregion
                    }
                    else
                    {
                        #region CONSIDER SHIFT FROM DEFAULT SHIFT
                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift && a.BranchId == EmployeeObj.BranchId).FirstOrDefault();
                        if (ShiftObjForCurrentEmployee != null)
                        {
                            DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                            WetosDB.SaveChanges();
                        }
                        #endregion
                    }
                }
                else if (RuleAttendanceBase == 2)
                {
                    //ADDED IF CONDITION BY SHRADDHA ON 15 MAR 2018 AND ADDED EARLIER CODE IN ELSE PART
                    if (ExceptionList.Count > 0)
                    {
                        #region IF EXCEPTION ENTRY AVAILABLE FOR SELECTED DATE
                        ExceptionEntry ExceptionObjForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                        if (ExceptionObjForSelectedEmployees != null)
                        {
                            DailyTransactionObj.ShiftId = ExceptionObjForSelectedEmployees.ShiftId;
                            WetosDB.SaveChanges();
                            ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                        }
                        #endregion
                    }
                    else
                    {
                        #region CONSIDER SHIFT SCHEDULE
                        List<ShiftSchedulePattern> ShiftSchedulePatternList = WetosDB.ShiftSchedulePatterns.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                   && a.ShiftMonth == DailyTransactionObj.TranDate.Month && a.ShiftYear == DailyTransactionObj.TranDate.Year).ToList();

                        // MODIFIED BY SHALAKA ON 12 DEC 2017 START
                        if (ShiftSchedulePatternList.Count > 0) //if (ShiftSchedulePatternList != null)
                        {
                            List<ShiftSchedulePattern> ShiftSchedulePatternListForPerticularDateRange = ShiftSchedulePatternList.Where(a => a.EffectiveStartDate <= DailyTransactionObj.TranDate
                                && a.EffectiveEndDate >= DailyTransactionObj.TranDate).ToList();

                            if (ShiftSchedulePatternListForPerticularDateRange.Count > 0)
                            {
                                foreach (ShiftSchedulePattern ShiftSchedulePatternObjForPerticularDateRange in ShiftSchedulePatternListForPerticularDateRange)
                                {
                                    int y = DailyTransactionObj.TranDate.Day;

                                    string command = string.Format(@"select Day{0} from ShiftSchedulePattern where EmployeeId={1} and EffectiveStartDate<='{2}/{3}/{4} {5}' and EffectiveEndDate>='{2}/{3}/{4} {5}' and companyId={6} and branchid={7};"
                                      , y, DailyTransactionObj.EmployeeId, DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, "00:00", DailyTransactionObj.CompanyId, DailyTransactionObj.BranchId);
                                    string Shift = WetosDB.ExecuteStoreQuery<string>(command, "").FirstOrDefault();
                                    DailyTransactionObj.ShiftId = Shift;

                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == Shift).FirstOrDefault();

                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                        && a.BranchId == EmployeeBranchId
                                        //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                                         && a.FirstInTime == ShiftObjForCurrentEmployee.FirstInTime).FirstOrDefault();

                                    WetosDB.SaveChanges();

                                }
                            }
                            else if (GlobalSettingObj != null) // Added by Rajas on 17 JUNE 2017
                            {
                                // Get Global seeting value and saturday 
                                if (GlobalSettingObj.SettingValue.Trim() == "1" && IsHalfDay == true)
                                {
                                    // Mark Half Day shift with ShiftCode H 
                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode.ToUpper().Trim() == StatusConstants.HalfDayShift).FirstOrDefault();

                                    DailyTransactionObj.ShiftId = StatusConstants.HalfDayShift;  // Added by Rajas on 16 AUGUST 2017
                                }
                                else
                                {
                                    ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == EmployeeObj.DefaultShift).FirstOrDefault();
                                }

                                WetosDB.SaveChanges();  // Added by Rajas on 16 AUGUST 2017

                                if (ShiftObjForCurrentEmployee != null)
                                {
                                    DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                    WetosDB.SaveChanges();
                                }
                            }
                            else
                            {
                                #region GET SHIFT  FROM CLOSEST TIME

                                DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                    && a.BranchId == EmployeeBranchId
                                    //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                                    //&& a.ShiftCode == EmployeeObj.DefaultShift
                                    ).Select(a => a.FirstInTime).ToArray();

                                long min = long.MaxValue;

                                DateTime ClosestTime = new DateTime();

                                foreach (DateTime CurrentDateTime in FirstInTimeArray)
                                {
                                    // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
                                    long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
                                    if (TempDIff < min)
                                    {
                                        min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
                                        ClosestTime = CurrentDateTime;
                                    }
                                    // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
                                }

                                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                                    && a.BranchId == EmployeeBranchId
                                    //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                                     && a.FirstInTime == ClosestTime).FirstOrDefault();

                                if (ShiftObjForCurrentEmployee != null)
                                {
                                    DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                                    WetosDB.SaveChanges();
                                }

                                #endregion // COMMON CODE
                            }
                        }
                        #endregion
                    }
                }
                else if (RuleAttendanceBase == 4) // 4- AUTO SHIFT
                {
                    //ADDED IF CONDITION BY SHRADDHA ON 15 MAR 2018 AND ADDED EARLIER CODE IN ELSE PART
                    //if (ExceptionList.Count > 0)
                    //{
                    //    #region IF EXCEPTION ENTRY AVAILABLE FOR SELECTED DATE
                    //    ExceptionEntry ExceptionObjForSelectedEmployees = ExceptionList.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).FirstOrDefault();
                    //    if (ExceptionObjForSelectedEmployees != null)
                    //    {
                    //        DailyTransactionObj.ShiftId = ExceptionObjForSelectedEmployees.ShiftId;
                    //        WetosDB.SaveChanges();
                    //        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                    //    }
                    //    #endregion
                    //}
                    //else
                    //{
                    #region GET SHIFT  FROM CLOSEST TIME

                    DateTime[] FirstInTimeArray = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                        && a.BranchId == EmployeeBranchId
                        //&& a.BranchId == EmployeeBranchId  // COMMENTED TWO LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                        //&& a.ShiftCode == EmployeeObj.DefaultShift
                        ).Select(a => a.FirstInTime).ToArray();

                    long min = long.MaxValue;

                    DateTime ClosestTime = new DateTime();

                    foreach (DateTime CurrentDateTime in FirstInTimeArray)
                    {
                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME START
                        long TempDIff = Math.Abs(CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks);
                        if (TempDIff < min)
                        {
                            min = TempDIff; // CurrentDateTime.TimeOfDay.Ticks - Intime.TimeOfDay.Ticks;
                            ClosestTime = CurrentDateTime;
                        }
                        // ADDED BY MSJ ON 12 DEC 2017 TO IDENTIFY THE CLOEST TIME END
                    }


                    DateTime NSTime = new DateTime(Intime.Year, Intime.Month, Intime.Day, 23, 00, 00);
                    if (Intime.TimeOfDay > NSTime.TimeOfDay)
                    {
                        // NS ISSUE FIXED BY MSJ ON 29 JAN 2018
                        DailyTransactionObj.ShiftId = WetosDB.Shifts.Where(a => a.ShiftType.ToUpper().Contains("Third")
                            || a.ShiftType.ToUpper().Contains("Night")).Select(a => a.ShiftCode).FirstOrDefault();//"C";

                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                    }
                    else if (DailyTransactionObj.TranDate.Date < DailyTransactionObj.Login.Date) // NS LOGIC ADDED BY PUSHKAR ON 09 DEC 2019
                    {
                        DailyTransactionObj.ShiftId = WetosDB.Shifts.Where(a => a.ShiftType.ToUpper().Contains("Third")
                           || a.ShiftType.ToUpper().Contains("Night")).Select(a => a.ShiftCode).FirstOrDefault();//"C";

                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId).FirstOrDefault();
                    }
                    else
                    {
                        ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.Company.CompanyId == EmployeeCompanyId
                            && a.BranchId == EmployeeBranchId
                            //&& a.BranchId == EmployeeBranchId  // COMMENTED LINE AS DUPLICATE BRANCH on 12 DEC 2017 BY MSJ
                             && a.FirstInTime == ClosestTime).FirstOrDefault();
                    }

                    if (ShiftObjForCurrentEmployee != null)
                    {
                        DailyTransactionObj.ShiftId = ShiftObjForCurrentEmployee.ShiftCode;

                        WetosDB.SaveChanges();
                    }

                    #endregion // COMMON CODE
                    //}
                }
                #endregion

                #region CONSIDER WORKING HOURS FROM SHIFT START TIME AS PER RULE
                RuleTransaction ConsiderWorkingHoursFromShiftStartTime = RuleTransactionList.Where(a => a.RuleId == 31).FirstOrDefault();
                ShiftObjForCurrentEmployee = WetosDB.Shifts.Where(a => a.ShiftCode == DailyTransactionObj.ShiftId && a.BranchId == EmployeeObj.BranchId
                    ).FirstOrDefault();

                if (ConsiderWorkingHoursFromShiftStartTime != null && ConsiderWorkingHoursFromShiftStartTime.Formula.ToUpper().Trim() == "TRUE")
                {
                    // ADDED BY MSJ ON 07 DEC 2019
                    //if (DailyTransactionObj.Login.TimeOfDay < ShiftObjForCurrentEmployee.FirstInTime.TimeOfDay && DailyTransactionObj.WorkingHrs != null && DailyTransactionObj.Login < DailyTransactionObj.LogOut)
                    //MODIFIED BY PUSHKAR ON 09 DEC 2019
                    if (DailyTransactionObj.Login < new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month,
                         DailyTransactionObj.TranDate.Day, ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute,
                        ShiftObjForCurrentEmployee.FirstInTime.Second)
                        && DailyTransactionObj.WorkingHrs != null
                        && DailyTransactionObj.Login < DailyTransactionObj.LogOut)
                    {
                        DateTime LoginTime = new DateTime(DailyTransactionObj.Login.Year, DailyTransactionObj.Login.Month, DailyTransactionObj.Login.Day, ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute, ShiftObjForCurrentEmployee.FirstInTime.Second);

                        TimeSpan WorkingHrs = DailyTransactionObj.LogOut - LoginTime;
                        if (WorkingHrs < new TimeSpan(0, 0, 0))
                        {
                            WorkingHrs = new TimeSpan(0, 0, 0);
                        }
                        DailyTransactionObj.WorkingHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, WorkingHrs.Hours, WorkingHrs.Minutes, WorkingHrs.Seconds);

                        if (DailyTransactionObj.WorkingHrs != null && ShiftObjForCurrentEmployee.WorkingHours != null)
                        {
                            if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay)
                            {
                                TimeSpan ExtraHrs = DailyTransactionObj.WorkingHrs.Value.TimeOfDay - ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay;
                                DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);
                            }
                        }
                        else
                        {
                            DailyTransactionObj.ExtraHrs = null;
                        }
                        WetosDB.SaveChanges();
                    }
                    else
                    {
                        if (DailyTransactionObj.WorkingHrs != null && ShiftObjForCurrentEmployee.WorkingHours != null)
                        {
                            if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay)
                            {
                                TimeSpan ExtraHrs = DailyTransactionObj.WorkingHrs.Value.TimeOfDay - ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay;

                                DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);
                                WetosDB.SaveChanges();
                            }
                        }
                    }
                }
                else
                {
                    if (DailyTransactionObj.WorkingHrs != null && ShiftObjForCurrentEmployee.WorkingHours != null)
                    {
                        if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay > ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay)
                        {
                            TimeSpan ExtraHrs = DailyTransactionObj.WorkingHrs.Value.TimeOfDay - ShiftObjForCurrentEmployee.WorkingHours.TimeOfDay;
                            DailyTransactionObj.ExtraHrs = new DateTime(DailyTransactionObj.WorkingHrs.Value.Year, DailyTransactionObj.WorkingHrs.Value.Month, DailyTransactionObj.WorkingHrs.Value.Day, ExtraHrs.Hours, ExtraHrs.Minutes, ExtraHrs.Seconds);
                            WetosDB.SaveChanges();
                        }
                    }
                }
                #endregion

                #region LATE/EARLY Logic as per Shift time and Attendance rules

                /// IsLateCountToBeIncremented YES/NO
                /// Flag added by Rajas on 28 APRIL 2017
                bool IsLateCountToBeIncremented = true;

                /// IsEarlyCountToBeIncremented YES/NO
                /// Flag added by Rajas on 28 APRIL 2017
                bool IsEarlyCountToBeIncremented = true;

                //bool IsUpdateStatus = false;  // Added by Rajas on 4 AUGUST 2017

                // Initialise GlobalSettingObj
                GlobalSettingObj = new GlobalSetting();
                //GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == "Is Cont Late Deduction").FirstOrDefault();

                //ABOVE LINE COMMENTED AND BELOW LINE IS ADDED BY SHALAKA ON 13TH DEC 2017
                GlobalSettingObj = WetosDB.GlobalSettings.Where(a => a.SettingText.Trim() == GlobalSettingsConstant.IsContLateDeduction).FirstOrDefault();

                if (DailyTransactionObj.WorkingHrs != null)
                {
                    #region CODE FOR MINIMUM WORKING HOURS LIMIT FOR FULL DAY
                    #region CODE ADDED BY SHRADDHA ON 15 MAR 2018 NEED TO VERIFY BY MSJ
                    string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                    if (!string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                    {
                        string[] MarkAsPresentFullDayLimitArray = MarkAsPresentFullDayLimit.Split(':');
                        int MarkAsPresentFullDayLimitHour = Convert.ToInt32(MarkAsPresentFullDayLimitArray[0]);
                        int MarkAsPresentFullDayLimitMinute = Convert.ToInt32(MarkAsPresentFullDayLimitArray[1]);
                        int MarkAsPresentFullDayLimitTotalValue = (MarkAsPresentFullDayLimitHour * 60) + MarkAsPresentFullDayLimitMinute;

                        int WorkingHoursTotal = (DailyTransactionObj.WorkingHrs.Value.Hour * 60) + DailyTransactionObj.WorkingHrs.Value.Minute;

                        if (WorkingHoursTotal > MarkAsPresentFullDayLimitTotalValue)
                        {
                            DailyTransactionObj.Status = StatusConstants.FullDayPresentStatus; //"PPPP";
                            WetosDB.SaveChanges();
                        }
                        else if (WorkingHoursTotal == MarkAsPresentFullDayLimitTotalValue)
                        {
                            DailyTransactionObj.Status = StatusConstants.SecondHalfAbsentStatus; //"PPAA";
                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
                            WetosDB.SaveChanges();
                        }
                    }
                    #endregion
                    #endregion
                }


                #region LOGIC FOR LATE MARK AND SHIFT

                ReturnMessage = string.Empty;
                UpdatedStatus = string.Empty;
                NewStatus = string.Empty;

                // Rest all flags
                PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

                // LOGIC FOR LATE MARK AND SHIFT
                if (ShiftObjForCurrentEmployee == null)
                {
                    ShiftObjForCurrentEmployee = WetosDB.Shifts.FirstOrDefault();
                }

                //DateTime FirstInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstInTime);

                // ADDED BY MSJ ON 28 JAN 2018 START
                //DateTime FirstInTime = ShiftObjForCurrentEmployee.FirstInTime; //OKAY CODE
                // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                DateTime FirstInTime = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month
                    , DailyTransactionObj.TranDate.Day,
                    ShiftObjForCurrentEmployee.FirstInTime.Hour, ShiftObjForCurrentEmployee.FirstInTime.Minute
                    , ShiftObjForCurrentEmployee.FirstInTime.Second);


                // DateTime FirstOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.FirstOutTime);
                //DateTime FirstOutTime = ShiftObjForCurrentEmployee.FirstOutTime; //OKAY CODE
                // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                DateTime FirstOutTime = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month
                    , DailyTransactionObj.TranDate.Day,
                    ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
                    , ShiftObjForCurrentEmployee.FirstOutTime.Second);
                if (ShiftObjForCurrentEmployee.IsOutPunchInNextDay == true)
                {

                    FirstOutTime = new DateTime(DailyTransactionObj.TranDate.AddDays(1).Year, DailyTransactionObj.TranDate.AddDays(1).Month
                     , DailyTransactionObj.TranDate.AddDays(1).Day,
                     ShiftObjForCurrentEmployee.FirstOutTime.Hour, ShiftObjForCurrentEmployee.FirstOutTime.Minute
                     , ShiftObjForCurrentEmployee.FirstOutTime.Second);
                }


                // ADDED BY MSJ ON 28 JAN 2018 END

                //CODE ADDED BY SHRADDHA ON 03 APR 2017 FOR TAKING SECOND OUT TIME
                //DateTime SecondInTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondInTime);
                DateTime? SecondInTime = ShiftObjForCurrentEmployee.SecondInTime;
                // DateTime SecondOutTime = Convert.ToDateTime(ShiftObjForCurrentEmployee.SecondOutTime);
                DateTime? SecondOutTime = ShiftObjForCurrentEmployee.SecondOutTime;


                // LATE COMING GRACE TIME FROM RULE 5
                //int LCGraceTimeMinutes = 00;

                if (RuleTransactionList != null && PostingFlagModelObj.IsWeekOff == false && PostingFlagModelObj.IsHoliDay == false)
                {
                    // 5 - allowed late comming min
                    string LateComingAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 5).Select(a => a.Formula).FirstOrDefault();

                    if (!string.IsNullOrEmpty(LateComingAllowedMinutesStr))
                    {
                        string[] LateComingAllowedMinutesStrArray = LateComingAllowedMinutesStr.Split(':');

                        //COMMENTED BY SHRADDHA ON 03 APR 2017 BECAUSE IT IS NOT REQUIREED IN CASE OF FLAGSHIP
                        //  LCGraceTimeMinutes = Convert.ToInt32(LateComingAllowedMinutesStrArray[0]) * 60 + Convert.ToInt32(LateComingAllowedMinutesStrArray[1]);
                    }

                    /// Added by Rajas on 28 APRIL 2017 START
                    /// To check GraceLateAllowed limit

                    // 4 - Grace late allowed limit
                    string GraceLateAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 4).Select(a => a.Formula).FirstOrDefault();

                    DateTime GraceLateAllowedMin = Convert.ToDateTime(GraceLateAllowedLimit);

                    TimeSpan LCGraceTimeMinutes = GraceLateAllowedMin.TimeOfDay;
                    /// Added by Rajas on 28 APRIL 2017 END

                    //DateTime EarlyAllowedMinutes = Convert.ToDateTime(RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault());
                    //DateTime LateAllowedTime = SecondInTime.Add(LateAllowedMinutes.TimeOfDay);
                    // DateTime EarlyAllowedTime = SecondOutTime.Subtract(EarlyAllowedMinutes.TimeOfDay);

                    // LATE COMING LOGIC START
                    // int LateMarkCount = 1;
                    // Below line for FirstInTime modified by Rajas on 18 APRIL 2017

                    // MOVED THESE TWO VARIABLE OUT OF THE LOOP
                    string LateTimeString = string.Empty;
                    string Latestring = string.Empty;
                    DateTime CalculatedLateTime = DateTime.Now.Date;
                    DateTime LateAllowedLimit = DateTime.Now.Date;

                    // ADDED BY MSJ ON 29 JAN 2018 START
                    // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                    if (Intime > FirstInTime)
                    {
                        LateTimeString = (Intime - FirstInTime).ToString();  // SecondInTime.TimeOfDay
                        CalculatedLateTime = Convert.ToDateTime(LateTimeString);
                    }
                    // ADDED BY MSJ ON 19 JAN 2018 END
                    // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                    if (Intime > FirstInTime && CalculatedLateTime.Hour < 8)  // SecondInTime.TimeOfDay
                    {
                        //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start

                        // ADDED BY MSJ ON 29 JAN 2018 START
                        // ADDED BY PUSHKAR ON 09 DEC 2019 FOR NS LOGIC 
                        if (Intime > FirstInTime)
                        {
                            // Below line for FirstInTime modified by Rajas on 18 APRIL 2017
                            LateTimeString = (Intime - FirstInTime).ToString();  // SecondInTime.TimeOfDay //------------------xxxxxxxxx------------
                            //Modified By Shraddha on 23 FEB 2017 Taken Late minutes count from second in time instead of taking first in time as Per discuss with Nidhi mam Start
                            Latestring = Intime.ToShortDateString() + " " + LateTimeString;

                            // Added by Rajas on 28 APRIL 2017 START
                            // To deduct Half day directly from Attendance, if employee crosses LateAllowed limit 
                            LateAllowedLimit = Convert.ToDateTime(LateComingAllowedMinutesStr); // MODIFIED MSJ 
                            CalculatedLateTime = Convert.ToDateTime(LateTimeString);
                        }

                        // Save original attendance status
                        // Added by Rajas on 8 AUGUST 2017
                        DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                        if (CalculatedLateTime > GraceLateAllowedMin)
                        {
                            //// Added by Rajas on 29 APRIL 2017
                            //DailyTransactionObj.Status = "PPPP^";

                            // Updated by Rajas on 8 AUGUST 2017 START
                            PostingFlagModelObj.IsLate = true;
                            string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                            //if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                            {
                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                DailyTransactionObj.Status = UpdatedStatus;
                            }
                            // Updated by Rajas on 8 AUGUST 2017 END
                        }

                        if (CalculatedLateTime > LateAllowedLimit)  // GRACE < LATE ALLOED ? NEED TO VERIFY
                        {
                            //DailyTransactionObj.Status = "AAPP^";  // AAPP
                            DailyTransactionObj.Remark = "Late";

                            // Updated by Rajas on 8 AUGUST 2017 START
                            PostingFlagModelObj.IsFirstHalfAbsentDueToLatecoming = true;
                            string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                            //if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit)) // MarkAsPresentFullDayLimit IS NOT AVAILABLE //COMMENTED BY SHRADDHA ON 27 MAR 2018 AS PER SUGGESTED BY MSJ
                            {
                                GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                DailyTransactionObj.Status = UpdatedStatus;
                            }
                            // Updated by Rajas on 8 AUGUST 2017 END

                            /// NOTE:
                            /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
                            /// If Employee is late beyond late allowed limit then deduct Half day directly
                            /// In this case don't update late count as action already taken for late employee.
                            IsLateCountToBeIncremented = false;
                        }
                        // Added by Rajas on 28 APRIL 2017 END

                        // late by min
                        DailyTransactionObj.Late = Convert.ToDateTime(Latestring);
                        //WetosDB.SaveChanges();

                        int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                        int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                        int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                        // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
                        TimeSpan LateBy = Intime - FirstInTime; // SecondInTime.TimeOfDay;

                        // Updated by Rajas on 28 APRIL 2017, && IsLateCountToBeIncremented == true added
                        if (LateBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsLateCountToBeIncremented == true)
                        {
                            //int TotalLateCountForEmployeeTillDate = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                            //   && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.LateCount != null).Count());

                            // Updated by Rajas on 24 AUGUST 2017 to fix late count issue

                            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 START
                            //int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId)
                            //    .Select(a => a.LateCount).Max());
                            int MaxLateCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                            && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
                            .Select(a => a.LateCount).Max());
                            //COMMENTED EARLIER CODE AND ADDED NEW CODE BY SHRADDHA ON 08 FEB 2018 END
                            if (RuleForLateCount != null)
                            {
                                int LateAllowed = Convert.ToInt32(RuleForLateCount.Formula);

                                if (MaxLateCountForEmployee == 0)
                                {
                                    DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
                                }
                                else
                                {
                                    DailyTransactionObj.LateCount = MaxLateCountForEmployee + 1;
                                }

                                WetosDB.SaveChanges();

                                #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                // Code in this region modified by Rajas on 20 SEP 2017 START
                                string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                //if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                {
                                    if (RuleForLateCountAttDeduction != null && RuleForLateCountAttDeduction == "TRUE")
                                    {
                                        // Added by Rajas on 12 AUGUST 2017 
                                        // Global setting value base deduction 
                                        if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                        {
                                            if (DailyTransactionObj.LateCount % LateAllowed == 0) // MULTIPLE OF 3
                                            {
                                                switch (DeductionDay)
                                                {
                                                    case 0:
                                                        if (DailyTransactionObj.Status.Length > 3)
                                                        {
                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                        }
                                                        DailyTransactionObj.Remark = "Late";
                                                        break;

                                                    case 1:

                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                        DailyTransactionObj.Remark = "Late";
                                                        break;

                                                    default:
                                                        if (DailyTransactionObj.Status.Length > 3)
                                                        {
                                                            DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                        }
                                                        DailyTransactionObj.Remark = "Late";
                                                        break;
                                                }

                                            }
                                        }
                                        else   // Deduct half day after every allowed late count 
                                        {
                                            if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > LateAllowed)
                                            {
                                                switch (DeductionDay)
                                                {
                                                    case 0:
                                                        if (DailyTransactionObj.Status.Length > 3)
                                                        {
                                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                        }
                                                        DailyTransactionObj.Remark = "Late";
                                                        break;

                                                    case 1:
                                                        if (DailyTransactionObj.Status.Length > 3)
                                                        {
                                                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                        }
                                                        DailyTransactionObj.Remark = "Late";
                                                        break;

                                                    default:
                                                        if (DailyTransactionObj.Status.Length > 3)
                                                        {
                                                            DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                        }
                                                        DailyTransactionObj.Remark = "Late";
                                                        break;
                                                }
                                            }
                                            else // Updated by Rajas on 1 SEP 2017
                                            {
                                                if (DailyTransactionObj.LateCount % LateAllowed == 0)
                                                {
                                                    switch (DeductionDay)
                                                    {
                                                        case 0:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Late";
                                                            break;

                                                        case 1:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                            }
                                                            DailyTransactionObj.Remark = "Late";
                                                            break;

                                                        default:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2) + "^"; //"AAPP^";
                                                            }
                                                            DailyTransactionObj.Remark = "Late";
                                                            break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (RuleForLateCountLeaveDeduction != null && RuleForLateCountLeaveDeduction == "TRUE")
                                    {
                                        // Logic for deduction of Leave is pending

                                        // Added By MSJ on 13 March 2019 START
                                        DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, LateAllowed, DeductLeaveCode, NoOfDaysDeduct, 2);
                                        // Added By MSJ on 13 March 2019 END

                                        //// ADDED BY MSJ ON 22 FEB 2019 START

                                        //if (DailyTransactionObj.LateCount > LateAllowed)
                                        //{

                                        //    string[] LeaveCodes = DeductLeaveCode.Split(',');
                                        //    int Count = LeaveCodes.Length;

                                        //    double Deduction = Convert.ToDouble(NoOfDaysDeduct);

                                        //    // Check balance for First leave type
                                        //    for (int i = 0; i <= Count; i++)
                                        //    {
                                        //        string LeaveType = LeaveCodes[i].Trim();

                                        //        LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                        //            && a.LeaveType == LeaveType).FirstOrDefault();

                                        //        if (AvailableLeaveBalance != null)
                                        //        {
                                        //            double LeaveBalAfterDucuction = AvailableLeaveBalance.CurrentBalance.Value - Deduction;

                                        //            //if (AvailableLeaveBalance.CurrentBalance > 0)
                                        //            if (LeaveBalAfterDucuction > 0)
                                        //            {

                                        //                //if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                        //                {
                                        //                    // Deduct balance for Leave
                                        //                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                        //                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                        //                    // Update entry in DailyTransaction for Deducted leave type
                                        //                    DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                        //                    DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                        //                    //WetosDB.SaveChanges();
                                        //                }

                                        //                break; // If deduction is done then stop loop.
                                        //            }
                                        //            else
                                        //            {
                                        //                Deduction = 0 - LeaveBalAfterDucuction;
                                        //            }
                                        //        }

                                        //    }

                                        //    if (Deduction > 0)
                                        //    {
                                        //        // MARKED AS ABSENT // ADDED BY MSJ ON 13 MARCH 2019'
                                        //        MarkAsAbsent(GlobalSettingObj, DailyTransactionObj, DeductionDay, LateAllowed);
                                        //    }

                                        //}
                                        //// ADDED BY MSJ ON 22 FEB 2019 END
                                    }
                                    else  // Late mark only. No deduction
                                    {
                                        // Updated by Rajas on 28 SEP 2017
                                        if (DailyTransactionObj.Status.Length > 3)
                                        {
                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                        }
                                        DailyTransactionObj.Remark = "Late";
                                    }
                                }
                                //else  // Late mark only. No deduction
                                //{
                                //    // Updated by Rajas on 28 SEP 2017
                                //    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                //    DailyTransactionObj.Remark = "Late";
                                //}
                                // Code in this region modified by Rajas on 20 SEP 2017 END

                                #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES
                            }
                            //CODE ADDED BY SHRADDHA ON 04 EB 2017 FOR HALF DAY MARK AFTER AllowedLimit LATECOUNTS END

                            WetosDB.SaveChanges();

                            //  IsUpdateStatus = true; // (19 AUG 2017) At this momnet not required 

                            //// Added by Rajas on 5 AUGUST 2017
                            //PreviousLateCount = DailyTransactionObj.LateCount == null ? 0 : DailyTransactionObj.LateCount.Value;
                        }
                        else  // Added by Rajas on 5 AUGUST 2017
                        {
                            //// Employee is Not Late, then
                            //DailyTransactionObj.LateCount = PreviousLateCount;
                            //WetosDB.SaveChanges();
                        }


                    }
                }
                // LATE COMING LOGIC END
                #endregion

                if (DailyTransactionObj.WorkingHrs != null)
                {
                    #region CODE FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO

                    // What will happen in case of night shift

                    //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
                    if (DailyTransactionObj.TranDate.ToShortDateString() != DateTime.Now.ToShortDateString())
                    {
                        //CONDITION ADDED BY SHRADDHA ON 28 MARCH 2017 TO PREVENT CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO IF TRANDATE IS EQUAL TO TODAY START
                        //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO START
                        if (DailyTransactionObj.WorkingHrs.Value.Minute == 0 && DailyTransactionObj.WorkingHrs.Value.Hour == 0
                         && DailyTransactionObj.WorkingHrs.Value.Second == 0)
                        {
                            DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus; //"AAAA";
                            WetosDB.SaveChanges();
                        }
                    }
                    //CODE ADDED BY SHRADDHA ON 02 FEB 2017 FOR CONSIDERING STATUS AS AAAA IF  WORKINGHRS MINUTES ARE ZERO END
                    #endregion

                    #region  EARLY GOING LOGIC
                    // EARLY GOING LOGIC START
                    //EARLY GOING 

                    // Logic need to be updated as per late count

                    // Early Go Code Modifed by Rajas on 28 APRIL 2017 START

                    ReturnMessage = string.Empty;
                    UpdatedStatus = string.Empty;
                    NewStatus = string.Empty;

                    // Rest all flags
                    PostingFlagModelObj = new PostingFlagModel(); // Added by Rajas on 8 AUGUST 2017

                    if (RuleTransactionList != null && PostingFlagModelObj.IsWeekOff == false && PostingFlagModelObj.IsHoliDay == false)
                    {
                        // 6 - allowed Early going min
                        string EarlyGoAllowedMinutesStr = RuleTransactionList.Where(a => a.RuleId == 6).Select(a => a.Formula).FirstOrDefault();

                        if (!string.IsNullOrEmpty(EarlyGoAllowedMinutesStr))
                        {
                            string[] LateComingAllowedMinutesStrArray = EarlyGoAllowedMinutesStr.Split(':');
                        }

                        /// Added by Rajas on 28 APRIL 2017 START
                        /// To check GraceLateAllowed limit

                        // 3 - Grace early allowed limit
                        string GraceEarlyAllowedLimit = RuleTransactionList.Where(a => a.RuleId == 3).Select(a => a.Formula).FirstOrDefault();

                        DateTime GraceEarlyAllowedMin = Convert.ToDateTime(GraceEarlyAllowedLimit);

                        TimeSpan LCGraceTimeMinutes = GraceEarlyAllowedMin.TimeOfDay;
                        /// Added by Rajas on 28 APRIL 2017 END


                        if (DailyTransactionObj.Status.Substring(2, 2) != "AA"
                            && DailyTransactionObj.Status.Substring(0, 2) != "TO") //ADDED IF CONDITION BY SHRADDHA ON 06 MAR 2018 BECAUSE  IF EMPLOYEE (ROHIDAS DAMARE - LNT NAGAR) LOGIN ON 10/01/2018 06:58 AND LOGOUT ON 11/01/2018 00:02 HE HAS WORKED FOR OVER TIME THEN ALSO IT IS SHOWING EARLY GOING
                        {
                            if (OutTime < FirstOutTime)
                            {
                                string EarlyTimeString = (FirstOutTime - OutTime).ToString();

                                string Earlystring = OutTime.ToShortDateString() + " " + EarlyTimeString;

                                // Added by Rajas on 28 APRIL 2017 START
                                // To deduct Half day directly from Attendance, if employee crosses EarlyAllowed limit 
                                DateTime EarlyAllowedLimit = Convert.ToDateTime(EarlyGoAllowedMinutesStr);
                                DateTime CalculatedEarlyTime = Convert.ToDateTime(EarlyTimeString);

                                // Save original attendance status
                                // Added by Rajas on 8 AUGUST 2017
                                DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                if (CalculatedEarlyTime > GraceEarlyAllowedMin)
                                {
                                    // Added by Rajas on 29 APRIL 2017
                                    //if (!IsUpdateStatus)  (19 AUG 2017) At this momnet not required
                                    {
                                        // Updated by Rajas on 8 AUGUST 2017 START
                                        PostingFlagModelObj.IsLate = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                        string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                        if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                        {
                                            DailyTransactionObj.Status = UpdatedStatus;
                                        }
                                        // Updated by Rajas on 8 AUGUST 2017 END

                                        DailyTransactionObj.Remark = "Early"; // Added by rajas on 19 AUGUST 2017
                                    }
                                }

                                if (CalculatedEarlyTime > EarlyAllowedLimit)
                                {
                                    //if (!IsUpdateStatus) // (19 AUG 2017) At this momnet not required
                                    {
                                        // Updated by Rajas on 8 AUGUST 2017 START
                                        PostingFlagModelObj.IsSecondHalfAbsentDueToEarlygoing = true;

                                        GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                        string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                        if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                        {
                                            DailyTransactionObj.Status = UpdatedStatus;
                                        }
                                        // Updated by Rajas on 8 AUGUST 2017 END
                                    }

                                    DailyTransactionObj.Remark = "Early";
                                    WetosDB.SaveChanges();

                                    /// NOTE:
                                    /// As per Discussion in Meeting between Katre sir and Deepti Madam following flag included
                                    /// If Employee left early beyond early allowed limit then deduct Half day directly
                                    /// In this case don't update late count as action already taken for late employee.
                                    IsEarlyCountToBeIncremented = false;
                                }
                                // Added by Rajas on 28 APRIL 2017 END

                                // Early by min
                                DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);
                                //WetosDB.SaveChanges();

                                int EmployeeId = Convert.ToInt32(DailyTransactionObj.EmployeeId);
                                int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                // Below code updated by Rajas on 18 APRIL 2017, as late time calculate from FirstInTime not from SecondInTime
                                TimeSpan EarlyBy = FirstOutTime - OutTime;  // SecondInTime.TimeOfDay;

                                //Updated by Rajas on 28 APRIL 2017, && IsEarlyCountToBeIncremented == true added

                                if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == true)
                                {
                                    // Updated by Rajas on 28 AUGUST 2017 to fix early count issue
                                    int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions.Where(a => a.EmployeeId == EmployeeId
                                        && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear && a.TranDate < DailyTransactionObj.TranDate)
                                        .Select(a => a.EarlyCount).Max());

                                    if (RuleForEarlyCount != null)
                                    {
                                        int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

                                        if (MaxearlyCountForEmployee == 0)
                                        {
                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                        }

                                        else
                                        {
                                            DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                        }

                                        WetosDB.SaveChanges();

                                        #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                        // Code in this region modified by Rajas on 20 SEP 2017 START
                                        string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                        if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                        {
                                            if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
                                            {
                                                // Added by Rajas on 12 AUGUST 2017 
                                                // Global setting value base deduction 
                                                if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                                {
                                                    if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                    {
                                                        switch (DeductionDay)
                                                        {
                                                            case 0:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;

                                                            case 1:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;

                                                            default:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;
                                                        }

                                                    }
                                                }
                                                else   // Deduct half day after every allowed late count 
                                                {
                                                    if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
                                                    {
                                                        switch (DeductionDay)
                                                        {
                                                            case 0:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;

                                                            case 1:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;

                                                            default:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;
                                                        }
                                                    }
                                                    else // Updated by Rajas on 1 SEP 2017
                                                    {
                                                        if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                        {
                                                            switch (DeductionDay)
                                                            {
                                                                case 0:
                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                    {
                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                    }
                                                                    DailyTransactionObj.Remark = "Early";

                                                                    break;

                                                                case 1:
                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                    {
                                                                        DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                    }
                                                                    DailyTransactionObj.Remark = "Early";

                                                                    break;

                                                                default:
                                                                    if (DailyTransactionObj.Status.Length > 3)
                                                                    {
                                                                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                    }
                                                                    DailyTransactionObj.Remark = "Early";
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
                                            {
                                                // Logic for deduction of Leave is pending

                                                // Added By MSJ on 13 March 2019 START
                                                DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyAllowed, DeductLeaveCode, NoOfDaysDeduct, 1);
                                                // Added By MSJ on 13 March 2019 END

                                                // ADDED BY MSJ ON 22 FEB 2019 START
                                                //if (DailyTransactionObj.LateCount > EarlyAllowed)
                                                //{

                                                //    string[] LeaveCodes = DeductLeaveCode.Split(',');
                                                //    int Count = LeaveCodes.Length;

                                                //    // Check balance for First leave type
                                                //    for (int i = 0; i <= Count; i++)
                                                //    {
                                                //        string LeaveType = LeaveCodes[i].Trim();

                                                //        LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                                //            && a.LeaveType == LeaveType).FirstOrDefault();

                                                //        if (AvailableLeaveBalance != null)
                                                //        {
                                                //            if (AvailableLeaveBalance.CurrentBalance > 0)
                                                //            {
                                                //                double Deduction = Convert.ToDouble(NoOfDaysDeduct);
                                                //                if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                //                {
                                                //                    // Deduct balance for Leave
                                                //                    AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                                //                    AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                                //                    // Update entry in DailyTransaction for Deducted leave type
                                                //                    DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                                //                    DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                                //                    //WetosDB.SaveChanges();
                                                //                }

                                                //                break; // If deduction is done then stop loop.
                                                //            }
                                                //        }

                                                //    }
                                                //}
                                                //// ADDED BY MSJ ON 22 FEB 2019 END
                                            }
                                            else  // Early mark only. No deduction
                                            {
                                                // Updated by Rajas on 28 SEP 2017
                                                if (DailyTransactionObj.Status.Length > 3)
                                                {
                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                }
                                                DailyTransactionObj.Remark = "Early";

                                            }
                                        }

                                        else  // Early mark only. No deduction
                                        {
                                            // Updated by Rajas on 28 SEP 2017
                                            if (DailyTransactionObj.Status.Length > 3)
                                            {
                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                            }
                                            DailyTransactionObj.Remark = "Early";

                                        }

                                        // Code in this region modified by Rajas on 20 SEP 2017 END

                                        #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                    }

                                    WetosDB.SaveChanges();

                                    //// Added by Rajas on 5 AUGUST 2017
                                    //PrevEarlyCount = DailyTransactionObj.EarlyCount == null ? 0 : DailyTransactionObj.EarlyCount.Value;

                                }
                                else if (EarlyBy.TotalMinutes > LCGraceTimeMinutes.TotalMinutes && IsEarlyCountToBeIncremented == false)
                                {
                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                    DailyTransactionObj.Remark = "Early";
                                    WetosDB.SaveChanges();
                                }
                                else  // Added by Rajas on 5 AUGUST 2017
                                {
                                    //// Employee is Not left early, then
                                    //DailyTransactionObj.EarlyCount = PrevEarlyCount;
                                    //WetosDB.SaveChanges();
                                }

                                /// This absent status is updated as per test case observed on 17 MAY 2017 meeting at STPL office
                                /// If employee is Late and Early beyond allowed limit then mark employee absent
                                /// Added by Rajas on 18 MAY 2017
                                //if (IsLateCountToBeIncremented == IsEarlyCountToBeIncremented)
                                //{
                                //    DailyTransactionObj.Status = "AAAA";
                                //    DailyTransactionObj.Remark = "Absent";
                                //}


                            }
                        }
                    }
                    // Early Go Code Modifed by Rajas on 28 APRIL 2017 END

                    #endregion
                }
                #endregion

                #region WORKING HRS for TEKMAN

                try
                {
                    string WorkHoursHalfDayLimit = RuleTransactionList.Where(a => a.RuleId == 29).Select(a => a.Formula).FirstOrDefault();
                    string WorkHoursFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 28).Select(a => a.Formula).FirstOrDefault();

                    if (WorkHoursHalfDayLimit != null && WorkHoursFullDayLimit != null)
                    {
                        DateTime HalfDayLimit = Convert.ToDateTime(WorkHoursHalfDayLimit);
                        DateTime FullDayLimit = Convert.ToDateTime(WorkHoursFullDayLimit);

                        TimeSpan FInTime1Ex = new TimeSpan(9, 0, 0);
                        TimeSpan FInTime2Ex = new TimeSpan(9, 45, 59);
                        //DateTime 

                        // ADDED BY MSJ IN 02 APR 2018 // ADDED WORKING HOURS NULL VL
                        if (DailyTransactionObj.WorkingHrs != null && PostingFlagModelObj.IsWeekOff == false && PostingFlagModelObj.IsHoliDay == false) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                        {
                            if (FullDayLimit.TimeOfDay > DailyTransactionObj.WorkingHrs.Value.TimeOfDay
                                && DailyTransactionObj.Login.TimeOfDay <= FInTime2Ex
                                && DailyTransactionObj.Status.Substring(2, 2) != "AA") //MODIFIED BY PUSHKAR ON 4 APRIL
                            {
                                string EarlyTime = (FullDayLimit.TimeOfDay - DailyTransactionObj.WorkingHrs.Value.TimeOfDay).ToString();

                                string Earlystring = DailyTransactionObj.WorkingHrs.Value.ToShortDateString() + " " + EarlyTime;

                                DailyTransactionObj.Early = Convert.ToDateTime(Earlystring);

                                int TranDateMonth = Convert.ToInt32(DailyTransactionObj.TranDate.Month);
                                int TranDateYear = Convert.ToInt32(DailyTransactionObj.TranDate.Year);

                                // Get Max early count from existing
                                int MaxearlyCountForEmployee = Convert.ToInt32(WetosDB.DailyTransactions
                                    .Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                           && a.TranDate.Month == TranDateMonth && a.TranDate.Year == TranDateYear
                                           && a.TranDate < DailyTransactionObj.TranDate)
                                           .Select(a => a.EarlyCount).Max());

                                DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;  // Update early count

                                if (RuleForEarlyCount != null)
                                {
                                    int EarlyAllowed = Convert.ToInt32(RuleForEarlyCount.Formula);

                                    if (MaxearlyCountForEmployee == 0)
                                    {
                                        DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                    }

                                    else
                                    {
                                        DailyTransactionObj.EarlyCount = MaxearlyCountForEmployee + 1;
                                    }

                                    WetosDB.SaveChanges();

                                    #region ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                    // Code in this region modified by Rajas on 20 SEP 2017 START
                                    string MarkAsPresentFullDayLimit = RuleTransactionList.Where(a => a.RuleId == 21).Select(a => a.Formula).FirstOrDefault(); //Rule 21 - Mark As Present Full Day Limit
                                    if (string.IsNullOrEmpty(MarkAsPresentFullDayLimit))
                                    {
                                        if (RuleForEarlyCountAttDeduction != null && RuleForEarlyCountAttDeduction == "TRUE")
                                        {
                                            // Added by Rajas on 12 AUGUST 2017 
                                            // Global setting value base deduction 
                                            if (GlobalSettingObj == null)   // Deduct half day on basis of multiple of allowed late count
                                            {
                                                if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                {
                                                    switch (DeductionDay)
                                                    {
                                                        case 0:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        case 1:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        default:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;
                                                    }

                                                }
                                            }
                                            else   // Deduct half day after every allowed late count 
                                            {
                                                if (GlobalSettingObj.SettingValue == "1" && DailyTransactionObj.LateCount > EarlyAllowed)
                                                {
                                                    switch (DeductionDay)
                                                    {
                                                        case 0:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        case 1:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;

                                                        default:
                                                            if (DailyTransactionObj.Status.Length > 3)
                                                            {
                                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                            }
                                                            DailyTransactionObj.Remark = "Early";
                                                            break;
                                                    }
                                                }
                                                else // Updated by Rajas on 1 SEP 2017
                                                {
                                                    if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                                    {
                                                        switch (DeductionDay)
                                                        {
                                                            case 0:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";

                                                                break;

                                                            case 1:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = StatusConstants.FullDayAbsentStatus;
                                                                }
                                                                DailyTransactionObj.Remark = "Early";

                                                                break;

                                                            default:
                                                                if (DailyTransactionObj.Status.Length > 3)
                                                                {
                                                                    DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent + "^";
                                                                }
                                                                DailyTransactionObj.Remark = "Early";
                                                                break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (RuleForEarlyCountLeaveDeduction != null && RuleForEarlyCountLeaveDeduction == "TRUE")
                                        {
                                            // Logic for deduction of Leave is pending

                                            // Added By MSJ on 13 March 2019 START
                                            DeductFromLeave(WetosDB, GlobalSettingObj, DailyTransactionObj, DeductionDay, EarlyAllowed, DeductLeaveCode, NoOfDaysDeduct, 1);
                                            // Added By MSJ on 13 March 2019 END

                                            //// ADDED BY MSJ ON 22 FEB 2019 START
                                            //string[] LeaveCodes = DeductLeaveCode.Split(',');
                                            //int Count = LeaveCodes.Length;

                                            //// Check balance for First leave type
                                            //for (int i = 0; i <= Count; i++)
                                            //{
                                            //    string LeaveType = LeaveCodes[i].Trim();

                                            //    LeaveBalance AvailableLeaveBalance = WetosDB.LeaveBalances.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId
                                            //        && a.LeaveType == LeaveType).FirstOrDefault();

                                            //    if (AvailableLeaveBalance != null)
                                            //    {
                                            //        if (AvailableLeaveBalance.CurrentBalance > 0)
                                            //        {
                                            //            double Deduction = Convert.ToDouble(NoOfDaysDeduct);
                                            //            if (DailyTransactionObj.EarlyCount >= EarlyAllowed)
                                            //            {
                                            //                // Deduct balance for Leave
                                            //                AvailableLeaveBalance.CurrentBalance = AvailableLeaveBalance.CurrentBalance - Deduction;
                                            //                AvailableLeaveBalance.LeaveUsed = AvailableLeaveBalance.LeaveUsed + Deduction; // ADDED BY MSJ ON 22 FE 2019

                                            //                // Update entry in DailyTransaction for Deducted leave type
                                            //                DailyTransactionObj.LeaveTypeDeducted = LeaveType;
                                            //                DailyTransactionObj.LeaveDeducted = true; // ADDED BY MSJ ON 22 FE 2019

                                            //                //WetosDB.SaveChanges();
                                            //            }

                                            //            break; // If deduction is done then stop loop.
                                            //        }
                                            //    }

                                            //}
                                            //// ADDED BY MSJ ON 22 FEB 2019 END
                                        }
                                        else  // Early mark only. No deduction
                                        {
                                            // Updated by Rajas on 28 SEP 2017
                                            if (DailyTransactionObj.Status.Length > 3)
                                            {
                                                DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                            }
                                            DailyTransactionObj.Remark = "Early";

                                        }
                                    }

                                    else  // Early mark only. No deduction
                                    {
                                        // Updated by Rajas on 28 SEP 2017
                                        if (DailyTransactionObj.Status.Length > 3)
                                        {
                                            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 4) + "^";
                                        }
                                        DailyTransactionObj.Remark = "Early";

                                    }

                                    // Code in this region modified by Rajas on 20 SEP 2017 END

                                    #endregion ATTENDANCE/LEAVE DEDUCTION BASED ON RULES

                                }

                                WetosDB.SaveChanges();
                            }
                        }

                    }

                }
                catch (Exception)
                {

                }

                #endregion

                #region FIRST HALF & SECOND HALF INTIME & OUT TIME

                string FirstHalfLimit = RuleTransactionList.Where(a => a.RuleId == 44).Select(a => a.Formula).FirstOrDefault();
                string SecondHalflimit = RuleTransactionList.Where(a => a.RuleId == 45).Select(a => a.Formula).FirstOrDefault();

                DateTime FirstHalf = Convert.ToDateTime(FirstHalfLimit);
                DateTime SecondHalf = Convert.ToDateTime(SecondHalflimit);

                if (FirstHalfLimit != null && SecondHalflimit != null)
                {

                    //ADDED BY PUSHKAR ON 27 JULY 2018
                    if (DailyTransactionObj.Status.Substring(0, 4) == "PPAA")
                    {
                        if (DailyTransactionObj.WorkingHrs != null) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                        {
                            if (FirstHalf.TimeOfDay <= DailyTransactionObj.WorkingHrs.Value.TimeOfDay) //MODIFIED BY PUSHKAR ON 4 APRIL
                            {
                                TimeSpan FirstHalfClac = DailyTransactionObj.Login.TimeOfDay + FirstHalf.TimeOfDay;
                                TimeSpan FInTime1 = new TimeSpan(9, 0, 0);
                                TimeSpan FInTime2 = new TimeSpan(9, 45, 59);

                                // ADDED BY MSJ ON 27 DEC 2018 
                                if (DailyTransactionObj.BranchId == 2)
                                {
                                    FInTime2 = new TimeSpan(9, 30, 59);
                                }

                                if (DailyTransactionObj.LogOut.TimeOfDay >= FirstHalfClac)
                                {

                                }
                                else
                                {
                                    DailyTransactionObj.Status = "AAAA";
                                }
                            }
                            else
                            {
                                DailyTransactionObj.Status = "AAAA";
                            }
                        }
                    }
                    if (DailyTransactionObj.Status.Substring(0, 4) == "AAPP")
                    {
                        if (DailyTransactionObj.WorkingHrs != null) // && ShiftObjForCurrentEmployee.WorkingHours != null)
                        {
                            if (SecondHalf.TimeOfDay <= DailyTransactionObj.WorkingHrs.Value.TimeOfDay) //MODIFIED BY PUSHKAR ON 4 APRIL
                            {
                                TimeSpan SecondHalfClac = DailyTransactionObj.LogOut.TimeOfDay - SecondHalf.TimeOfDay;
                                TimeSpan SecInTime1 = new TimeSpan(13, 30, 0);
                                TimeSpan SecInTime2 = new TimeSpan(14, 00, 0); // ADDED BY MSJ ON 29 DEC 2018

                                //if (DailyTransactionObj.Login.TimeOfDay <= SecondHalfClac && DailyTransactionObj.Login.TimeOfDay <= SecInTime1) // COMMENTED BY MSJ ON 29 DEC 2018
                                if (DailyTransactionObj.Login.TimeOfDay <= SecondHalfClac && DailyTransactionObj.Login.TimeOfDay <= SecInTime2) // ADDED BY MSJ ON 29 DEC 2018
                                {

                                }
                                else
                                {
                                    DailyTransactionObj.Status = "AAAA";
                                }
                            }
                            else
                            {
                                DailyTransactionObj.Status = "AAAA";
                            }
                        }

                    }

                }
                #endregion

            }

            #endregion

            #region SINGLE SWIP ONLY

            TimeSpan NoPunchLogin = new TimeSpan(0, 0, 0);
            if (DailyTransactionObj.Login == DailyTransactionObj.LogOut && DailyTransactionObj.Login.TimeOfDay > NoPunchLogin)
            {

                DailyTransactionObj.Late = null;
                DailyTransactionObj.Early = null;
                DailyTransactionObj.LateCount = null;
                DailyTransactionObj.EarlyCount = null;
                DailyTransactionObj.Status = "AAAA*";
            }

            #endregion

            #region CODE TO CONSIDER CONDONE TRN TABLE ENTRY

            ReturnMessage = string.Empty;
            UpdatedStatus = string.Empty;
            NewStatus = string.Empty;
            PostingFlagModelObj = new PostingFlagModel();

            //List<CondoneTrn> CondoneTrnList = WetosDB.CondoneTrns.Where(a => a.CondoneDatEmployeeCompanyIde == CurrentDate).ToList();
            if (CondoneTrnList.Count > 0)
            {
                CondoneTrn CondoneTrnObj = CondoneTrnList.Where(a => a.Company.CompanyId == EmployeeCompanyId && a.Branch.BranchId == EmployeeBranchId).FirstOrDefault();

                if (CondoneTrnObj != null)
                {
                    int LateEarlyAllowedTimeHour = 0;
                    int LateEarlyAllowedTimeMinute = 0;
                    int LateEarlyAllowedTimeSecond = 0;
                    int LateEarlyAllowedTotalTimeInMinutes = 0;

                    if (!string.IsNullOrEmpty(CondoneTrnObj.LateEarly.Trim()) || !string.IsNullOrWhiteSpace(CondoneTrnObj.LateEarly.Trim()))
                    {
                        string[] LateEarlyAllowedTimeValue = CondoneTrnObj.LateEarly.Split(':');
                        LateEarlyAllowedTimeHour = Convert.ToInt32(LateEarlyAllowedTimeValue[0]);
                        LateEarlyAllowedTimeMinute = Convert.ToInt32(LateEarlyAllowedTimeValue[1]);
                        LateEarlyAllowedTimeSecond = Convert.ToInt32(LateEarlyAllowedTimeValue[2]);

                        LateEarlyAllowedTotalTimeInMinutes = (LateEarlyAllowedTimeHour * 60) + LateEarlyAllowedTimeMinute;
                    }

                    // List<DailyTransaction> DailyTransactionListForCurrentDate = WetosDB.DailyTransactions.Where(a => a.TranDate == CurrentDate).ToList();

                    DailyTransaction DailyTransactionASCondoneTrn = DailyTransactionObj;

                    //foreach (DailyTransaction DailyTransactionASCondoneTrn in DailyTransactionListForCurrentDate)
                    {
                        //COMPARE COMPANY ID AND BRACH ID WITH CONDONE ENTRY
                        //if (DailyTransactionASCondoneTrn.CompanyId == CondoneTrnObj.CompanyId && DailyTransactionASCondoneTrn.BranchId == CondoneTrnObj.BranchId)
                        {
                            //check for late entry based on status AAPP, LateCount,PPPP, Late, Early

                            if (CondoneTrnObj.Status.Trim().ToUpper() == "LATE" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Late.ToString()))
                            {
                                string[] DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToString().Split(' ');
                                //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                string[] LateComingTimeValue = DailyTransactionASCondoneTrnLateString[1].Split(':');
                                int LateComingTimeValueHour = Convert.ToInt32(LateComingTimeValue[0]);
                                int LateComingTimeValueMinute = Convert.ToInt32(LateComingTimeValue[1]);
                                int LateComingTimeValueSecond = Convert.ToInt32(LateComingTimeValue[2]);

                                int LateComingTotalTimeInMinutes = (LateComingTimeValueHour * 60) + LateComingTimeValueMinute;

                                if (LateComingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                {
                                    //// Updated by Rajas on 29 APRIL 2017
                                    //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

                                    // Updated by Rajas on 8 AUGUST 2017 START
                                    PostingFlagModelObj.IsCondone = true;

                                    // UPDATE STATUS 
                                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                    // Updated by Rajas on 8 AUGUST 2017 END

                                    // Added by Rajas on 1 SEP 2017 START
                                    //if (LateComingTotalTimeInMinutes >= 240)
                                    //{
                                    UpdatedStatus = StatusConstants.Present + UpdatedStatus.Substring(2, 2) + UpdatedStatus.Substring(4, 1);
                                    //}
                                    // Added by Rajas on 1 SEP 2017 END

                                    // Added by Rajas on 28 AUGUST 2017 START
                                    DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                    DailyTransactionObj.Status = UpdatedStatus;
                                    // Added by Rajas on 28 AUGUST 2017 END
                                }


                                #region CODE TO DEDUCT ALREADY MARKED LATE COUNT

                                // Added by Rajas on 28 AUGUST 2017 START

                                NewStatus = string.Empty;
                                UpdatedStatus = string.Empty;
                                ReturnMessage = string.Empty;

                                EmployeeGroupId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();
                                RuleForLateCount = AllRuleTransactionList.Where(a => a.RuleId == 16 && a.EmployeeGroupId == EmployeeGroupId).FirstOrDefault();

                                if (RuleForLateCount != null)
                                {
                                    if (DailyTransactionObj.LateCount >= 1)
                                    {

                                        DailyTransactionObj.LateCount = DailyTransactionObj.LateCount - 1;
                                        WetosDB.SaveChanges();


                                        PostingFlagModelObj.IsLateCountReduced = true;

                                        if (DailyTransactionObj.LateCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                        {
                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                            DailyTransactionObj.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                            DailyTransactionObj.Status = UpdatedStatus;
                                            WetosDB.SaveChanges();
                                        }

                                        else if (DailyTransactionObj.LateCount > Convert.ToInt32(RuleForLateCount.Formula))
                                        {
                                            //abcd.Status = "AAPP^";
                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                            DailyTransactionObj.Remark = "Late";
                                            DailyTransactionObj.Status = UpdatedStatus;
                                            WetosDB.SaveChanges();
                                        }
                                    }
                                    // > 2 ABSENT
                                    // ==2 PRESENT 

                                    // Initialise flags
                                    PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                }

                                // Added by Rajas on 28 AUGUST 2017 START

                                #endregion
                            }
                            else if (CondoneTrnObj.Status.Trim().ToUpper() == "EARLY" && !string.IsNullOrEmpty(DailyTransactionASCondoneTrn.Early.ToString()))
                            {
                                string[] DailyTransactionASCondoneTrnEarlyString = DailyTransactionASCondoneTrn.Early.Value.ToString().Split(' ');
                                //string DailyTransactionASCondoneTrnLateString = DailyTransactionASCondoneTrn.Late.Value.ToShortTimeString();
                                string[] EarlyGoingTimeValue = DailyTransactionASCondoneTrnEarlyString[1].Split(':');

                                int EarlyGoingTimeValueHour = Convert.ToInt32(EarlyGoingTimeValue[0]);
                                int EarlyGoingTimeValueMinute = Convert.ToInt32(EarlyGoingTimeValue[1]);
                                int EarlyGoingTimeValueSecond = Convert.ToInt32(EarlyGoingTimeValue[2]);

                                int EarlyGoingTotalTimeInMinutes = (EarlyGoingTimeValueHour * 60) + EarlyGoingTimeValueMinute;

                                if (EarlyGoingTotalTimeInMinutes < LateEarlyAllowedTotalTimeInMinutes)
                                {
                                    //// Updated by Rajas on 29 APRIL 2017
                                    //DailyTransactionASCondoneTrn.Status = "PPPP#";  // PPPP

                                    // Updated by Rajas on 8 AUGUST 2017 START
                                    PostingFlagModelObj.IsCondone = true;

                                    // UPDATE STATUS 
                                    GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionASCondoneTrn.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                    // Updated by Rajas on 8 AUGUST 2017 END

                                    // Added by Rajas on 1 SEP 2017 START
                                    //if (EarlyGoingTotalTimeInMinutes >= 240)
                                    //{
                                    UpdatedStatus = UpdatedStatus.Substring(0, 2) + StatusConstants.Present + UpdatedStatus.Substring(4, 1);
                                    //}
                                    // Added by Rajas on 1 SEP 2017 END

                                    // Added by Rajas on 28 AUGUST 2017 START
                                    DailyTransactionObj.ActualStatus = DailyTransactionObj.Status;

                                    DailyTransactionObj.Status = UpdatedStatus;
                                    // Added by Rajas on 28 AUGUST 2017 END
                                }

                                #region CODE TO DEDUCT ALREADY MARKED EARLY COUNT

                                // Added by Rajas on 28 AUGUST 2017 START

                                NewStatus = string.Empty;
                                UpdatedStatus = string.Empty;
                                ReturnMessage = string.Empty;

                                EmployeeGroupId = RequiredEmpDetListObj.Where(a => a.EmployeeId == DailyTransactionObj.EmployeeId).Select(a => a.EmployeeGroupId).FirstOrDefault();
                                RuleForLateCount = AllRuleTransactionList.Where(a => a.RuleId == 16 && a.EmployeeGroupId == EmployeeGroupId).FirstOrDefault();

                                if (RuleForLateCount != null)
                                {
                                    if (DailyTransactionObj.EarlyCount >= 1)
                                    {
                                        DailyTransactionObj.EarlyCount = DailyTransactionObj.EarlyCount - 1;
                                        WetosDB.SaveChanges();

                                        PostingFlagModelObj.IsLateCountReduced = true;

                                        if (DailyTransactionObj.EarlyCount <= Convert.ToInt32(RuleForLateCount.Formula))
                                        {
                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                            DailyTransactionObj.Remark = string.Empty;  // Updated by Rajas on 10 AUGUST 2017
                                            DailyTransactionObj.Status = UpdatedStatus;
                                            WetosDB.SaveChanges();
                                        }

                                        else if (DailyTransactionObj.EarlyCount > Convert.ToInt32(RuleForLateCount.Formula))
                                        {
                                            //abcd.Status = "AAPP^";
                                            GetActualDailyTransactionStatus(PostingFlagModelObj, DailyTransactionObj.Status, NewStatus, ref UpdatedStatus, ref ReturnMessage);
                                            DailyTransactionObj.Remark = "Late";
                                            DailyTransactionObj.Status = UpdatedStatus;
                                            WetosDB.SaveChanges();
                                        }
                                    }
                                    // > 2 ABSENT
                                    // ==2 PRESENT 

                                    // Initialise flags
                                    PostingFlagModelObj = new PostingFlagModel();  // Added by Rajas on 8 AUGUST 2017
                                }

                                // Added by Rajas on 28 AUGUST 2017 END

                                #endregion
                            }
                            WetosDB.SaveChanges();
                        }
                    }

                }
            }


            #endregion

            #region MARK HOLIDAY

            // Split first half, second half and 5th character
            // Check Holiday present rules???
            // On Holiday shift is marked

            ReturnMessage = string.Empty;
            UpdatedStatus = string.Empty;
            NewStatus = string.Empty;
            bool IsWO = false;
            PostingFlagModelObj = new PostingFlagModel();

            RuleTransaction RTObjForCompOffFullDayLimitValueHO = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault();
            bool IsCORuleHO;
            TimeSpan HOtotalTime = new TimeSpan(0, 0, 0);
            if (RTObjForCompOffFullDayLimitValueHO != null)
            {
                string[] TimeForWO = RTObjForCompOffFullDayLimitValueHO.Formula.Split(':');
                int WOhrsSplit = Convert.ToInt32(TimeForWO[0]);
                int WOminSplit = Convert.ToInt32(TimeForWO[1]);
                HOtotalTime = new TimeSpan(WOhrsSplit, WOminSplit, 0);
                IsCORuleHO = true;
            }
            else
            {
                IsCORuleHO = false;
            }


            if (HolidayList.Count > 0)
            {
                // ADDED BY MSJ ON 08 AUG 2017 START
                if (HolidayList.Where(a => a.CompanyId == EmployeeCompanyId && a.Branchid == EmployeeBranchId).FirstOrDefault() != null)
                {
                    PostingFlagModelObj.IsHoliDay = true;  // Added by Rajas on 5 SEP 2017

                    // Updated by Rajas on 5 SEP 2017 START
                    // Half day holiday
                    if (HolidayList.Where(a => a.DayStatus == 2).FirstOrDefault() != null)
                    {
                        DailyTransactionObj.Status = StatusConstants.HolidayShift + DailyTransactionObj.Status.Substring(2, 3);
                        WetosDB.SaveChanges();
                    }
                    else if (HolidayList.Where(a => a.DayStatus == 3).FirstOrDefault() != null)
                    {
                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.HolidayShift;
                        WetosDB.SaveChanges();
                    }
                    else
                    {
                        // Comman function call for status check and update
                        // Added by Rajas on 19 AUGUST 2017
                        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                        /// Mark Holiday shift in DailyTransaction
                        /// Added by Rajas on 4 JULY 2017
                        DailyTransactionObj.ShiftId = StatusConstants.HolidayShift;
                        DailyTransactionObj.LateCount = null;
                        DailyTransactionObj.EarlyCount = null;
                        DailyTransactionObj.Late = null;
                        DailyTransactionObj.Early = null;
                        DailyTransactionObj.Remark = null;

                        if (IsCORuleHO == true)
                        {
                            if (DailyTransactionObj.WorkingHrs != null)
                            {
                                if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= HOtotalTime)
                                {
                                    DailyTransactionObj.Status = "HPHP";
                                }
                                else if (DailyTransactionObj.WorkingHrs != null)
                                {
                                    DailyTransactionObj.Status = "HPHO";
                                }
                            }
                            else
                            {
                                DailyTransactionObj.Status = "HOHO";
                            }
                        }
                        else
                        {
                            if (DailyTransactionObj.WorkingHrs != null)
                            {
                                DailyTransactionObj.Status = "HPHP";
                            }
                            else
                            {
                                DailyTransactionObj.Status = "HOHO";
                            }
                        }


                        WetosDB.SaveChanges(); //?????
                    }
                    // Updated by Rajas on 5 SEP 2017 END
                }
                // ADDED BY MSJ ON 08 AUG 2017 END
            }

            #endregion

            #region MARK DECLARED HOLIDAY

            ReturnMessage = string.Empty;
            UpdatedStatus = string.Empty;
            NewStatus = string.Empty;
            PostingFlagModelObj = new PostingFlagModel();

            if (DeclaredHolidayList.Count > 0)
            {
                // Added by Rajas on 8 AUGUST 2017 START
                // Declared holiday table does not have CompanyId reference in table
                if (DeclaredHolidayList.Where(a => a.Branch.BranchId == EmployeeBranchId).FirstOrDefault() != null)
                {
                    PostingFlagModelObj.DeclaredHoliDayStatus = true;  // Added by Rajas on 26 SEP 2017

                    // Comman function call for status check and update
                    // Added by Rajas on 19 AUGUST 2017
                    CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                    // Updated by Rajas on 3 OCT 2017 START
                    if (DailyTransactionObj.Status.Contains(DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent))
                    {
                        DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.DeclaredHoliDayStatus;
                    }
                    else if (DailyTransactionObj.Status.Contains(StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2)))
                    {
                        DailyTransactionObj.Status = StatusConstants.DeclaredHoliDayStatus + DailyTransactionObj.Status.Substring(2, 2);
                    }
                    else
                    {
                        DailyTransactionObj.Status = StatusConstants.DeclaredHoliDayStatus;
                    }
                    // Updated by Rajas on 3 OCT 2017 END

                    /// Mark Holiday shift in DailyTransaction
                    /// Added by Rajas on 4 JULY 2017
                    DailyTransactionObj.ShiftId = StatusConstants.DeclaredHoliDayStatus;

                    WetosDB.SaveChanges(); //?????
                }
                // Added by Rajas on 8 AUGUST 2017 END
            }
            #endregion

            #region CODE COMMENTED BY SHRADDHA ON 29 MAR 2018 BECAUSE IT IS NOT REQUIRED NOW AS PER MSJ

            #region MARK WORK ON DECLARED HOLIDAY

            //ReturnMessage = string.Empty;
            //UpdatedStatus = string.Empty;
            //NewStatus = string.Empty;
            //PostingFlagModelObj = new PostingFlagModel();

            //if (WorkOnDeclaredHolidayCompOffList.Count > 0)
            //{
            //    // Added by Rajas on 8 AUGUST 2017 START
            //    // Declared holiday table does not have CompanyId reference in table
            //    if (WorkOnDeclaredHolidayCompOffList.Where(a => a.Branch.BranchId == EmployeeBranchId).FirstOrDefault() != null)
            //    {
            //        PostingFlagModelObj.DeclaredHoliDayStatus = true;  // Added by Rajas on 26 SEP 2017

            //        // Comman function call for status check and update
            //        // Added by Rajas on 19 AUGUST 2017
            //        CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

            //        // Updated by Rajas on 3 OCT 2017 START
            //        if (DailyTransactionObj.Status.Contains(DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.Absent))
            //        {
            //            DailyTransactionObj.Status = DailyTransactionObj.Status.Substring(0, 2) + StatusConstants.DeclaredHolidayShift;
            //        }
            //        else if (DailyTransactionObj.Status.Contains(StatusConstants.Absent + DailyTransactionObj.Status.Substring(2, 2)))
            //        {
            //            DailyTransactionObj.Status = StatusConstants.DeclaredHolidayShift + DailyTransactionObj.Status.Substring(2, 2);
            //        }
            //        // Updated by Rajas on 3 OCT 2017 END

            //        /// Mark Holiday shift in DailyTransaction
            //        /// Added by Rajas on 4 JULY 2017
            //        DailyTransactionObj.ShiftId = StatusConstants.DeclaredHolidayShift;

            //        WetosDB.SaveChanges(); //?????
            //    }
            //    // Added by Rajas on 8 AUGUST 2017 END
            //}
            #endregion
            #endregion

            #region MARK WeeklyOff1 AND WEEKOFF2 DAY FROM DATABASE (FIRST, SECOND, THIRD, FOURTH, FIFTH) AND MARK AS WEEKOFF

            // ADDED  BY MSJ ON 31 JAN 2018 
            if (EmployeeObj != null)  // ADDED  BY MSJ ON 31 JAN 2018 
            {
                string currentDayStr = CurrentDate.DayOfWeek.ToString();
                //CODE UNCOMMENTED BY SHRADDHA ON 07 MARCH 2017 START

                bool IsWeeklyOff = false;  // Added by Rajas on 4 KULY 2017


                ReturnMessage = string.Empty;
                UpdatedStatus = string.Empty;
                NewStatus = string.Empty;
                PostingFlagModelObj = new PostingFlagModel();
                IsWO = true;
                PostingFlagModelObj.IsWeekOff = true;

                RuleTransaction RTObjForCompOffFullDayLimitValueWO = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault();
                bool IsCORuleWO;
                TimeSpan WOtotalTime = new TimeSpan(0, 0, 0);
                if (RTObjForCompOffFullDayLimitValueWO != null)
                {
                    string[] TimeForWO = RTObjForCompOffFullDayLimitValueWO.Formula.Split(':');
                    int WOhrsSplit = Convert.ToInt32(TimeForWO[0]);
                    int WOminSplit = Convert.ToInt32(TimeForWO[1]);
                    WOtotalTime = new TimeSpan(WOhrsSplit, WOminSplit, 0);
                    IsCORuleWO = true;
                }
                else
                {
                    IsCORuleWO = false;
                }
                // ADDED BY MSJ ON 21 JAN 2019 START
                //if (EmployeeObj.WeeklyOff1.ToUpper() == currentDayStr.ToUpper() && WorkOnDeclaredHolidayCompOffList.Count() == 0) //IF WEEK OFF DAY IS NOT DECLARED HOLIDAY COMP WORK DAY CONDITION ADDED BY SHRADDHA ON 29 MAR 2018
                if (EmployeeObj.WeeklyOff1.ToUpper() == currentDayStr.ToUpper()
                    && WorkOnDeclaredHolidayCompOffList.Where(a => a.Branch.BranchId == EmployeeBranchId).Count() == 0) //IF WEEK OFF DAY IS NOT DECLARED HOLIDAY COMP WORK DAY CONDITION ADDED BY SHRADDHA ON 29 MAR 2018
                {
                    // Comman function call for status check and update
                    // Added by Rajas on 19 AUGUST 2017
                    CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                    DailyTransactionObj.ShiftId = StatusConstants.WeekOffShift;  // Updated by Rajas on 19 AUGUST 2017
                    DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                    DailyTransactionObj.Late = null;
                    DailyTransactionObj.Early = null;
                    DailyTransactionObj.LateCount = null;
                    DailyTransactionObj.EarlyCount = null;
                    DailyTransactionObj.Remark = null;

                    if (IsCORuleWO == true)
                    {
                        if (DailyTransactionObj.WorkingHrs != null)
                        {
                            if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= WOtotalTime)
                            {
                                DailyTransactionObj.Status = "WPWP";
                            }
                            else if (DailyTransactionObj.WorkingHrs != null)
                            {
                                DailyTransactionObj.Status = "WPWO";
                            }
                        }
                        else
                        {
                            DailyTransactionObj.Status = "WOWO";
                        }
                    }
                    else
                    {
                        if (DailyTransactionObj.WorkingHrs != null)
                        {
                            DailyTransactionObj.Status = "WPWP";
                        }
                        else
                        {
                            DailyTransactionObj.Status = "WOWO";
                        }
                    }

                    WetosDB.SaveChanges();
                }
                else if (!string.IsNullOrEmpty(EmployeeObj.WeeklyOff2)) // #region MARK WeeklyOff2 AS WEEKOFF
                {
                    #region WEEKLY OFF 2

                    if (EmployeeObj.WeeklyOff2.ToUpper() == currentDayStr.ToUpper()
                        //&& WorkOnDeclaredHolidayCompOffList.Count() == 0
                        && WorkOnDeclaredHolidayCompOffList.Where(a => a.Branch.BranchId == EmployeeBranchId).Count() == 0) //IF WEEK OFF DAY IS NOT DECLARED HOLIDAY COMP WORK DAY CONDITION ADDED BY SHRADDHA ON 29 MAR 2018
                    {
                        string ReturnStatusMsg = string.Empty;

                        int WeekNumber = GetWeekOfMonth(CurrentDate);

                        if (EmployeeObj.First == true && WeekNumber == 1)
                        {
                            #region WO1

                            // Comman function call for status check and update
                            // Added by Rajas on 19 AUGUST 2017
                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                            IsWeeklyOff = true;

                            #endregion
                        }
                        else if (EmployeeObj.Second == true && WeekNumber == 2)
                        {
                            #region WO2

                            // Comman function call for status check and update
                            // Added by Rajas on 19 AUGUST 2017
                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                            IsWeeklyOff = true;

                            #endregion
                        }
                        else if (EmployeeObj.Third == true && WeekNumber == 3)
                        {
                            #region WO3

                            // Comman function call for status check and update
                            // Added by Rajas on 19 AUGUST 2017
                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                            IsWeeklyOff = true;

                            #endregion
                        }
                        else if (EmployeeObj.Fourth == true && WeekNumber == 4)
                        {
                            #region WO4

                            // Comman function call for status check and update
                            // Added by Rajas on 19 AUGUST 2017
                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                            IsWeeklyOff = true;

                            #endregion
                        }
                        else if (EmployeeObj.Fifth == true && WeekNumber == 5)
                        {
                            #region WO5

                            // Comman function call for status check and update
                            // Added by Rajas on 19 AUGUST 2017
                            CommonFuncToMarkStatusChanges(WetosDB, PostingFlagModelObj, DailyTransactionObj, IsWO, NewStatus, ref UpdatedStatus, ref ReturnMessage);

                            IsWeeklyOff = true;

                            #endregion
                        }

                        /// Mark WO shift in DailyTransaction
                        /// Added by Rajas on 4 JULY 2017
                        if (IsWeeklyOff == true)
                        {
                            DailyTransactionObj.ShiftId = StatusConstants.WeekOffShift;
                            DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                            DailyTransactionObj.Late = null;
                            DailyTransactionObj.Early = null;
                            DailyTransactionObj.LateCount = null;
                            DailyTransactionObj.EarlyCount = null;
                            DailyTransactionObj.Remark = null;

                            if (IsCORuleWO == true)
                            {
                                if (DailyTransactionObj.WorkingHrs != null)
                                {
                                    if (DailyTransactionObj.WorkingHrs.Value.TimeOfDay >= WOtotalTime)
                                    {
                                        DailyTransactionObj.Status = "WPWP";
                                    }
                                    else if (DailyTransactionObj.WorkingHrs != null)
                                    {
                                        DailyTransactionObj.Status = "WPWO";
                                    }
                                }
                                else
                                {
                                    DailyTransactionObj.Status = "WOWO";
                                }
                            }
                            else
                            {
                                if (DailyTransactionObj.WorkingHrs != null)
                                {
                                    DailyTransactionObj.Status = "WPWP";
                                }
                                else
                                {
                                    DailyTransactionObj.Status = "WOWO";
                                }
                            }
                        }

                        WetosDB.SaveChanges();
                    }

                    #endregion
                }

                WetosDB.SaveChanges();
            }  // ADDED  BY MSJ ON 31 JAN 2018 


            #endregion

            #region CODE FOR COMP OFF ADD INTO COMP OFF TABLE FOR EXTRA HOURS BASED ON RULE

            RuleTransaction RuleTransactionObj = RuleTransactionList.Where(a => a.RuleId == 9).FirstOrDefault(); // 9 - COMP ALLOWED ?
            RuleTransaction RTObjForCompOffFullDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 10).FirstOrDefault(); // IF COMPOFF ALLOWED FULL DAY LIMIT

            RuleTransaction RTObjForCompOffHalfDayLimitValue = RuleTransactionList.Where(a => a.RuleId == 11).FirstOrDefault(); // IF COMPOFF ALLOWED HALF DAY LIMIT


            RuleTransaction RTObjForIsAutoCompOffavailable = RuleTransactionList.Where(a => a.RuleId == 32).FirstOrDefault(); // Is Auto Comp Off available?

            int FullDayRuleHourInt = 0;
            int HalfDayRuleHourInt = 0;

            if (RuleTransactionObj != null && RTObjForIsAutoCompOffavailable != null) // RULE 9 & 32 PRESENT //RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
            {
                //CODE ADDED BY SHRADDHA ON 19 FEB 2018

                #region RULE 34 AND 35 ADDED BY SHRADDHA ON 19 FEB 2018 FOR CUMULATIVE COMP OFF
                //RULE 34 - Extra Hours Accumulation Allowed or not
                //RULE 35 - Min. required extra hours for accumulation
                #endregion

                RuleTransaction ExtraHoursAccumulationAllowedornot = RuleTransactionList.Where(a => a.RuleId == 34).FirstOrDefault(); // 34 - Extra Hours Accumulation Allowed or not //CODE ADDED BY SHRADDHA ON 19 FEB 2018

                if (RuleTransactionObj.Formula.ToUpper().Trim() == "TRUE" && RTObjForIsAutoCompOffavailable.Formula.ToUpper().Trim() == "TRUE")//RULE 32 ADDED BY SHRADDHA ON 31 JAN 2018
                {
                    #region COMP OFF ALLOWED OR NOT AND IF YES THEN EXTRA HOURS ACCUMULATION ALLOWED OR NOT


                    if (ExtraHoursAccumulationAllowedornot != null)
                    {
                        #region IF EXTRA HOURS ACCUMULATION IS ALLOWED
                        RuleTransaction MinRequiredExtraHoursForAccumulation = RuleTransactionList.Where(a => a.RuleId == 35).FirstOrDefault(); //35 - Min. required extra hours for accumulation //CODE ADDED BY SHRADDHA ON 19 FEB 2018
                        RuleTransaction WeekDayCompOffFactor = RuleTransactionList.Where(a => a.RuleId == 36).FirstOrDefault(); //36 - Week day comp off factor //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                        RuleTransaction WeekOffCompOffFactor = RuleTransactionList.Where(a => a.RuleId == 37).FirstOrDefault(); //37 - Week off comp off factor //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                        RuleTransaction HolidayCompOffFactor = RuleTransactionList.Where(a => a.RuleId == 38).FirstOrDefault(); //38 - Holiday comp off factor //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                        RuleTransaction CompOffSetTime = RuleTransactionList.Where(a => a.RuleId == 39).FirstOrDefault(); //39 - Comp off set time //CODE ADDED BY SHRADDHA ON 20 FEB 2018

                        #region RULES ADDED BY SHRADDHA ON 20 FEB 2018 AS PER SUGGESTED BY KATRE SIR BUT NOT USED
                        RuleTransaction IsExtraHoursRoundedOffForCompOff = RuleTransactionList.Where(a => a.RuleId == 40).FirstOrDefault(); //40 - Is Extra hours rounded off for Comp off //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                        RuleTransaction CompOffRoundedOffTime = RuleTransactionList.Where(a => a.RuleId == 41).FirstOrDefault(); //41 - Comp Off Rounded Off Time //CODE ADDED BY SHRADDHA ON 20 FEB 2018
                        #endregion

                        if (MinRequiredExtraHoursForAccumulation != null)
                        {
                            // MIN REQUIRED EXTRA HOURS FOR ACCUMULATION
                            int AccumulationHourInt = 0;
                            int AccumulationMinuteInt = 0;
                            int MinTotalTimeRequiredForAccumulation = 0;
                            double CompOffBalance = 0;
                            string ReferenceString = string.Empty;

                            //CODE ADDED BY SHRADDHA ON 20 FEB 2018 START
                            int CompOffSetTimeHourInt = 0;
                            int CompOffSetTimeMinuteInt = 0;
                            int CompOffSetTimeDouble = 0;
                            DateTime CompOffHours = Convert.ToDateTime(DailyTransactionObj.ExtraHrs);

                            //CODE ADDED BY SHRADDHA ON 20 FEB 2018 END

                            if (MinRequiredExtraHoursForAccumulation != null)
                            {
                                // 08:00:00
                                string[] MinRequiredExtraHoursForAccumulationSplitValue = MinRequiredExtraHoursForAccumulation.Formula.Split(':');
                                AccumulationHourInt = Convert.ToInt32(MinRequiredExtraHoursForAccumulationSplitValue[0]); // Minutes missing
                                AccumulationMinuteInt = Convert.ToInt32(MinRequiredExtraHoursForAccumulationSplitValue[1]); // Minutes missing
                                MinTotalTimeRequiredForAccumulation = (60 * AccumulationHourInt) + AccumulationMinuteInt;

                                //CODE ADDED BY SHRADDHA ON 20 FEB 2018 START
                                bool IsWeekOff = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true ? true : false;
                                bool IsHoliday = DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true ? true : false;
                                bool IsWeekDay = true;
                                if (DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) == true || DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff) == true)
                                {
                                    IsWeekDay = false;
                                }

                                #region CUMULATIVE COMP OFF FORMULA

                                #endregion
                                //CODE ADDED BY SHRADDHA ON 20 FEB 2018 END

                                if (DailyTransactionObj.Status.Contains(StatusConstants.PresentOnHoliday) || DailyTransactionObj.Status.Contains(StatusConstants.PresentOnWeekOff))
                                {
                                    DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                                }

                                //ADDED BY PUSHKAR ON 08 MAY 2018 FOR GETTING EXTRA HRS FOR WEEK-OFF EVEN IF WORKED FOR 1 HRS ON WO
                                if (DailyTransactionObj.Status.Contains(StatusConstants.WeeklyOffStatus))
                                {
                                    DailyTransactionObj.ExtraHrs = DailyTransactionObj.WorkingHrs;
                                }

                                #region PRESENT ON NORMAL WEEK DAY OR WEEKOFF OR HOLIDAY
                                int TotalExtraHoursTimeForWeekDays = 0;
                                if (DailyTransactionObj.ExtraHrs != null)
                                {
                                    TotalExtraHoursTimeForWeekDays = (60 * DailyTransactionObj.ExtraHrs.Value.Hour) + DailyTransactionObj.ExtraHrs.Value.Minute;
                                }

                                #region IF WORKING HOURS TOTAL TIME MORE THAN OR EQUAL TO REQUIRED TIME FOR ACCUMULATION
                                //if (TotalExtraHoursTimeForWeekDays >= MinTotalTimeRequiredForAccumulation)
                                {
                                    // 08:00:00

                                    string[] CompOffSetTimeSplitValue = CompOffSetTime.Formula.Split(':');
                                    CompOffSetTimeHourInt = Convert.ToInt32(CompOffSetTimeSplitValue[0]); // Minutes missing
                                    CompOffSetTimeMinuteInt = Convert.ToInt32(CompOffSetTimeSplitValue[1]); // Minutes missing
                                    CompOffSetTimeDouble = (60 * CompOffSetTimeHourInt) + CompOffSetTimeMinuteInt;

                                    int ExtraCoHourMinutes = TotalExtraHoursTimeForWeekDays - MinTotalTimeRequiredForAccumulation;
                                    if (ExtraCoHourMinutes % CompOffSetTimeDouble == 0)
                                    {

                                    }
                                    else
                                    {
                                        #region CODE TO BE ADDED WITH HELP OF MSJ NEED HELP GF MSJ
                                        int ExtraMinutesFraction = (ExtraCoHourMinutes % CompOffSetTimeDouble);
                                        ExtraCoHourMinutes = ExtraCoHourMinutes - ExtraMinutesFraction;
                                        TotalExtraHoursTimeForWeekDays = TotalExtraHoursTimeForWeekDays - ExtraMinutesFraction;
                                        #endregion
                                    }



                                    //int abcHour = Convert.ToInt32(ExtraCoHourMinutes % 60);
                                    double IsWeekOffInt = Convert.ToDouble(IsWeekOff);
                                    double IsWeekDayInt = Convert.ToDouble(IsWeekDay);
                                    double IsHolidayInt = Convert.ToDouble(IsHoliday);
                                    TotalExtraHoursTimeForWeekDays = Convert.ToInt32((TotalExtraHoursTimeForWeekDays * IsWeekOffInt * Convert.ToDouble(WeekOffCompOffFactor == null ? "0" : WeekOffCompOffFactor.Formula)) + (TotalExtraHoursTimeForWeekDays * IsWeekDayInt * Convert.ToDouble(WeekOffCompOffFactor == null ? "0" : WeekOffCompOffFactor.Formula)) + (TotalExtraHoursTimeForWeekDays * IsHolidayInt * Convert.ToDouble(HolidayCompOffFactor == null ? "0" : HolidayCompOffFactor.Formula)));

                                    int TotalExtraMinutesForWeekDays = Convert.ToInt32(TotalExtraHoursTimeForWeekDays % 60);
                                    int TotalExtraHoursForWeekDays = Convert.ToInt32((TotalExtraHoursTimeForWeekDays - TotalExtraMinutesForWeekDays) / 60);

                                    //CompOffHours = new DateTime(DailyTransactionObj.TranDate.Year, DailyTransactionObj.TranDate.Month, DailyTransactionObj.TranDate.Day, TotalExtraHoursForWeekDays, TotalExtraMinutesForWeekDays, 0);
                                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 START
                                    //UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffBalance, ref ReferenceString);
                                    //UpdateManualCompOffTbl(WetosDB, DailyTransactionObj, CompOffHours, IsWeekDay, IsWeekOff, IsHoliday, CompOffBalance, ref ReferenceString);
                                    UpdateCumulativeManualCompOffTbl(WetosDB, DailyTransactionObj, TotalExtraHoursTimeForWeekDays, IsWeekDay, IsWeekOff, IsHoliday, CompOffBalance, ref ReferenceString);
                                    //EARLIER CODE COMMENTED AND ADDED NEW CODE BY SHRADDHA ON 20 FEB 2018 END
                                }
                                #endregion
                                #endregion

                            }
                        }
                        #endregion
                    }
                    else
                    {
                        #region IF EXTRA HOURS ACCUMULATION IS NOT ALLOWED
                        string ReturnStatusMsg = string.Empty;

                        // MIN TIME FOR FULL DAY COMP OFF
                        if (RTObjForCompOffFullDayLimitValue != null)
                        {
                            // 08:00:00
                            string[] FullDayRuleSplitValue = RTObjForCompOffFullDayLimitValue.Formula.Split(':');
                            FullDayRuleHourInt = Convert.ToInt32(FullDayRuleSplitValue[0]); // Minutes missing
                        }

                        // MIN TIME FOR HALF DAY COMP OFF
                        if (RTObjForCompOffHalfDayLimitValue != null)
                        {
                            string[] HalfDayRuleSplitValue = RTObjForCompOffHalfDayLimitValue.Formula.Split(':');
                            HalfDayRuleHourInt = Convert.ToInt32(HalfDayRuleSplitValue[0]); // Minutes missing
                        }

                        if (FullDayRuleHourInt > 0)
                        {
                            // STATIC FUNCTION
                            MarkCompOffForExtraHrsEx(WetosDB, DailyTransactionObj, FullDayRuleHourInt, HalfDayRuleHourInt, ref ReturnStatusMsg);
                        }
                        #endregion
                    }
                    #endregion
                }

            }
            #endregion
        }

        /// <summary>
        /// WriteToErroLog
        /// </summary>
        /// <param name="ErrorMessage"></param>
        /// <returns></returns>
        public static bool WriteToErroLog(string ErrorMessage)
        {
            bool ReturnStatus = false;
            try
            {
                String path = System.Web.HttpContext.Current.Server.MapPath("~/ErrorLog/myFile.txt");
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(ErrorMessage);

                }
                ReturnStatus = true;
            }
            catch (Exception)
            {

            }

            return ReturnStatus;
        }

        /// <summary>
        /// WriteToErroLog
        /// </summary>
        /// <param name="ErrorMessage"></param>
        /// <returns></returns>
        public static bool AddToAuditLog(WetosDBEntities WetosDB, string ErrorMessage)
        {
            bool ReturnStatus = false;

            #region ADD AUDIT TRAIL CODE

            try
            {
                AuditTrail action = new AuditTrail();
                action.LogDate = DateTime.Now;

                // Updated by Rajas on 1 AUGUST 2017 START
                if (ErrorMessage.Length > 1024)
                {
                    action.Action = ErrorMessage.Substring(0, 1000);
                }
                else
                {
                    action.Action = ErrorMessage;
                }
                // Updated by Rajas on 1 AUGUST 2017 END

                action.userid = 0; // SessionPersister.UserInfo.UserId;
                action.UserName = "0"; // SessionPersister.UserInfo.UserName;
                action.UserRoleNo = 0;
                action.y_id = 0;
                action.SoftwareVersion = "STPLSERVER";
                action.SessionId = 0;

                action.MachineIP = " ";
                action.MachineNo = " ";

                WetosDB.AuditTrails.AddObject(action);

                WetosDB.SaveChanges();

                WriteToErroLog(ErrorMessage);
            }
            catch (System.Exception E)
            {

                WriteToErroLog("Error in Add audit trail on posting attendance:" + E.Message.ToString() + " _ " + (E.InnerException == null ? string.Empty : E.InnerException.Message));
            }

            #endregion

            return ReturnStatus;
        }


        public bool GetLeaveImportCombined(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {

            List<string> MissingEmployee = new List<string>(); // Added by Rajas on 1 MARCH 2017 for storing list of Employyes missing

            string EmployeeCode = string.Empty;

            List<WetosDB.LeaveCredit> lstSQLLeaveCredit = new List<WetosDB.LeaveCredit>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // Open connection
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // Execute query
            OleDbDataReader rdr = cmd.ExecuteReader();

            // Added by MSJ and Rajas on 2 MARCH 2017
            int RowNo = 1;
            try
            {
                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(0) && rdr.GetValue(0).ToString() != "")
                    {
                        EmployeeCode = rdr.GetValue(0).ToString().Trim();

                        LeaveCredit LeaveCreditObj = new LeaveCredit();
                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();

                        if (EmployeeObj != null)
                        {
                            LeaveCreditObj.EmployeeId = EmployeeObj.EmployeeId;

                            string CurrentLeaveType = string.Empty;
                            if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                            {
                                CurrentLeaveType = rdr.GetValue(3).ToString().Trim();
                            }

                            //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                            DateTime LeaveAppliedDate = new DateTime();
                            int financialYear = 0;
                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                            {
                                LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(4).ToString().Trim());
                                financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();
                            }
                            //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END

                            LeaveCredit CheckForEmployeeIdExistInDB = WetosDB.LeaveCredits.Where(a => a.EmployeeId == EmployeeObj.EmployeeId 
                                && a.LeaveType == CurrentLeaveType && a.FinancialYearId == financialYear).FirstOrDefault();

                            if (CheckForEmployeeIdExistInDB != null)
                            {
                                CheckForEmployeeIdExistInDB.BranchId = EmployeeObj.BranchId;
                                CheckForEmployeeIdExistInDB.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();

                                //CODE ADDED FOR ADDING FINANCIAL YEAR ID BY SHRADDHA ON 09 FEB 2017 START

                                //LeaveCreditObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveType = rdr.GetValue(3).ToString().Trim();
                                }
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.CarryForward = Convert.ToDouble(rdr.GetValue(1).ToString().Trim());
                                }

                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //DateTime LeaveAppliedDate = new DateTime();
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(4).ToString().Trim());
                                    CheckForEmployeeIdExistInDB.ApplicableEffectiveDate = LeaveAppliedDate;
                                    //financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();
                                    CheckForEmployeeIdExistInDB.FinancialYearId = financialYear == null ? 0 : financialYear;
                                }
                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END

                                //if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                //{
                                //    string FinancialYearName = rdr.GetValue(4).ToString().Trim();
                                //    int financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();
                                //    CheckForEmployeeIdExistInDB.FinancialYearId = financialYear == null ? 0 : financialYear;
                                //}
                                CheckForEmployeeIdExistInDB.OpeningBalance = Convert.ToDouble(rdr.GetValue(2).ToString().Trim());
                                WetosDB.SaveChanges();
                            }
                            else
                            {
                                LeaveCreditObj.EmployeeId = EmployeeObj.EmployeeId;
                                LeaveCreditObj.BranchId = EmployeeObj.BranchId;
                                LeaveCreditObj.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();

                                //LeaveCreditObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    LeaveCreditObj.LeaveType = rdr.GetValue(3).ToString().Trim();
                                }
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    LeaveCreditObj.CarryForward = Convert.ToDouble(rdr.GetValue(1).ToString().Trim());
                                }

                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //DateTime LeaveAppliedDate = new DateTime();
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(4).ToString().Trim());
                                    LeaveCreditObj.ApplicableEffectiveDate = LeaveAppliedDate;
                                    //int financialYear = WetosDB.FinancialYears.Where(a => a.Company.CompanyId == EmployeeObj.CompanyId && a.Branch.BranchId == EmployeeObj.BranchId && a.StartDate <= LeaveAppliedDate && a.EndDate >= LeaveAppliedDate).Select(a => a.FinancialYearId).FirstOrDefault();
                                    LeaveCreditObj.FinancialYearId = financialYear;

                                }


                                //if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                //{
                                //    string FinancialYearName = rdr.GetValue(4).ToString().Trim();
                                //   }
                                //ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END
                                LeaveCreditObj.OpeningBalance = Convert.ToDouble(rdr.GetValue(2).ToString().Trim()) + Convert.ToDouble(rdr.GetValue(1).ToString().Trim());


                                WetosDB.LeaveCredits.AddObject(LeaveCreditObj);
                                WetosDB.SaveChanges();
                            }

                            lstSQLLeaveCredit.Add(LeaveCreditObj);
                            WetosDB.SaveChanges();
                        }

                        else  // If employee doesn't exist 
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());
                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Credit at row number in excel sheet : " + string.Join(" ,", MissingEmployee));
                    ImportStatus = "Error in adding Leave Credit at row number in excel sheet : " + string.Join(" ,", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    // Success("Leave Credit : Import data successful");
                    ImportStatus = "Leave Credit : Import data successful";
                    IsSuccess = true;
                    //return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting LEAVE CREDIT EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                //throw;
                ImportStatus = "Error in adding Leave Credit at row number in excel sheet : " + string.Join(" ,", MissingEmployee);
                IsSuccess = false;
                return false;
            }

            //#################################################################------------------------------------------####################################################

            List<string> MissingEmployeeBal = new List<string>();

            string EmployeeCodeBal = string.Empty;

            List<WetosDB.LeaveBalance> lstSQLLeaveBalance = new List<WetosDB.LeaveBalance>();
            OleDbConnection Conn1 = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn1.Open();
            OleDbCommand cmd1 = new OleDbCommand("Select * from [Sheet1$]", Conn1);

            // EXECUTE QRY
            OleDbDataReader rdr1 = cmd1.ExecuteReader();

            int RowNo1 = 1;  // Row number 1 is for headers
            try
            {
                // READ  ROW BY ROW
                while (rdr1.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo1 = RowNo1 + 1;

                    if (!rdr1.IsDBNull(1) && rdr1.GetValue(1).ToString() != "")
                    {
                        EmployeeCodeBal = rdr1.GetValue(0).ToString().Trim();

                        LeaveBalance LeaveBalanceObj = new LeaveBalance();
                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCodeBal).FirstOrDefault();

                        if (EmployeeObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                            string CurrentLeaveType = string.Empty;
                            if (!rdr1.IsDBNull(3) && rdr1.GetValue(3).ToString() != "")
                            {
                                CurrentLeaveType = rdr1.GetValue(3).ToString().Trim();
                            }
                            LeaveBalance CheckForEmployeeIdExistInDB = WetosDB.LeaveBalances.Where(a => a.EmployeeId == EmployeeObj.EmployeeId && a.LeaveType == CurrentLeaveType).FirstOrDefault();

                            if (CheckForEmployeeIdExistInDB != null) // LEAVE BALNACE ALREADY PRESNT
                            {
                                CheckForEmployeeIdExistInDB.EmployeeId = EmployeeObj.EmployeeId;
                                CheckForEmployeeIdExistInDB.BranchId = EmployeeObj.BranchId;
                                CheckForEmployeeIdExistInDB.CompanyId = EmployeeObj.CompanyId;

                                // LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                // LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;

                                if (!rdr1.IsDBNull(1) && rdr1.GetValue(1).ToString() != "" && !rdr1.IsDBNull(2) && rdr1.GetValue(2).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.PreviousBalance = Convert.ToDouble(rdr1.GetValue(1)) + Convert.ToDouble(rdr1.GetValue(2));
                                }
                                if (!rdr1.IsDBNull(5) && rdr1.GetValue(5).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.CurrentBalance = Convert.ToDouble(rdr1.GetValue(5));
                                }
                                if (!rdr1.IsDBNull(6) && rdr1.GetValue(6).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveUsed = Convert.ToDouble(rdr1.GetValue(6));
                                }
                                if (!rdr1.IsDBNull(3) && rdr1.GetValue(3).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveType = rdr1.GetValue(3).ToString().Trim();
                                }

                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                //{
                                //    DateTime LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(5).ToString().Trim());
                                //    CheckForEmployeeIdExistInDB.AppliedFromDate = LeaveAppliedDate;
                                //}
                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END
                                WetosDB.SaveChanges();
                            }
                            else // LEAVE BALANCE NOT PRESENT INSERT
                            {
                                LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                                LeaveBalanceObj.BranchId = EmployeeObj.BranchId;
                                LeaveBalanceObj.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                //LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr1.IsDBNull(1) && rdr1.GetValue(1).ToString() != "" && !rdr1.IsDBNull(2) && rdr1.GetValue(2).ToString() != "")
                                {
                                    LeaveBalanceObj.PreviousBalance = Convert.ToDouble(rdr1.GetValue(1)) + Convert.ToDouble(rdr1.GetValue(2));
                                }
                                if (!rdr1.IsDBNull(5) && rdr1.GetValue(5).ToString() != "")
                                {
                                    LeaveBalanceObj.CurrentBalance = Convert.ToDouble(rdr1.GetValue(5));
                                }
                                if (!rdr1.IsDBNull(6) && rdr1.GetValue(6).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveUsed = Convert.ToDouble(rdr1.GetValue(6));
                                }
                                if (!rdr1.IsDBNull(3) && rdr1.GetValue(3).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveType = rdr1.GetValue(3).ToString().Trim();
                                }


                                WetosDB.LeaveBalances.AddObject(LeaveBalanceObj);
                                WetosDB.SaveChanges();
                            }


                            lstSQLLeaveBalance.Add(LeaveBalanceObj);
                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployeeBal.Add(RowNo.ToString());


                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployeeBal.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployeeBal);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Leave Credit Balance : Import data successful";
                    IsSuccess = true;
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting LEAVE BALANCE EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployeeBal.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployeeBal);
                IsSuccess = false;
                return false;
            }

            //return true;
        }

        // ADDED BY MSJ ON 21 JULY 2018 START
        // NEW IMPORT DATA UTILITY FOR PAYROLL 
        // GetFamilyData, GetQualifyData, GetLoanData, GetSalAdvData, GetMonthSalData

        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// ADDED BY SHRADDHA ON 15 JAN 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess
        public bool GetFamilyData(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            List<WetosDB.LeaveBalance> lstSQLLeaveBalance = new List<WetosDB.LeaveBalance>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Row number 1 is for headers
            try
            {


                // READ  ROW BY ROW
                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                    {
                        EmployeeCode = rdr.GetValue(0).ToString().Trim();

                        LeaveBalance LeaveBalanceObj = new LeaveBalance();
                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();

                        if (EmployeeObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                            string CurrentLeaveType = string.Empty;
                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                            {
                                CurrentLeaveType = rdr.GetValue(4).ToString().Trim();
                            }
                            LeaveBalance CheckForEmployeeIdExistInDB = WetosDB.LeaveBalances.Where(a => a.EmployeeId == EmployeeObj.EmployeeId && a.LeaveType == CurrentLeaveType).FirstOrDefault();

                            if (CheckForEmployeeIdExistInDB != null) // LEAVE BALNACE ALREADY PRESNT
                            {
                                CheckForEmployeeIdExistInDB.EmployeeId = EmployeeObj.EmployeeId;
                                CheckForEmployeeIdExistInDB.BranchId = EmployeeObj.BranchId;
                                CheckForEmployeeIdExistInDB.CompanyId = EmployeeObj.CompanyId;

                                // LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                // LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;

                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }

                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                //{
                                //    DateTime LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(5).ToString().Trim());
                                //    CheckForEmployeeIdExistInDB.AppliedFromDate = LeaveAppliedDate;
                                //}
                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END
                                WetosDB.SaveChanges();
                            }
                            else // LEAVE BALANCE NOT PRESENT INSERT
                            {
                                LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                                LeaveBalanceObj.BranchId = EmployeeObj.BranchId;
                                LeaveBalanceObj.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                //LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    LeaveBalanceObj.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    LeaveBalanceObj.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }


                                WetosDB.LeaveBalances.AddObject(LeaveBalanceObj);
                                WetosDB.SaveChanges();
                            }


                            lstSQLLeaveBalance.Add(LeaveBalanceObj);
                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());


                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Leave Balance : Import data successful";
                    IsSuccess = true;
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting LEAVE BALANCE EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                IsSuccess = false;
                return false;
            }

        }

        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// ADDED BY SHRADDHA ON 15 JAN 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess
        public bool GetQualifyData(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            List<WetosDB.LeaveBalance> lstSQLLeaveBalance = new List<WetosDB.LeaveBalance>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Row number 1 is for headers
            try
            {


                // READ  ROW BY ROW
                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                    {
                        EmployeeCode = rdr.GetValue(0).ToString().Trim();

                        LeaveBalance LeaveBalanceObj = new LeaveBalance();
                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();

                        if (EmployeeObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                            string CurrentLeaveType = string.Empty;
                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                            {
                                CurrentLeaveType = rdr.GetValue(4).ToString().Trim();
                            }
                            LeaveBalance CheckForEmployeeIdExistInDB = WetosDB.LeaveBalances.Where(a => a.EmployeeId == EmployeeObj.EmployeeId && a.LeaveType == CurrentLeaveType).FirstOrDefault();

                            if (CheckForEmployeeIdExistInDB != null) // LEAVE BALNACE ALREADY PRESNT
                            {
                                CheckForEmployeeIdExistInDB.EmployeeId = EmployeeObj.EmployeeId;
                                CheckForEmployeeIdExistInDB.BranchId = EmployeeObj.BranchId;
                                CheckForEmployeeIdExistInDB.CompanyId = EmployeeObj.CompanyId;

                                // LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                // LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;

                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    CheckForEmployeeIdExistInDB.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }

                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE START
                                //if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "")
                                //{
                                //    DateTime LeaveAppliedDate = Convert.ToDateTime(rdr.GetValue(5).ToString().Trim());
                                //    CheckForEmployeeIdExistInDB.AppliedFromDate = LeaveAppliedDate;
                                //}
                                ////ADDED CODE BY SHRADDHA ON 10 MAY 2017 TO ADD LEAVE APPLIED FROM DATE END
                                WetosDB.SaveChanges();
                            }
                            else // LEAVE BALANCE NOT PRESENT INSERT
                            {
                                LeaveBalanceObj.EmployeeId = EmployeeObj.EmployeeId;
                                LeaveBalanceObj.BranchId = EmployeeObj.BranchId;
                                LeaveBalanceObj.CompanyId = EmployeeObj.CompanyId;
                                //LeaveMaster LeaveMasterObj = WetosDB.LeaveMasters.Where(a => a.EmployeeTypeId == EmployeeObj.EmployeeTypeId).FirstOrDefault();
                                //LeaveBalanceObj.LeaveType = LeaveMasterObj.LeaveCode;
                                if (!rdr.IsDBNull(1) && rdr.GetValue(1).ToString() != "")
                                {
                                    LeaveBalanceObj.PreviousBalance = Convert.ToDouble(rdr.GetValue(1));
                                }
                                if (!rdr.IsDBNull(2) && rdr.GetValue(2).ToString() != "")
                                {
                                    LeaveBalanceObj.CurrentBalance = Convert.ToDouble(rdr.GetValue(2));
                                }
                                if (!rdr.IsDBNull(3) && rdr.GetValue(3).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveUsed = Convert.ToDouble(rdr.GetValue(3));
                                }
                                if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "")
                                {
                                    LeaveBalanceObj.LeaveType = rdr.GetValue(4).ToString().Trim();
                                }


                                WetosDB.LeaveBalances.AddObject(LeaveBalanceObj);
                                WetosDB.SaveChanges();
                            }


                            lstSQLLeaveBalance.Add(LeaveBalanceObj);
                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());


                        }
                    }
                }
                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }

                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Leave Balance : Import data successful";
                    IsSuccess = true;
                    return true;
                }


            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting LEAVE BALANCE EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee);
                IsSuccess = false;
                return false;
            }

        }


        //ADDED BY PUSHKAR ON 18 DEC 2019
        public bool GetShiftRoaster(string Path, string Company, ref string ImportStatus, ref bool IsSuccess)
        {
            List<string> MissingEmployee = new List<string>();

            string EmployeeCode = string.Empty;

            List<WetosDB.LeaveBalance> lstSQLLeaveBalance = new List<WetosDB.LeaveBalance>();
            OleDbConnection Conn = new OleDbConnection(ExcelConnection.Replace("[ExcelFile]", Path));

            // OPEN CONNECTION
            Conn.Open();
            OleDbCommand cmd = new OleDbCommand("Select * from [Sheet1$]", Conn);

            // EXECUTE QRY
            OleDbDataReader rdr = cmd.ExecuteReader();

            int RowNo = 1;  // Row number 1 is for headers
            try
            {
                // READ  ROW BY ROW
                while (rdr.Read())
                {
                    // Added by MSJ and Rajas on 2 MARCH 2017
                    RowNo = RowNo + 1;

                    if (!rdr.IsDBNull(0) && rdr.GetValue(0).ToString() != "")
                    {
                        EmployeeCode = rdr.GetValue(0).ToString().Trim();

                        int MonthEx = Convert.ToInt32(rdr.GetValue(2).ToString().Trim());
                        int YearEx = Convert.ToInt32(rdr.GetValue(3).ToString().Trim());

                        Employee EmployeeObj = WetosDB.Employees.Where(a => a.EmployeeCode.Trim() == EmployeeCode).FirstOrDefault();

                        if (EmployeeObj != null) // EMPLOYEE ALREADY EXIST // UPDATE
                        {
                            ShiftSchedule ShiftSchedule = WetosDB.ShiftSchedules.Where(a => a.EmployeeId == EmployeeObj.EmployeeId
                                && a.ShiftMonth == MonthEx && a.ShiftYear == YearEx).FirstOrDefault();

                            bool IsNewShift = false;
                            if (ShiftSchedule == null)
                            {
                                ShiftSchedule = new ShiftSchedule();
                                IsNewShift = true;
                            }

                            ShiftSchedule.EmployeeId = EmployeeObj.EmployeeId;
                            ShiftSchedule.ShiftMonth = MonthEx;
                            ShiftSchedule.ShiftYear = YearEx;

                            if (!rdr.IsDBNull(4) && rdr.GetValue(4).ToString() != "") //1
                            {
                                ShiftSchedule.Day1 = rdr.GetValue(4).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(5) && rdr.GetValue(5).ToString() != "") //2
                            {
                                ShiftSchedule.Day2 = rdr.GetValue(5).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(6) && rdr.GetValue(6).ToString() != "") //3
                            {
                                ShiftSchedule.Day3 = rdr.GetValue(6).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(7) && rdr.GetValue(7).ToString() != "") //4
                            {
                                ShiftSchedule.Day4 = rdr.GetValue(7).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(8) && rdr.GetValue(8).ToString() != "") //5
                            {
                                ShiftSchedule.Day5 = rdr.GetValue(8).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(9) && rdr.GetValue(9).ToString() != "") //6
                            {
                                ShiftSchedule.Day6 = rdr.GetValue(9).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(10) && rdr.GetValue(10).ToString() != "") //7
                            {
                                ShiftSchedule.Day7 = rdr.GetValue(10).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(11) && rdr.GetValue(11).ToString() != "") //8
                            {
                                ShiftSchedule.Day8 = rdr.GetValue(11).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(12) && rdr.GetValue(12).ToString() != "") //9
                            {
                                ShiftSchedule.Day9 = rdr.GetValue(12).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(13) && rdr.GetValue(13).ToString() != "") //10
                            {
                                ShiftSchedule.Day10 = rdr.GetValue(13).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(14) && rdr.GetValue(14).ToString() != "") //11
                            {
                                ShiftSchedule.Day11 = rdr.GetValue(14).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(15) && rdr.GetValue(15).ToString() != "") //12
                            {
                                ShiftSchedule.Day12 = rdr.GetValue(15).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(16) && rdr.GetValue(16).ToString() != "") //13
                            {
                                ShiftSchedule.Day13 = rdr.GetValue(16).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(17) && rdr.GetValue(17).ToString() != "") //14
                            {
                                ShiftSchedule.Day14 = rdr.GetValue(17).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(18) && rdr.GetValue(18).ToString() != "") //15
                            {
                                ShiftSchedule.Day15 = rdr.GetValue(18).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(19) && rdr.GetValue(19).ToString() != "") //16
                            {
                                ShiftSchedule.Day16 = rdr.GetValue(19).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(20) && rdr.GetValue(20).ToString() != "") //17
                            {
                                ShiftSchedule.Day17 = rdr.GetValue(20).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(21) && rdr.GetValue(21).ToString() != "") //18
                            {
                                ShiftSchedule.Day18 = rdr.GetValue(21).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(22) && rdr.GetValue(22).ToString() != "") //19
                            {
                                ShiftSchedule.Day19 = rdr.GetValue(22).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(23) && rdr.GetValue(23).ToString() != "") //20
                            {
                                ShiftSchedule.Day20 = rdr.GetValue(23).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(24) && rdr.GetValue(24).ToString() != "") //21
                            {
                                ShiftSchedule.Day21 = rdr.GetValue(24).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(25) && rdr.GetValue(25).ToString() != "") //22
                            {
                                ShiftSchedule.Day22 = rdr.GetValue(25).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(26) && rdr.GetValue(26).ToString() != "") //23
                            {
                                ShiftSchedule.Day23 = rdr.GetValue(26).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(27) && rdr.GetValue(27).ToString() != "") //24
                            {
                                ShiftSchedule.Day24 = rdr.GetValue(27).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(28) && rdr.GetValue(28).ToString() != "") //25
                            {
                                ShiftSchedule.Day25 = rdr.GetValue(28).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(29) && rdr.GetValue(29).ToString() != "") //26
                            {
                                ShiftSchedule.Day26 = rdr.GetValue(29).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(30) && rdr.GetValue(30).ToString() != "") //27
                            {
                                ShiftSchedule.Day27 = rdr.GetValue(30).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(31) && rdr.GetValue(31).ToString() != "") //28
                            {
                                ShiftSchedule.Day28 = rdr.GetValue(31).ToString().Trim();
                            }
                            if (!rdr.IsDBNull(32) && rdr.GetValue(32).ToString() != "") //29
                            {
                                ShiftSchedule.Day29 = rdr.GetValue(32).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(33) && rdr.GetValue(33).ToString() != "") //30
                            {
                                ShiftSchedule.Day30 = rdr.GetValue(33).ToString().Trim();
                            }

                            if (!rdr.IsDBNull(34) && rdr.GetValue(34).ToString() != "") //31
                            {
                                ShiftSchedule.Day31 = rdr.GetValue(34).ToString().Trim();
                            }

                            if (IsNewShift == true)
                            {
                                WetosDB.ShiftSchedules.AddObject(ShiftSchedule);
                            }

                            WetosDB.SaveChanges();
                        }
                        else
                        {
                            //MissingEmployee.Add(EmployeeCode);
                            MissingEmployee.Add(RowNo.ToString());
                        }
                    }
                }

                Conn.Close();
                Conn.Dispose();

                // Added By Rajas on 1 MARCH 2017
                if (MissingEmployee.Count > 0)
                {
                    //Error("Error in adding Leave Balance at row number in excel sheet " + string.Join(", ", MissingEmployee));
                    ImportStatus = "Error in adding Shift Schedule at row number in excel sheet " + string.Join(", ", MissingEmployee);
                    IsSuccess = false;
                    return false;
                }
                else
                {
                    //Success("Leave Balance : Import data successful");
                    ImportStatus = "Shift Schedule : Import data successful";
                    IsSuccess = true;
                    return true;
                }

            }
            catch (System.Exception E)
            {
                AddAuditTrail("Error in getting Shift Schedule EXCEL Data :" + E.Message + (E.InnerException == null ? string.Empty : E.InnerException.Message)); // CODE ADDED BY SHRADDHA ON 21 FEB 2018
                MissingEmployee.Add(RowNo.ToString());
                Conn.Dispose();
                ImportStatus = "Error in adding Shift Schedule at row number in excel sheet " + string.Join(", ", MissingEmployee);
                IsSuccess = false;
                return false;
            }

        }

        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// ADDED BY SHRADDHA ON 15 JAN 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess

        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// ADDED BY SHRADDHA ON 15 JAN 2017
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess

        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>
        /// Updated by Rajas on 5 JULY 2017 for ref bool IsSuccess

        // ADDED BY MSJ ON 21 JULY 2018 END


        /// <summary>
        /// CODE FOR IMPORT DATA FOR HOLIDAY DATA
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>       


        /// <summary>
        /// CODE FOR IMPORT DATA FOR LEAVE CREDIT
        /// <param name="Path"></param>
        /// <param name="Company"></param>
        /// <returns></returns>



        // IMPORT BONUS // Bonus FY 17-18
    }

}
