//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WetosDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WetosDBEntities : DbContext
    {
        public WetosDBEntities()
            : base("name=WetosDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AuditTrail> AuditTrails { get; set; }
        public virtual DbSet<BloodGroup> BloodGroups { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<DropdownData> DropdownDatas { get; set; }
        public virtual DbSet<EmployeeGrouptype> EmployeeGrouptypes { get; set; }
        public virtual DbSet<EmployeeType> EmployeeTypes { get; set; }
        public virtual DbSet<FinancialYear> FinancialYears { get; set; }
        public virtual DbSet<GlobalSetting> GlobalSettings { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<HeadCode> HeadCodes { get; set; }
        public virtual DbSet<HeadType> HeadTypes { get; set; }
        public virtual DbSet<HoliDay> HoliDays { get; set; }
        public virtual DbSet<LeaveCredit> LeaveCredits { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<NavMenu> NavMenus { get; set; }
        public virtual DbSet<RoleDef> RoleDefs { get; set; }
        public virtual DbSet<RoleNavMenu> RoleNavMenus { get; set; }
        public virtual DbSet<RoleType> RoleTypes { get; set; }
        public virtual DbSet<RuleEngine> RuleEngines { get; set; }
        public virtual DbSet<RuleFlag> RuleFlags { get; set; }
        public virtual DbSet<Rule> Rules { get; set; }
        public virtual DbSet<RulesMaster> RulesMasters { get; set; }
        public virtual DbSet<RuleTransaction> RuleTransactions { get; set; }
        public virtual DbSet<Schedular> Schedulars { get; set; }
        public virtual DbSet<ShiftPatternRule> ShiftPatternRules { get; set; }
        public virtual DbSet<ShiftRotation> ShiftRotations { get; set; }
        public virtual DbSet<ShiftSchedule> ShiftSchedules { get; set; }
        public virtual DbSet<ShiftSchedulePattern> ShiftSchedulePatterns { get; set; }
        public virtual DbSet<ShiftSwapReplace> ShiftSwapReplaces { get; set; }
        public virtual DbSet<UploadCompanyDocument> UploadCompanyDocuments { get; set; }
        public virtual DbSet<UploadDocument> UploadDocuments { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VwBranchDetail> VwBranchDetails { get; set; }
        public virtual DbSet<VwDepartmentDetail> VwDepartmentDetails { get; set; }
        public virtual DbSet<VwDesignationDetail> VwDesignationDetails { get; set; }
        public virtual DbSet<VwEmployeeGroupDetail> VwEmployeeGroupDetails { get; set; }
        public virtual DbSet<VwGradeDetail> VwGradeDetails { get; set; }
        public virtual DbSet<VwLeaveApplicationIndex> VwLeaveApplicationIndexes { get; set; }
        public virtual DbSet<VwLocationNameInCompany> VwLocationNameInCompanies { get; set; }
        public virtual DbSet<VwNewsList> VwNewsLists { get; set; }
        public virtual DbSet<VwODTravelIndex> VwODTravelIndexes { get; set; }
        public virtual DbSet<VwRuleTransaction> VwRuleTransactions { get; set; }
        public virtual DbSet<VwShiftDetail> VwShiftDetails { get; set; }
        public virtual DbSet<VwShiftGroupDetail> VwShiftGroupDetails { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<EmployeeGroup> EmployeeGroups { get; set; }
        public virtual DbSet<EmployeeGroupDetail> EmployeeGroupDetails { get; set; }
        public virtual DbSet<VIEWREPORT> VIEWREPORTS { get; set; }
        public virtual DbSet<EmployeeLifeCycle> EmployeeLifeCycles { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<VwActiveEmployee> VwActiveEmployees { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<VwCumulativeManualCompOffList> VwCumulativeManualCompOffLists { get; set; }
        public virtual DbSet<Vw_CumulativeCompOffApplicationIndex> Vw_CumulativeCompOffApplicationIndex { get; set; }
        public virtual DbSet<Vw_CompOffApplicationIndex> Vw_CompOffApplicationIndex { get; set; }
        public virtual DbSet<LeaveMaster> LeaveMasters { get; set; }
        public virtual DbSet<DeclaredHoliday> DeclaredHolidays { get; set; }
        public virtual DbSet<LeaveEncash> LeaveEncashes { get; set; }
        public virtual DbSet<OtHr> OtHrs { get; set; }
        public virtual DbSet<EmployeeExtraDetail> EmployeeExtraDetails { get; set; }
        public virtual DbSet<TblFamilyDetail> TblFamilyDetails { get; set; }
        public virtual DbSet<CalendarStatus> CalendarStatus { get; set; }
        public virtual DbSet<AttendanceYear> AttendanceYears { get; set; }
        public virtual DbSet<CommanData> CommanDatas { get; set; }
        public virtual DbSet<CompOff> CompOffs { get; set; }
        public virtual DbSet<CompOffApplication> CompOffApplications { get; set; }
        public virtual DbSet<CondoneTrn> CondoneTrns { get; set; }
        public virtual DbSet<CumulativeCompOff> CumulativeCompOffs { get; set; }
        public virtual DbSet<CumulativeCompOffApplication> CumulativeCompOffApplications { get; set; }
        public virtual DbSet<CumulativeManualCompOff> CumulativeManualCompOffs { get; set; }
        public virtual DbSet<ExceptionEntry> ExceptionEntries { get; set; }
        public virtual DbSet<LeaveApplication> LeaveApplications { get; set; }
        public virtual DbSet<LeaveBalance> LeaveBalances { get; set; }
        public virtual DbSet<LeaveBalanceBackupData> LeaveBalanceBackupDatas { get; set; }
        public virtual DbSet<ManualCompOff> ManualCompOffs { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<ODLateEarly> ODLateEarlies { get; set; }
        public virtual DbSet<DailyTransaction> DailyTransactions { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<ODTour> ODTours { get; set; }
        public virtual DbSet<SqlQuery> SqlQueries { get; set; }
        public virtual DbSet<MonthDetail> MonthDetails { get; set; }
    
        public virtual ObjectResult<SP_DeclaredHolidayListView_Result> SP_DeclaredHolidayListView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DeclaredHolidayListView_Result>("SP_DeclaredHolidayListView");
        }
    
        public virtual ObjectResult<SP_DisplayShiftOnCalendar_Result> SP_DisplayShiftOnCalendar(Nullable<int> employeeId, Nullable<int> inputMonth, Nullable<int> inputYear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var inputMonthParameter = inputMonth.HasValue ?
                new ObjectParameter("InputMonth", inputMonth) :
                new ObjectParameter("InputMonth", typeof(int));
    
            var inputYearParameter = inputYear.HasValue ?
                new ObjectParameter("InputYear", inputYear) :
                new ObjectParameter("InputYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DisplayShiftOnCalendar_Result>("SP_DisplayShiftOnCalendar", employeeIdParameter, inputMonthParameter, inputYearParameter);
        }
    
        public virtual ObjectResult<sp_get_Notifications_Result> sp_get_Notifications(Nullable<int> employeeid, Nullable<System.DateTime> todaysDate)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var todaysDateParameter = todaysDate.HasValue ?
                new ObjectParameter("TodaysDate", todaysDate) :
                new ObjectParameter("TodaysDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Notifications_Result>("sp_get_Notifications", employeeidParameter, todaysDateParameter);
        }
    
        public virtual ObjectResult<sp_get_RoleNavmenu_Result> sp_get_RoleNavmenu(Nullable<int> yid, Nullable<int> roleid)
        {
            var yidParameter = yid.HasValue ?
                new ObjectParameter("yid", yid) :
                new ObjectParameter("yid", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_RoleNavmenu_Result>("sp_get_RoleNavmenu", yidParameter, roleidParameter);
        }
    
        public virtual ObjectResult<SP_GetDailyTransactionList_Result> SP_GetDailyTransactionList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDailyTransactionList_Result>("SP_GetDailyTransactionList", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_GetDepartmentwiseLateEmployeeCount_Result> SP_GetDepartmentwiseLateEmployeeCount(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> allowedLateCount, Nullable<System.DateTime> fDATE, Nullable<System.DateTime> tDATE)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var allowedLateCountParameter = allowedLateCount.HasValue ?
                new ObjectParameter("AllowedLateCount", allowedLateCount) :
                new ObjectParameter("AllowedLateCount", typeof(int));
    
            var fDATEParameter = fDATE.HasValue ?
                new ObjectParameter("FDATE", fDATE) :
                new ObjectParameter("FDATE", typeof(System.DateTime));
    
            var tDATEParameter = tDATE.HasValue ?
                new ObjectParameter("TDATE", tDATE) :
                new ObjectParameter("TDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDepartmentwiseLateEmployeeCount_Result>("SP_GetDepartmentwiseLateEmployeeCount", companyIdParameter, branchIdParameter, allowedLateCountParameter, fDATEParameter, tDATEParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeListForMessaging_Result> SP_GetEmployeeListForMessaging(Nullable<int> inputEmployeeId)
        {
            var inputEmployeeIdParameter = inputEmployeeId.HasValue ?
                new ObjectParameter("InputEmployeeId", inputEmployeeId) :
                new ObjectParameter("InputEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeListForMessaging_Result>("SP_GetEmployeeListForMessaging", inputEmployeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeListNotExistInLoginTable_Result> SP_GetEmployeeListNotExistInLoginTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeListNotExistInLoginTable_Result>("SP_GetEmployeeListNotExistInLoginTable");
        }
    
        public virtual ObjectResult<SP_GetEmployeeListReportingTome_Result> SP_GetEmployeeListReportingTome(Nullable<int> inputEmployeeId)
        {
            var inputEmployeeIdParameter = inputEmployeeId.HasValue ?
                new ObjectParameter("InputEmployeeId", inputEmployeeId) :
                new ObjectParameter("InputEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeListReportingTome_Result>("SP_GetEmployeeListReportingTome", inputEmployeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetLeaveApproverList_Result> SP_GetLeaveApproverList(Nullable<int> inputEmployeeId)
        {
            var inputEmployeeIdParameter = inputEmployeeId.HasValue ?
                new ObjectParameter("InputEmployeeId", inputEmployeeId) :
                new ObjectParameter("InputEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLeaveApproverList_Result>("SP_GetLeaveApproverList", inputEmployeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetLeaveCreditDataList_Result> SP_GetLeaveCreditDataList(string financialName)
        {
            var financialNameParameter = financialName != null ?
                new ObjectParameter("FinancialName", financialName) :
                new ObjectParameter("FinancialName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLeaveCreditDataList_Result>("SP_GetLeaveCreditDataList", financialNameParameter);
        }
    
        public virtual ObjectResult<SP_GetNotifications_Result> SP_GetNotifications(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNotifications_Result>("SP_GetNotifications", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetSanctionerList_Result> SP_GetSanctionerList(Nullable<int> inputEmployeeId)
        {
            var inputEmployeeIdParameter = inputEmployeeId.HasValue ?
                new ObjectParameter("InputEmployeeId", inputEmployeeId) :
                new ObjectParameter("InputEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSanctionerList_Result>("SP_GetSanctionerList", inputEmployeeIdParameter);
        }
    
        public virtual ObjectResult<SP_LeaveBalanceDataList_Result> SP_LeaveBalanceDataList(string financialName)
        {
            var financialNameParameter = financialName != null ?
                new ObjectParameter("FinancialName", financialName) :
                new ObjectParameter("FinancialName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveBalanceDataList_Result>("SP_LeaveBalanceDataList", financialNameParameter);
        }
    
        public virtual ObjectResult<SP_LeaveCalculationSheet_Result> SP_LeaveCalculationSheet(Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveCalculationSheet_Result>("SP_LeaveCalculationSheet", fROMDATEParameter, tODATEParameter);
        }
    
        public virtual ObjectResult<SP_LeaveCalculationSheetNew_Result> SP_LeaveCalculationSheetNew(Nullable<System.DateTime> asOnDate)
        {
            var asOnDateParameter = asOnDate.HasValue ?
                new ObjectParameter("AsOnDate", asOnDate) :
                new ObjectParameter("AsOnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveCalculationSheetNew_Result>("SP_LeaveCalculationSheetNew", asOnDateParameter);
        }
    
        public virtual ObjectResult<SP_LeaveTableData_Result> SP_LeaveTableData(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveTableData_Result>("SP_LeaveTableData", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_LeaveTableDataEX_Result> SP_LeaveTableDataEX(Nullable<int> employeeId, Nullable<int> financialYearId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveTableDataEX_Result>("SP_LeaveTableDataEX", employeeIdParameter, financialYearIdParameter);
        }
    
        public virtual ObjectResult<SP_LeaveTableDataNew_Result> SP_LeaveTableDataNew(Nullable<int> employeeId, Nullable<System.DateTime> asOnDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var asOnDateParameter = asOnDate.HasValue ?
                new ObjectParameter("AsOnDate", asOnDate) :
                new ObjectParameter("AsOnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveTableDataNew_Result>("SP_LeaveTableDataNew", employeeIdParameter, asOnDateParameter);
        }
    
        public virtual ObjectResult<SP_ShiftScheduleList_Result> SP_ShiftScheduleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ShiftScheduleList_Result>("SP_ShiftScheduleList");
        }
    
        public virtual int SP_UpdateLeaveApplicationAuditLog(Nullable<int> leaveApplicationid, Nullable<int> empId, string leaveType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fromDayStatus, Nullable<int> toDayStatus, Nullable<double> appliedDays, Nullable<double> actualDays, string purpose, string status, Nullable<int> branchId, Nullable<int> companyId, Nullable<int> loginUserId)
        {
            var leaveApplicationidParameter = leaveApplicationid.HasValue ?
                new ObjectParameter("LeaveApplicationid", leaveApplicationid) :
                new ObjectParameter("LeaveApplicationid", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromDayStatusParameter = fromDayStatus.HasValue ?
                new ObjectParameter("FromDayStatus", fromDayStatus) :
                new ObjectParameter("FromDayStatus", typeof(int));
    
            var toDayStatusParameter = toDayStatus.HasValue ?
                new ObjectParameter("ToDayStatus", toDayStatus) :
                new ObjectParameter("ToDayStatus", typeof(int));
    
            var appliedDaysParameter = appliedDays.HasValue ?
                new ObjectParameter("AppliedDays", appliedDays) :
                new ObjectParameter("AppliedDays", typeof(double));
    
            var actualDaysParameter = actualDays.HasValue ?
                new ObjectParameter("ActualDays", actualDays) :
                new ObjectParameter("ActualDays", typeof(double));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateLeaveApplicationAuditLog", leaveApplicationidParameter, empIdParameter, leaveTypeParameter, fromDateParameter, toDateParameter, fromDayStatusParameter, toDayStatusParameter, appliedDaysParameter, actualDaysParameter, purposeParameter, statusParameter, branchIdParameter, companyIdParameter, loginUserIdParameter);
        }
    
        public virtual int SP_UpdateODTravelAuditLog(Nullable<int> oDTourId, Nullable<int> employeeId, string oDTourType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string oDDayStatus, string oDDayStatus1, Nullable<double> appliedDay, Nullable<double> actualDay, string place, string purpose, string status, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> loginUserId)
        {
            var oDTourIdParameter = oDTourId.HasValue ?
                new ObjectParameter("ODTourId", oDTourId) :
                new ObjectParameter("ODTourId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var oDTourTypeParameter = oDTourType != null ?
                new ObjectParameter("ODTourType", oDTourType) :
                new ObjectParameter("ODTourType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var oDDayStatusParameter = oDDayStatus != null ?
                new ObjectParameter("ODDayStatus", oDDayStatus) :
                new ObjectParameter("ODDayStatus", typeof(string));
    
            var oDDayStatus1Parameter = oDDayStatus1 != null ?
                new ObjectParameter("ODDayStatus1", oDDayStatus1) :
                new ObjectParameter("ODDayStatus1", typeof(string));
    
            var appliedDayParameter = appliedDay.HasValue ?
                new ObjectParameter("AppliedDay", appliedDay) :
                new ObjectParameter("AppliedDay", typeof(double));
    
            var actualDayParameter = actualDay.HasValue ?
                new ObjectParameter("ActualDay", actualDay) :
                new ObjectParameter("ActualDay", typeof(double));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateODTravelAuditLog", oDTourIdParameter, employeeIdParameter, oDTourTypeParameter, fromDateParameter, toDateParameter, oDDayStatusParameter, oDDayStatus1Parameter, appliedDayParameter, actualDayParameter, placeParameter, purposeParameter, statusParameter, companyIdParameter, branchIdParameter, loginUserIdParameter);
        }
    
        public virtual ObjectResult<SP_UserListForResetPassword_Result> SP_UserListForResetPassword()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserListForResetPassword_Result>("SP_UserListForResetPassword");
        }
    
        public virtual int usp_UpdateDailyTrans_Lock(string pLockStatus, Nullable<int> pBranchID, Nullable<int> pCompanyID, Nullable<System.DateTime> pFromDate, Nullable<System.DateTime> pToDate, string pEmployeeList)
        {
            var pLockStatusParameter = pLockStatus != null ?
                new ObjectParameter("PLockStatus", pLockStatus) :
                new ObjectParameter("PLockStatus", typeof(string));
    
            var pBranchIDParameter = pBranchID.HasValue ?
                new ObjectParameter("PBranchID", pBranchID) :
                new ObjectParameter("PBranchID", typeof(int));
    
            var pCompanyIDParameter = pCompanyID.HasValue ?
                new ObjectParameter("PCompanyID", pCompanyID) :
                new ObjectParameter("PCompanyID", typeof(int));
    
            var pFromDateParameter = pFromDate.HasValue ?
                new ObjectParameter("PFromDate", pFromDate) :
                new ObjectParameter("PFromDate", typeof(System.DateTime));
    
            var pToDateParameter = pToDate.HasValue ?
                new ObjectParameter("PToDate", pToDate) :
                new ObjectParameter("PToDate", typeof(System.DateTime));
    
            var pEmployeeListParameter = pEmployeeList != null ?
                new ObjectParameter("PEmployeeList", pEmployeeList) :
                new ObjectParameter("PEmployeeList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDailyTrans_Lock", pLockStatusParameter, pBranchIDParameter, pCompanyIDParameter, pFromDateParameter, pToDateParameter, pEmployeeListParameter);
        }
    
        public virtual ObjectResult<SP_GetHRList_Result> SP_GetHRList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetHRList_Result>("SP_GetHRList");
        }
    
        public virtual ObjectResult<usp_Rpt_GetTimeCard_Result> usp_Rpt_GetTimeCard(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, string empid, string departmentListId, string branchListId, string companyListId, string roleTypeId, Nullable<int> reportingId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var empidParameter = empid != null ?
                new ObjectParameter("Empid", empid) :
                new ObjectParameter("Empid", typeof(string));
    
            var departmentListIdParameter = departmentListId != null ?
                new ObjectParameter("DepartmentListId", departmentListId) :
                new ObjectParameter("DepartmentListId", typeof(string));
    
            var branchListIdParameter = branchListId != null ?
                new ObjectParameter("BranchListId", branchListId) :
                new ObjectParameter("BranchListId", typeof(string));
    
            var companyListIdParameter = companyListId != null ?
                new ObjectParameter("CompanyListId", companyListId) :
                new ObjectParameter("CompanyListId", typeof(string));
    
            var roleTypeIdParameter = roleTypeId != null ?
                new ObjectParameter("RoleTypeId", roleTypeId) :
                new ObjectParameter("RoleTypeId", typeof(string));
    
            var reportingIdParameter = reportingId.HasValue ?
                new ObjectParameter("ReportingId", reportingId) :
                new ObjectParameter("ReportingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Rpt_GetTimeCard_Result>("usp_Rpt_GetTimeCard", fdateParameter, tdateParameter, empidParameter, departmentListIdParameter, branchListIdParameter, companyListIdParameter, roleTypeIdParameter, reportingIdParameter);
        }
    
        public virtual int SPPostingprocessForAllBranchAndPrevDayForShiftG(Nullable<System.DateTime> trandate)
        {
            var trandateParameter = trandate.HasValue ?
                new ObjectParameter("Trandate", trandate) :
                new ObjectParameter("Trandate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPostingprocessForAllBranchAndPrevDayForShiftG", trandateParameter);
        }
    
        public virtual ObjectResult<SP_ActiveEmployeeInEmployeeMaster_Result> SP_ActiveEmployeeInEmployeeMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ActiveEmployeeInEmployeeMaster_Result>("SP_ActiveEmployeeInEmployeeMaster");
        }
    
        public virtual ObjectResult<SP_ActiveEmployeeAsOnDate_Result> SP_ActiveEmployeeAsOnDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ActiveEmployeeAsOnDate_Result>("SP_ActiveEmployeeAsOnDate", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_InsertExcelDataForEmployee_Result> SP_InsertExcelDataForEmployee(string employeeCode, string title, string firstName, string middleName, string lastName, string companyName, Nullable<System.DateTime> joiningDate, Nullable<System.DateTime> confirmDate, Nullable<System.DateTime> birthDate, string telephone1, string telephone2, string email, string emailAddress, string gender, string marritalStatus, string departmentName, string designationName, string employeeReportingId, string employeeReportingId2, string present_Address, string permanent_Address, string panNo, Nullable<System.DateTime> leavingdate, string branchName, string divisionName, string employeeGroupName, string employeeType, string gradeId, string shiftCode, string weekOff1, string weekOff2, Nullable<bool> first, Nullable<bool> second, Nullable<bool> third, Nullable<bool> fourth, Nullable<bool> fifth)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var confirmDateParameter = confirmDate.HasValue ?
                new ObjectParameter("ConfirmDate", confirmDate) :
                new ObjectParameter("ConfirmDate", typeof(System.DateTime));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var marritalStatusParameter = marritalStatus != null ?
                new ObjectParameter("MarritalStatus", marritalStatus) :
                new ObjectParameter("MarritalStatus", typeof(string));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var designationNameParameter = designationName != null ?
                new ObjectParameter("DesignationName", designationName) :
                new ObjectParameter("DesignationName", typeof(string));
    
            var employeeReportingIdParameter = employeeReportingId != null ?
                new ObjectParameter("EmployeeReportingId", employeeReportingId) :
                new ObjectParameter("EmployeeReportingId", typeof(string));
    
            var employeeReportingId2Parameter = employeeReportingId2 != null ?
                new ObjectParameter("EmployeeReportingId2", employeeReportingId2) :
                new ObjectParameter("EmployeeReportingId2", typeof(string));
    
            var present_AddressParameter = present_Address != null ?
                new ObjectParameter("Present_Address", present_Address) :
                new ObjectParameter("Present_Address", typeof(string));
    
            var permanent_AddressParameter = permanent_Address != null ?
                new ObjectParameter("Permanent_Address", permanent_Address) :
                new ObjectParameter("Permanent_Address", typeof(string));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            var leavingdateParameter = leavingdate.HasValue ?
                new ObjectParameter("Leavingdate", leavingdate) :
                new ObjectParameter("Leavingdate", typeof(System.DateTime));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("DivisionName", divisionName) :
                new ObjectParameter("DivisionName", typeof(string));
    
            var employeeGroupNameParameter = employeeGroupName != null ?
                new ObjectParameter("EmployeeGroupName", employeeGroupName) :
                new ObjectParameter("EmployeeGroupName", typeof(string));
    
            var employeeTypeParameter = employeeType != null ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(string));
    
            var gradeIdParameter = gradeId != null ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(string));
    
            var shiftCodeParameter = shiftCode != null ?
                new ObjectParameter("ShiftCode", shiftCode) :
                new ObjectParameter("ShiftCode", typeof(string));
    
            var weekOff1Parameter = weekOff1 != null ?
                new ObjectParameter("WeekOff1", weekOff1) :
                new ObjectParameter("WeekOff1", typeof(string));
    
            var weekOff2Parameter = weekOff2 != null ?
                new ObjectParameter("WeekOff2", weekOff2) :
                new ObjectParameter("WeekOff2", typeof(string));
    
            var firstParameter = first.HasValue ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(bool));
    
            var secondParameter = second.HasValue ?
                new ObjectParameter("Second", second) :
                new ObjectParameter("Second", typeof(bool));
    
            var thirdParameter = third.HasValue ?
                new ObjectParameter("Third", third) :
                new ObjectParameter("Third", typeof(bool));
    
            var fourthParameter = fourth.HasValue ?
                new ObjectParameter("Fourth", fourth) :
                new ObjectParameter("Fourth", typeof(bool));
    
            var fifthParameter = fifth.HasValue ?
                new ObjectParameter("Fifth", fifth) :
                new ObjectParameter("Fifth", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsertExcelDataForEmployee_Result>("SP_InsertExcelDataForEmployee", employeeCodeParameter, titleParameter, firstNameParameter, middleNameParameter, lastNameParameter, companyNameParameter, joiningDateParameter, confirmDateParameter, birthDateParameter, telephone1Parameter, telephone2Parameter, emailParameter, emailAddressParameter, genderParameter, marritalStatusParameter, departmentNameParameter, designationNameParameter, employeeReportingIdParameter, employeeReportingId2Parameter, present_AddressParameter, permanent_AddressParameter, panNoParameter, leavingdateParameter, branchNameParameter, divisionNameParameter, employeeGroupNameParameter, employeeTypeParameter, gradeIdParameter, shiftCodeParameter, weekOff1Parameter, weekOff2Parameter, firstParameter, secondParameter, thirdParameter, fourthParameter, fifthParameter);
        }
    
        public virtual ObjectResult<SP_EmployeeDetailsOnEmployeeMaster_Result> SP_EmployeeDetailsOnEmployeeMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmployeeDetailsOnEmployeeMaster_Result>("SP_EmployeeDetailsOnEmployeeMaster");
        }
    
        public virtual ObjectResult<SP_GetDailyTransactionListForCumulativeCompOff_Result> SP_GetDailyTransactionListForCumulativeCompOff(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDailyTransactionListForCumulativeCompOff_Result>("SP_GetDailyTransactionListForCumulativeCompOff", empIdParameter);
        }
    
        public virtual ObjectResult<SP_ManualCOSanctionIndex_Result> SP_ManualCOSanctionIndex(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ManualCOSanctionIndex_Result>("SP_ManualCOSanctionIndex", employeeIdParameter);
        }
    
        public virtual ObjectResult<sp_get_user_role_menu_Result> sp_get_user_role_menu(Nullable<int> userId, Nullable<int> y_id)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var y_idParameter = y_id.HasValue ?
                new ObjectParameter("y_id", y_id) :
                new ObjectParameter("y_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_user_role_menu_Result>("sp_get_user_role_menu", userIdParameter, y_idParameter);
        }
    
        public virtual int SPPostingprocessForALLEmployeeForAutoShiftWithNS(Nullable<System.DateTime> trandate)
        {
            var trandateParameter = trandate.HasValue ?
                new ObjectParameter("Trandate", trandate) :
                new ObjectParameter("Trandate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPostingprocessForALLEmployeeForAutoShiftWithNS", trandateParameter);
        }
    
        public virtual ObjectResult<SP_GetAttendanceDetails_Result> SP_GetAttendanceDetails(Nullable<int> employeeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAttendanceDetails_Result>("SP_GetAttendanceDetails", employeeIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_ExceptionSanctionIndex_Result> SP_ExceptionSanctionIndex(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ExceptionSanctionIndex_Result>("SP_ExceptionSanctionIndex", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetManualCompOffList_Result> SP_GetManualCompOffList(Nullable<int> inputEmployeeID)
        {
            var inputEmployeeIDParameter = inputEmployeeID.HasValue ?
                new ObjectParameter("InputEmployeeID", inputEmployeeID) :
                new ObjectParameter("InputEmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetManualCompOffList_Result>("SP_GetManualCompOffList", inputEmployeeIDParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeCSVForReport_Result> SP_GetEmployeeCSVForReport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> employeeTypeId, Nullable<int> departmentId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var employeeTypeIdParameter = employeeTypeId.HasValue ?
                new ObjectParameter("EmployeeTypeId", employeeTypeId) :
                new ObjectParameter("EmployeeTypeId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeCSVForReport_Result>("SP_GetEmployeeCSVForReport", fdateParameter, tdateParameter, companyIdParameter, branchIdParameter, employeeTypeIdParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeCSVForReportFilter_Result> SP_GetEmployeeCSVForReportFilter(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> employeeTypeId, Nullable<int> departmentId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var employeeTypeIdParameter = employeeTypeId.HasValue ?
                new ObjectParameter("EmployeeTypeId", employeeTypeId) :
                new ObjectParameter("EmployeeTypeId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeCSVForReportFilter_Result>("SP_GetEmployeeCSVForReportFilter", fdateParameter, tdateParameter, companyIdParameter, branchIdParameter, employeeTypeIdParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<SP_GetDailyTransactionListForCumulativeCompOffNew_Result> SP_GetDailyTransactionListForCumulativeCompOffNew(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDailyTransactionListForCumulativeCompOffNew_Result>("SP_GetDailyTransactionListForCumulativeCompOffNew", empIdParameter);
        }
    
        public virtual ObjectResult<SP_InsertExcelDataForEmployeeWithESSAndDeleteFlag_Result> SP_InsertExcelDataForEmployeeWithESSAndDeleteFlag(string employeeCode, string title, string firstName, string middleName, string lastName, string companyName, Nullable<System.DateTime> joiningDate, Nullable<System.DateTime> confirmDate, Nullable<System.DateTime> birthDate, string telephone1, string telephone2, string email, string emailAddress, string gender, string marritalStatus, string departmentName, string designationName, string employeeReportingId, string employeeReportingId2, string present_Address, string permanent_Address, string panNo, Nullable<System.DateTime> leavingdate, string branchName, string divisionName, string employeeGroupName, string employeeType, string gradeId, string shiftCode, string weekOff1, string weekOff2, Nullable<bool> first, Nullable<bool> second, Nullable<bool> third, Nullable<bool> fourth, Nullable<bool> fifth, Nullable<bool> isESSApplicable)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var confirmDateParameter = confirmDate.HasValue ?
                new ObjectParameter("ConfirmDate", confirmDate) :
                new ObjectParameter("ConfirmDate", typeof(System.DateTime));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var marritalStatusParameter = marritalStatus != null ?
                new ObjectParameter("MarritalStatus", marritalStatus) :
                new ObjectParameter("MarritalStatus", typeof(string));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var designationNameParameter = designationName != null ?
                new ObjectParameter("DesignationName", designationName) :
                new ObjectParameter("DesignationName", typeof(string));
    
            var employeeReportingIdParameter = employeeReportingId != null ?
                new ObjectParameter("EmployeeReportingId", employeeReportingId) :
                new ObjectParameter("EmployeeReportingId", typeof(string));
    
            var employeeReportingId2Parameter = employeeReportingId2 != null ?
                new ObjectParameter("EmployeeReportingId2", employeeReportingId2) :
                new ObjectParameter("EmployeeReportingId2", typeof(string));
    
            var present_AddressParameter = present_Address != null ?
                new ObjectParameter("Present_Address", present_Address) :
                new ObjectParameter("Present_Address", typeof(string));
    
            var permanent_AddressParameter = permanent_Address != null ?
                new ObjectParameter("Permanent_Address", permanent_Address) :
                new ObjectParameter("Permanent_Address", typeof(string));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            var leavingdateParameter = leavingdate.HasValue ?
                new ObjectParameter("Leavingdate", leavingdate) :
                new ObjectParameter("Leavingdate", typeof(System.DateTime));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("DivisionName", divisionName) :
                new ObjectParameter("DivisionName", typeof(string));
    
            var employeeGroupNameParameter = employeeGroupName != null ?
                new ObjectParameter("EmployeeGroupName", employeeGroupName) :
                new ObjectParameter("EmployeeGroupName", typeof(string));
    
            var employeeTypeParameter = employeeType != null ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(string));
    
            var gradeIdParameter = gradeId != null ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(string));
    
            var shiftCodeParameter = shiftCode != null ?
                new ObjectParameter("ShiftCode", shiftCode) :
                new ObjectParameter("ShiftCode", typeof(string));
    
            var weekOff1Parameter = weekOff1 != null ?
                new ObjectParameter("WeekOff1", weekOff1) :
                new ObjectParameter("WeekOff1", typeof(string));
    
            var weekOff2Parameter = weekOff2 != null ?
                new ObjectParameter("WeekOff2", weekOff2) :
                new ObjectParameter("WeekOff2", typeof(string));
    
            var firstParameter = first.HasValue ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(bool));
    
            var secondParameter = second.HasValue ?
                new ObjectParameter("Second", second) :
                new ObjectParameter("Second", typeof(bool));
    
            var thirdParameter = third.HasValue ?
                new ObjectParameter("Third", third) :
                new ObjectParameter("Third", typeof(bool));
    
            var fourthParameter = fourth.HasValue ?
                new ObjectParameter("Fourth", fourth) :
                new ObjectParameter("Fourth", typeof(bool));
    
            var fifthParameter = fifth.HasValue ?
                new ObjectParameter("Fifth", fifth) :
                new ObjectParameter("Fifth", typeof(bool));
    
            var isESSApplicableParameter = isESSApplicable.HasValue ?
                new ObjectParameter("IsESSApplicable", isESSApplicable) :
                new ObjectParameter("IsESSApplicable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsertExcelDataForEmployeeWithESSAndDeleteFlag_Result>("SP_InsertExcelDataForEmployeeWithESSAndDeleteFlag", employeeCodeParameter, titleParameter, firstNameParameter, middleNameParameter, lastNameParameter, companyNameParameter, joiningDateParameter, confirmDateParameter, birthDateParameter, telephone1Parameter, telephone2Parameter, emailParameter, emailAddressParameter, genderParameter, marritalStatusParameter, departmentNameParameter, designationNameParameter, employeeReportingIdParameter, employeeReportingId2Parameter, present_AddressParameter, permanent_AddressParameter, panNoParameter, leavingdateParameter, branchNameParameter, divisionNameParameter, employeeGroupNameParameter, employeeTypeParameter, gradeIdParameter, shiftCodeParameter, weekOff1Parameter, weekOff2Parameter, firstParameter, secondParameter, thirdParameter, fourthParameter, fifthParameter, isESSApplicableParameter);
        }
    
        public virtual ObjectResult<SP_LeaveSanctionIndex_Result> SP_LeaveSanctionIndex(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveSanctionIndex_Result>("SP_LeaveSanctionIndex", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_LeaveApplicationDetailsList_Result> SP_LeaveApplicationDetailsList(Nullable<int> employeeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveApplicationDetailsList_Result>("SP_LeaveApplicationDetailsList", employeeIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_GetCompanyList_Result> SP_GetCompanyList(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCompanyList_Result>("SP_GetCompanyList", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_GetBranchList_Result> SP_GetBranchList(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBranchList_Result>("SP_GetBranchList", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeCSVForReportFilterNew_Result> SP_GetEmployeeCSVForReportFilterNew(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> employeeTypeId, Nullable<int> departmentId, Nullable<int> employeeId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var employeeTypeIdParameter = employeeTypeId.HasValue ?
                new ObjectParameter("EmployeeTypeId", employeeTypeId) :
                new ObjectParameter("EmployeeTypeId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeCSVForReportFilterNew_Result>("SP_GetEmployeeCSVForReportFilterNew", fdateParameter, tdateParameter, companyIdParameter, branchIdParameter, employeeTypeIdParameter, departmentIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeCSVForReportNew_Result> SP_GetEmployeeCSVForReportNew(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> employeeTypeId, Nullable<int> departmentId, Nullable<int> employeeId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var employeeTypeIdParameter = employeeTypeId.HasValue ?
                new ObjectParameter("EmployeeTypeId", employeeTypeId) :
                new ObjectParameter("EmployeeTypeId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeCSVForReportNew_Result>("SP_GetEmployeeCSVForReportNew", fdateParameter, tdateParameter, companyIdParameter, branchIdParameter, employeeTypeIdParameter, departmentIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_VwActiveEmployee_Result> SP_VwActiveEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VwActiveEmployee_Result>("SP_VwActiveEmployee", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_ActiveEmployeeInEmployeeMasterNew_Result> SP_ActiveEmployeeInEmployeeMasterNew(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ActiveEmployeeInEmployeeMasterNew_Result>("SP_ActiveEmployeeInEmployeeMasterNew", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_VwLeaveApplicationIndex_Result> SP_VwLeaveApplicationIndex(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VwLeaveApplicationIndex_Result>("SP_VwLeaveApplicationIndex", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_VwManualCompOffList_Result> SP_VwManualCompOffList(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VwManualCompOffList_Result>("SP_VwManualCompOffList", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_VwODTravelIndex_Result> SP_VwODTravelIndex(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VwODTravelIndex_Result>("SP_VwODTravelIndex", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_ExceptionEntryListView_Result> SP_ExceptionEntryListView(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ExceptionEntryListView_Result>("SP_ExceptionEntryListView", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_GetEncashmentList_Result> SP_GetEncashmentList(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEncashmentList_Result>("SP_GetEncashmentList", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_VwCumulativeManualCompOffList_Result> SP_VwCumulativeManualCompOffList(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VwCumulativeManualCompOffList_Result>("SP_VwCumulativeManualCompOffList", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_Vw_CumulativeCompOffApplicationIndex_Result> SP_Vw_CumulativeCompOffApplicationIndex(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Vw_CumulativeCompOffApplicationIndex_Result>("SP_Vw_CumulativeCompOffApplicationIndex", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_Vw_CompOffApplicationIndex_Result> SP_Vw_CompOffApplicationIndex(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Vw_CompOffApplicationIndex_Result>("SP_Vw_CompOffApplicationIndex", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_UserTableForView_Result> SP_UserTableForView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserTableForView_Result>("SP_UserTableForView");
        }
    
        public virtual ObjectResult<SP_WetosGetEmployeeCompOffSanction_Result> SP_WetosGetEmployeeCompOffSanction(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WetosGetEmployeeCompOffSanction_Result>("SP_WetosGetEmployeeCompOffSanction", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_WetosGetEmployeeCumulativeCompOffSanction_Result> SP_WetosGetEmployeeCumulativeCompOffSanction(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WetosGetEmployeeCumulativeCompOffSanction_Result>("SP_WetosGetEmployeeCumulativeCompOffSanction", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_WetosGetEmployeeODTravelSanction_Result> SP_WetosGetEmployeeODTravelSanction(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WetosGetEmployeeODTravelSanction_Result>("SP_WetosGetEmployeeODTravelSanction", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_CumulativeManualCOSanctionIndex_Result> SP_CumulativeManualCOSanctionIndex(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CumulativeManualCOSanctionIndex_Result>("SP_CumulativeManualCOSanctionIndex", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_HolidayListView_Result> SP_HolidayListView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_HolidayListView_Result>("SP_HolidayListView");
        }
    
        public virtual ObjectResult<SP_VwODEarlyLateIndex_Result> SP_VwODEarlyLateIndex(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VwODEarlyLateIndex_Result>("SP_VwODEarlyLateIndex", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_WetosGetEmployeeODLateEarlySanction_Result> SP_WetosGetEmployeeODLateEarlySanction(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WetosGetEmployeeODLateEarlySanction_Result>("SP_WetosGetEmployeeODLateEarlySanction", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetProcessedSalaryList_Result> SP_GetProcessedSalaryList(Nullable<int> financialYearId)
        {
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProcessedSalaryList_Result>("SP_GetProcessedSalaryList", financialYearIdParameter);
        }
    
        public virtual ObjectResult<SP_POSTINGGetRequiredEmployeeDetails_Result> SP_POSTINGGetRequiredEmployeeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_POSTINGGetRequiredEmployeeDetails_Result>("SP_POSTINGGetRequiredEmployeeDetails");
        }
    
        public virtual int SP_UPDATELeaveBalanceBeforePosting(Nullable<System.DateTime> trandate)
        {
            var trandateParameter = trandate.HasValue ?
                new ObjectParameter("Trandate", trandate) :
                new ObjectParameter("Trandate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATELeaveBalanceBeforePosting", trandateParameter);
        }
    
        public virtual ObjectResult<SP_GetFinancialYearDataList_Result> SP_GetFinancialYearDataList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFinancialYearDataList_Result>("SP_GetFinancialYearDataList");
        }
    
        public virtual ObjectResult<SP_EmployeeProfile_Result> SP_EmployeeProfile(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmployeeProfile_Result>("SP_EmployeeProfile", employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeCSVForReportNewDept_Result> SP_GetEmployeeCSVForReportNewDept(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> employeeTypeId, string departmentId, Nullable<int> employeeId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var employeeTypeIdParameter = employeeTypeId.HasValue ?
                new ObjectParameter("EmployeeTypeId", employeeTypeId) :
                new ObjectParameter("EmployeeTypeId", typeof(int));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeCSVForReportNewDept_Result>("SP_GetEmployeeCSVForReportNewDept", fdateParameter, tdateParameter, companyIdParameter, branchIdParameter, employeeTypeIdParameter, departmentIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<SP_BranchAdminList_Result> SP_BranchAdminList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BranchAdminList_Result>("SP_BranchAdminList");
        }
    
        public virtual ObjectResult<SP_EmployeeTimeLine_Result> SP_EmployeeTimeLine(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmployeeTimeLine_Result>("SP_EmployeeTimeLine", employeeIdParameter);
        }
    
        public virtual int SP_FactoryReset()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FactoryReset");
        }
    
        public virtual ObjectResult<SP_GetEmployeeGroupDetail_Result> SP_GetEmployeeGroupDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeGroupDetail_Result>("SP_GetEmployeeGroupDetail");
        }
    
        public virtual int SPPostingprocessForAutoShiftWithNS(Nullable<System.DateTime> trandate)
        {
            var trandateParameter = trandate.HasValue ?
                new ObjectParameter("Trandate", trandate) :
                new ObjectParameter("Trandate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPostingprocessForAutoShiftWithNS", trandateParameter);
        }
    
        public virtual int SPPostingprocess(Nullable<System.DateTime> trandate)
        {
            var trandateParameter = trandate.HasValue ?
                new ObjectParameter("Trandate", trandate) :
                new ObjectParameter("Trandate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPostingprocess", trandateParameter);
        }
    
        public virtual ObjectResult<usp_Report_EmployeeDetails_Result> usp_Report_EmployeeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_EmployeeDetails_Result>("usp_Report_EmployeeDetails");
        }
    
        public virtual ObjectResult<SP_EmployeeListForResignationAndConfirmationNew_Result_New_Result> SP_EmployeeListForResignationAndConfirmationNew_Result_New(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmployeeListForResignationAndConfirmationNew_Result_New_Result>("SP_EmployeeListForResignationAndConfirmationNew_Result_New", employeeIDParameter);
        }
    
        public virtual ObjectResult<SP_LeaveEncashSanctionIndex_Result> SP_LeaveEncashSanctionIndex(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LeaveEncashSanctionIndex_Result>("SP_LeaveEncashSanctionIndex", employeeIdParameter);
        }
    
        public virtual ObjectResult<sp_get_Roleuser_Result> sp_get_Roleuser(Nullable<int> roleid, Nullable<int> y_id, Nullable<int> companyId, Nullable<int> branchId)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var y_idParameter = y_id.HasValue ?
                new ObjectParameter("y_id", y_id) :
                new ObjectParameter("y_id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Roleuser_Result>("sp_get_Roleuser", roleidParameter, y_idParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<sp_get_audit_trail_Result> sp_get_audit_trail(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_audit_trail_Result>("sp_get_audit_trail", userIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_GetAttendanceIndex_Result> SP_GetAttendanceIndex(Nullable<int> employeeId, Nullable<int> currentMonth, Nullable<int> currentYear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var currentMonthParameter = currentMonth.HasValue ?
                new ObjectParameter("CurrentMonth", currentMonth) :
                new ObjectParameter("CurrentMonth", typeof(int));
    
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAttendanceIndex_Result>("SP_GetAttendanceIndex", employeeIdParameter, currentMonthParameter, currentYearParameter);
        }
    
        public virtual ObjectResult<SP_CondoneTrnListView_Result> SP_CondoneTrnListView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CondoneTrnListView_Result>("SP_CondoneTrnListView");
        }
    
        public virtual ObjectResult<SP_GetAssignRuleData_Result> SP_GetAssignRuleData(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> employeeGroupId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var employeeGroupIdParameter = employeeGroupId.HasValue ?
                new ObjectParameter("EmployeeGroupId", employeeGroupId) :
                new ObjectParameter("EmployeeGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAssignRuleData_Result>("SP_GetAssignRuleData", companyIdParameter, branchIdParameter, employeeGroupIdParameter);
        }
    
        public virtual ObjectResult<SP_GetAssignedRuleForSelectedEmployeeGroup_Result> SP_GetAssignedRuleForSelectedEmployeeGroup(Nullable<int> inputEmployeeGroupId)
        {
            var inputEmployeeGroupIdParameter = inputEmployeeGroupId.HasValue ?
                new ObjectParameter("InputEmployeeGroupId", inputEmployeeGroupId) :
                new ObjectParameter("InputEmployeeGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAssignedRuleForSelectedEmployeeGroup_Result>("SP_GetAssignedRuleForSelectedEmployeeGroup", inputEmployeeGroupIdParameter);
        }
    }
}
